"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[68749],{19668:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"Extensions/Web_service_components/The_USoft_component_table_XML_format","title":"The USoft component table XML format","description":"The syntax of the USoft component table XML format is:","source":"@site/docs/Extensions/Web_service_components/The_USoft_component_table_XML_format.md","sourceDirName":"Extensions/Web_service_components","slug":"/Extensions/Web_service_components/The_USoft_component_table_XML_format","permalink":"/udocs/Extensions/Web_service_components/The_USoft_component_table_XML_format","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"The_USoft_component_table_XML_format"},"sidebar":"sidebar","previous":{"title":"Using XSL transformations for web service component tables","permalink":"/udocs/Extensions/Web_service_components/Using_XSL_transformations_for_web_service_component_tables"},"next":{"title":"Finishing creating a web service component table","permalink":"/udocs/Extensions/Web_service_components/Finishing_creating_a_web_service_component_table"}}');var s=t(74848),a=t(28453);const i={id:"The_USoft_component_table_XML_format"},r="The USoft component table XML format",c={},m=[];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"the-usoft-component-table-xml-format",children:"The USoft component table XML format"})}),"\n",(0,s.jsx)(n.p,{children:"The syntax of the USoft component table XML format is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<Table>\n    <Row>\n        <Field Name = "..." Value = "..." Index = "..."/>\n        <Field Name = "..." Value = "..." Index = "..."/>\n    </Row>\n    <Row>\n        <Field Name = "..." Value = "..." Index = "..."/>\n        <Field Name = "..." Value = "..." Index = "..."/>\n    </Row>\n...\n</Table>\n'})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"For input parameters, if an Input XSL is applied, the Name attribute is NOT included. The match has to be made on Index.\nThis XML format contains ALL table fields, not only the fields on which is queried.\nThe Name attribute in the Field element must contain the name of a column in the component table. The Index attribute must be the Position of the column in the table."})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(96540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);