"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[3510],{23380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Services/USoft_Service_Definer_objects/Example_Custom_authorization_for_REST_services","title":"Example: Custom authorization for REST services","description":"USoft provides different authentication schemes. It also allows you to create your own custom authentication. REST services in USoft Service Definer use the Java Jersey Framework. This framework provides a set of features that you can use in Service Definer to extend current functionality. One of the features is the possibility of adding filters to a REST request. By defining a REST request filter, you can add an authentication check before the method is executed. Check Java and Jersey Framework documentation for more explanation on filters.","source":"@site/docs/Services/USoft_Service_Definer_objects/Example_Custom_authorization_for_REST_services.md","sourceDirName":"Services/USoft_Service_Definer_objects","slug":"/Services/USoft_Service_Definer_objects/Example_Custom_authorization_for_REST_services","permalink":"/udocs/Services/USoft_Service_Definer_objects/Example_Custom_authorization_for_REST_services","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_Custom_authorization_for_REST_services"},"sidebar":"sidebar","previous":{"title":"Structures","permalink":"/udocs/Services/USoft_Service_Definer_objects/Structures"},"next":{"title":"Web socket services","permalink":"/udocs/Services/Web_socket_services"}}');var i=n(74848),s=n(28453);const o={id:"Example_Custom_authorization_for_REST_services"},a="Example: Custom authorization for REST services",c={},l=[{value:"Creating a functional type based on the Jersey filter class",id:"creating-a-functional-type-based-on-the-jersey-filter-class",level:2},{value:"Creating a service for authentication check",id:"creating-a-service-for-authentication-check",level:2},{value:"Test your custom authentication in POSTMAN",id:"test-your-custom-authentication-in-postman",level:2}];function h(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"example-custom-authorization-for-rest-services",children:"Example: Custom authorization for REST services"})}),"\n",(0,i.jsx)(t.p,{children:"USoft provides different authentication schemes. It also allows you to create your own custom authentication. REST services in USoft Service Definer use the Java Jersey Framework. This framework provides a set of features that you can use in Service Definer to extend current functionality. One of the features is the possibility of adding filters to a REST request. By defining a REST request filter, you can add an authentication check before the method is executed. Check Java and Jersey Framework documentation for more explanation on filters."}),"\n",(0,i.jsx)(t.p,{children:"This example shows how you can create a functional type for a Jersey filter, to allow custom token authentication using a custom HTTP header (API-Token) for sending the authentication token."}),"\n",(0,i.jsx)(t.p,{children:'This example assumes that you already have a custom REST service and this service is exposed by a Server. For details on how to do these 2 things, step out to help topic "Setting up your own REST service ". Your custom REST service will probably need USoft credentials to connect to the USoft Rules Service. Use anonymous authentication with a user name and a password to provide USoft credentials.'}),"\n",(0,i.jsx)(t.h2,{id:"creating-a-functional-type-based-on-the-jersey-filter-class",children:"Creating a functional type based on the Jersey filter class"}),"\n",(0,i.jsx)(t.p,{children:"1.\xa0Choose Define, Functional Types from the USoft Service Definer menu."}),"\n",(0,i.jsx)(t.p,{children:"The Functional Types window appears."}),"\n",(0,i.jsx)(t.p,{children:"2.\xa0Create a functional type record."}),"\n",(0,i.jsxs)(t.p,{children:['3.\xa0Set "Functional Type" = ',(0,i.jsx)(t.strong,{children:"Jersey Request Filter"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:['4.\xa0Set "Implemented Interfaces Names" = ',(0,i.jsx)(t.strong,{children:"javax.ws.rs.container.ContainerRequestFilter"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:['5.\xa0Set "Used for Class Type" = ',(0,i.jsx)(t.strong,{children:"Rest Service"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"6.\xa0Save."}),"\n",(0,i.jsx)(t.h2,{id:"creating-a-service-for-authentication-check",children:"Creating a service for authentication check"}),"\n",(0,i.jsx)(t.p,{children:"1.\xa0Choose Define, REST Services from the menu."}),"\n",(0,i.jsxs)(t.p,{children:['2.\xa0Insert a new "REST Services" record and set its Service Name value to ',(0,i.jsx)(t.strong,{children:"mycustomauthenticator"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["3.\xa0Click the lookup button at the Functional Type field and select '",(0,i.jsx)(t.strong,{children:"Jersey Request Filter"}),"'",(0,i.jsx)(t.strong,{children:"."})]}),"\n",(0,i.jsx)(t.p,{children:"4.\xa0Save work. Defaults are generated for Package and for Relative URI Path. Clear the Relative URI Path field."}),"\n",(0,i.jsx)(t.p,{children:"5.\xa0Choose Actions, Add Unimplemented Methods from the USoft Service Definer menu."}),"\n",(0,i.jsx)(t.p,{children:"This adds a new method to the 'mycustomauthenticator' service. Clear the Relative URI Path and Produces fields, and set REST HTTP Verb = null."}),"\n",(0,i.jsx)(t.p,{children:"6.\xa0Save work."}),"\n",(0,i.jsx)(t.p,{children:"7.\xa0Replace the Implementation field of the method by:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-language-java",children:'String token = par1.getHeaderString("API-Token");\nString serverToken = "very secret authentication token";\nif (token == null || !token.equals(serverToken))\n \xa0 throw new javax.ws.rs.WebApplicationException(403););\n\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"The authentication token can also be loaded from a configuration file, using for example"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-language-java",children:'String serverToken = UServiceConfig.getConfigString("API-Token");\n'})}),"\n",(0,i.jsx)(t.p,{children:"or from a different (maybe encoded) file, using Java code."}),"\n",(0,i.jsx)(t.p,{children:"8.\xa0Associate you filter REST service with a server. Go to Servers tab and add your server to the Server Name list."}),"\n",(0,i.jsx)(t.p,{children:"9.\xa0Install, Publish and Start your server."}),"\n",(0,i.jsx)(t.h2,{id:"test-your-custom-authentication-in-postman",children:"Test your custom authentication in POSTMAN"}),"\n",(0,i.jsx)(t.p,{children:"1.\xa0Open POSTMAN, and specify the REST service URL. For example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"http://localhost:8090/mycustomservice/clients\n"})}),"\n",(0,i.jsxs)(t.p,{children:["2.\xa0Set the HTTP verb to the correct value, as defined in the operations that you defined in Service Definer (e.g. ",(0,i.jsx)(t.strong,{children:"GET)"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"3.\xa0Specify a custom header API-Token with value 'very secret authentication token'.\xa0"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"GET /mycustomservice/clients\nHost: localhost:8090\nAPI-Token: very secret authentication token\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"4.\xa0Press the Send button."}),"\n",(0,i.jsx)(t.p,{children:"See that the HTTP request is successful."}),"\n",(0,i.jsx)(t.p,{children:"5.\xa0Check the same with a invalid API-Token value"}),"\n",(0,i.jsx)(t.p,{children:"See that the HTTP request returns 403 status code."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);