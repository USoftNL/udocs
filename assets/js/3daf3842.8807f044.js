"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[17444],{21361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_1","title":"Configuration example 1","description":"In this example, different machines have different installation directories where the released application flatfiles must be deployed. The example shows how to configure these machine-specific installation directories.","source":"@site/docs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_1.md","sourceDirName":"Continuous_delivery/Understanding_USoft_Delivery_Manager","slug":"/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_1","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_1","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Configuration_example_1"},"sidebar":"sidebar","previous":{"title":"Configuration by XSL transformation","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_by_XSL_transformation"},"next":{"title":"Configuration example 2","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_2"}}');var r=n(74848),s=n(28453);const a={id:"Configuration_example_1"},o="Configuration example 1",l={},c=[{value:"Step 1: Release machine-specific information in a registry",id:"step-1-release-machine-specific-information-in-a-registry",level:3},{value:"Step 2: Release a deploy script that reads the registry information at deploy time",id:"step-2-release-a-deploy-script-that-reads-the-registry-information-at-deploy-time",level:3},{value:"Step 3: Distribute and run",id:"step-3-distribute-and-run",level:3}];function d(e){const t={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"configuration-example-1",children:"Configuration example 1"})}),"\n",(0,r.jsx)(t.p,{children:"In this example, different machines have different installation directories where the released application flatfiles must be deployed. The example shows how to configure these machine-specific installation directories."}),"\n",(0,r.jsx)(t.p,{children:"This example illustrates the use of a registry for machine-specific information, combined with a deploy script that reads this information."}),"\n",(0,r.jsx)(t.h3,{id:"step-1-release-machine-specific-information-in-a-registry",children:"Step 1: Release machine-specific information in a registry"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Run the Tools, Load Registry Samples feature from the Delivery Manager menu. More information about this feature is here. An explanation of what is a registry is here."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Choose Release, Registries from the menu. Find the registry that has Current = Yes. Tailor the XML so that it specifies installation directory information for each separate machine:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'...\n \xa0<Computers>\n \xa0 \xa0<Computer name="COMPUTER_1">\n \xa0 \xa0 \xa0<Installations>\n \xa0 \xa0 \xa0 \xa0<Installation installdir="c:\\usd91"/>\n \xa0 \xa0 \xa0 \xa0...\n \xa0 \xa0<Computer name="COMPUTER_2">\n \xa0 \xa0 \xa0<Installations>\n \xa0 \xa0 \xa0 \xa0<Installation installdir="c:\\USoft\\USoft91"/>\n \xa0 \xa0 \xa0 \xa0... \xa0 \xa0\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Create a task with a task step that executes the Release flatfiles action."}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Make sure that the Current Release (choose Release, Current Release) has Put Current Release = Yes."}),"\n",(0,r.jsxs)(t.p,{children:["5.\xa0Run the task step. See that flatfiles have been released to the ",(0,r.jsx)(t.strong,{children:"\\flatfiles"}),' release folder. See that your registry XML has been released to a file called "registry.xml" one level higher.']}),"\n",(0,r.jsx)(t.h3,{id:"step-2-release-a-deploy-script-that-reads-the-registry-information-at-deploy-time",children:"Step 2: Release a deploy script that reads the registry information at deploy time"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Run the Tools, Load Deploy Samples feature from the Delivery Manager menu. More information about this feature is here. An explanation of what is a deploy script is here."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Choose Release, Attachments from the menu. Retrieve the sample that has File Name = deploy.xml and Section = flatfiles. Make sure the attachment has Subfolder ="}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\\\n"})}),"\n",(0,r.jsx)(t.p,{children:"and Blocked = No."}),"\n",(0,r.jsxs)(t.p,{children:['3.\xa0Re-run the task step that releases the flatfiles. Check that a "deploy.xml" script has been output that reads the installation directories from the registry (most relevant code is ',(0,r.jsx)(t.strong,{children:"bold"}),"):\xa0"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<root xmlns:pc="Processing.Command" xmlns:assign="Processing.Command.Assign">\n<pc:terminate test="not(wrights:HasAdminRole())" \n \xa0msg="{concat(\'Admin role is required. Available roles:\', wrights:Roles())}"/>\n<pc:assign-default workingdir="{directories:Get()}"/>\n \x3c!-- Extract registry data --\x3e\n <pc:assign-nodeset reg="{files:XmlFile(\'../registry.xml\')}"/>\n <pc:assign \n \xa0 \xa0 \xa0 \xa0 installdir="{$reg//Computer[@name=environment:MachineName()]//Installation/@installdir}"/>\n <pc:assign sourcedir="{$workingdir}" destdir="{path:Combine($installdir, \'app\')}"/>\n \x3c!-- Deploy new or changed flatfiles --\x3e\n <pc:assign-nodeset \n \xa0 \xa0 \xa0 \xa0 myfilteredlist="{directories:DirectoryContent($workingdir, \'*.*\', \'1\', \'\', \'\')}"/>\n <pc:each using="directories:DirectoryContent($workingdir, \'*.*\', \'1\', \'\', \'\')" \n \xa0 \xa0 \xa0 \xa0 select="Directory/File[not(@filename=\'deploy.xml\')]" assign:result="@filename">\n  <pc:CopyFileOverwrite source="{path:Combine($sourcedir,$result)}" \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0destination="{path:Combine($destdir,$result)}"/>\n </pc:each>\n \x3c!-- Restart rulesservices --\x3e\n <pc:each using="$reg" select="//Computer[@name=environment:MachineName()]" \n \xa0 \xa0 \xa0 \xa0 assign:rulesservices="//RulesService">\n  <pc:each select="$rulesservices" assign:servicename="@winServiceName">\n   <pc:ServiceStop servicename="{$servicename}"/>\n   <pc:ServiceStart servicename="{$servicename}"/>\n  </pc:each>\n </pc:each>\n</root>\n\n'})}),"\n",(0,r.jsx)(t.h3,{id:"step-3-distribute-and-run",children:"Step 3: Distribute and run"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Distribute the released file-and-folder structure to a target machine."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0On this target machine, run the deploy script. Click here for details on this step."}),"\n",(0,r.jsx)(t.p,{children:"See that the flatfiles have been correctly deployed to the directory specified for that target machine."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);