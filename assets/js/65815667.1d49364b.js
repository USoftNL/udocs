"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[46693],{22042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Services/USoft_Service_Definer_objects/Example_Reservation_event_functional_type","title":"Example: Reservation event functional type","description":"Service Definer allows you to define technical interfaces so that you can build an integration layer between different systems. A technical interface defines the characteristics of integrations between systems: the operations themselves, whether operations are read or write, data transport layers, data formats...","source":"@site/docs/Services/USoft_Service_Definer_objects/Example_Reservation_event_functional_type.md","sourceDirName":"Services/USoft_Service_Definer_objects","slug":"/Services/USoft_Service_Definer_objects/Example_Reservation_event_functional_type","permalink":"/udocs/Services/USoft_Service_Definer_objects/Example_Reservation_event_functional_type","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_Reservation_event_functional_type"},"sidebar":"sidebar","previous":{"title":"Functional types","permalink":"/udocs/Services/USoft_Service_Definer_objects/Functional_types"},"next":{"title":"Multiple connections and Rules Services","permalink":"/udocs/Services/USoft_Service_Definer_objects/Multiple_connections_and_Rules_Services"}}');var r=n(74848),i=n(28453);const s={id:"Example_Reservation_event_functional_type"},c="Example: Reservation event functional type",o={},l=[{value:"Create ParticipantEvent structure",id:"create-participantevent-structure",level:2},{value:"Create a functional type based on ParticipantEvent structure",id:"create-a-functional-type-based-on-participantevent-structure",level:2},{value:"Use functional type based on the ParticipantEvent structure",id:"use-functional-type-based-on-the-participantevent-structure",level:2},{value:"",id:"",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"example-reservation-event-functional-type",children:"Example: Reservation event functional type"})}),"\n",(0,r.jsx)(t.p,{children:"Service Definer allows you to define technical interfaces so that you can build an integration layer between different systems. A technical interface defines the characteristics of integrations between systems: the operations themselves, whether operations are read or write, data transport layers, data formats..."}),"\n",(0,r.jsx)(t.p,{children:"Usually the data format of choice when working with technical interfaces is XML or JSON. In Service Definer you can use a structure as input/output of your service, and Service Framework will create the XML (or JSON) message for you at runtime."}),"\n",(0,r.jsx)(t.p,{children:"A travel agency wants to create a technical interface for message events that follow a participant in a reservation for a scheduled tour. The technical interface is a REST service. This REST service allows the operations of participant reservation, participant arrival, and participant departure. Each operation involves data in XML format."}),"\n",(0,r.jsx)(t.p,{children:"Participant reservation is the operation of registering a new participant in a reservation. It involves data such as the following."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:"<ParticipantRegistrationEvent>\n \xa0 <EventDateTime>2018-12-31T11:00:00</EventDateTime>\n \xa0 <ReservationId>RES10000</ReservationId>\n \xa0 <ParticipantId>PAR10000</ParticipantId>\n \xa0 <Name>Jane Doe</Name>\n \xa0 <Address>Unknown</Address>\n</ParticipantRegistrationEvent>\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Participant arrival is the operation of registering that a participant has arrived at a specific location to join a group (for example, when the tour starts). It involves data such as the following."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:"<ParticipantArrivalEvent>\n \xa0 <EventDateTime>2019-03-10T11:00:00</EventDateTime>\n \xa0 <ReservationId>RES10000</ReservationId>\n \xa0 <ParticipantId>PAR10000</ParticipantId>\n \xa0 <Location>Amsterdam</Location>\n \xa0 <ArrivalDateTime>2019-03-10T10:00:00</ArrivalDateTime>\n</ParticipantArrivalEvent>\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Participant departure is the operation of registering that a participant has left the group (for example, at the end of the tour). It involves data such as the following."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:"<ParticipantDepartureEvent>\n \xa0 <EventDateTime>2019-03-20T16:10:00</EventDateTime>\n \xa0 <ReservationId>RES10000</ReservationId>\n \xa0 <ParticipantId>PAR10000</ParticipantId>\n \xa0 <Location>Amsterdam</Location>\n \xa0 <DepartureDateTime>2019-03-20T16:00:00</DepartureDateTime>\n</ParticipantDepartureEvent>\n\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The following example will only show how to implement a functional type for a structure that has reusable attributes. First create a REST Service for each operation that will insert the above XML data in a PARTICIPANT_EVENT table. Use ",(0,r.jsx)(t.strong,{children:"ParticipantRegistrationEvent"}),", \xa0",(0,r.jsx)(t.strong,{children:"ParticipantArrivalEvent"})," and ",(0,r.jsx)(t.strong,{children:"ParticipantDepartureEvent"})," as names for your generated structures."]}),"\n",(0,r.jsx)(t.p,{children:"Since all XML messages have common attributes, the generated structures have also common fields. You can create a new structure ParticipantEvent that holds the common attributes. As a next step, you can create a functional type based on the new structure and use it in each participant event structure as a functional type. This way, if the ParticipantEvent changes, all types of participant events will change also."}),"\n",(0,r.jsx)(t.h2,{id:"create-participantevent-structure",children:"Create ParticipantEvent structure"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Choose Define, Structures from the USoft Service Definer menu."}),"\n",(0,r.jsx)(t.p,{children:"The Structures window appears."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Specify ParticipantEvent as the Name of the structure"}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Save."}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Add three elements to the Tree Structure tab. Do this by right-clicking on the ParticipantEvent element."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Field Name"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Type"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Annotation"})})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"EventDateTime"}),(0,r.jsx)(t.td,{children:"Date"}),(0,r.jsx)(t.td,{children:'@Column(name="EventDateTime");@XmlElement(name="EventDateTime")'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ReservationId"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:'@Column(name="ReservationId");@XmlElement(name="ReservationId")'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ParticipantId"}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:'@Column(name="ParticipantId");@XmlElement(name="ParticipantId")'})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0Save."}),"\n",(0,r.jsx)(t.h2,{id:"create-a-functional-type-based-on-participantevent-structure",children:"Create a functional type based on ParticipantEvent structure"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Choose Define, Functional Types from the USoft Service Definer menu."}),"\n",(0,r.jsx)(t.p,{children:"The Functional Types window appears."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Create a functional type record."}),"\n",(0,r.jsxs)(t.p,{children:['3.\xa0Set "Functional Type" = ',(0,r.jsx)(t.strong,{children:"Participant Event"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:['4.\xa0Set "Super Class Name" = ',(0,r.jsx)(t.strong,{children:"com.usoft.service.ParticipantEvent"}),"."]}),"\n",(0,r.jsx)(t.p,{children:'5.\xa0Set "Used for Class Type" = Structure.'}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0Save."}),"\n",(0,r.jsx)(t.h2,{id:"use-functional-type-based-on-the-participantevent-structure",children:"Use functional type based on the ParticipantEvent structure"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Choose Define, Structures from the USoft Service Definer menu."}),"\n",(0,r.jsx)(t.p,{children:"The Structures window appears."}),"\n",(0,r.jsxs)(t.p,{children:['2.\xa0Set "Query on Name" = ',(0,r.jsx)(t.strong,{children:"ParticipantArrivalEvent"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:['3.\xa0Set "Functional Type" = ',(0,r.jsx)(t.strong,{children:"Participant Event"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Delete the EventDateTime, ReservationId and ParticipantId fields from the Tree Structure."}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0Save."}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0Repeat the above steps for the ParticipantDepartureEvent and ParticipantRegistrationEvent structures."}),"\n",(0,r.jsx)(t.h3,{id:"",children:"\xa0"})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var a=n(96540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);