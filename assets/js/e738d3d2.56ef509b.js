"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[86611],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const l={},r=i.createContext(l);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},83447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Extensions/RDMI_Components/Component_querying_multiple_CSV_files","title":"Component querying multiple CSV files","description":"This is a variation on Example 1. Instead of querying a CSV file identified by a hard-coded filepath, a column is added to the component table. This allows the user, at query time, to identify the CSV file to be queried.","source":"@site/docs/Extensions/RDMI_Components/Component_querying_multiple_CSV_files.md","sourceDirName":"Extensions/RDMI_Components","slug":"/Extensions/RDMI_Components/Component_querying_multiple_CSV_files","permalink":"/udocs/Extensions/RDMI_Components/Component_querying_multiple_CSV_files","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Component_querying_multiple_CSV_files"},"sidebar":"sidebar","previous":{"title":"Query protocol, component table","permalink":"/udocs/Extensions/RDMI_Components/Query_protocol_component_table"},"next":{"title":"Component querying a CSV file","permalink":"/udocs/Extensions/RDMI_Components/Component_querying_a_CSV_file"}}');var l=t(74848),r=t(28453);const s={id:"Component_querying_multiple_CSV_files"},o="Component querying multiple CSV files",d={},c=[{value:"Step 1: .NET component for retrieving data from multiple CSV files",id:"step-1-net-component-for-retrieving-data-from-multiple-csv-files",level:3},{value:"Step 2: Query protocol association",id:"step-2-query-protocol-association",level:3},{value:"Step 3: Testing the query protocol",id:"step-3-testing-the-query-protocol",level:3},{value:"Step 4: Component table",id:"step-4-component-table",level:3},{value:"Step 5: Query Mandatory",id:"step-5-query-mandatory",level:3},{value:"Step 6: Testing the solution",id:"step-6-testing-the-solution",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"component-querying-multiple-csv-files",children:"Component querying multiple CSV files"})}),"\n",(0,l.jsx)(n.p,{children:"This is a variation on Example 1. Instead of querying a CSV file identified by a hard-coded filepath, a column is added to the component table. This allows the user, at query time, to identify the CSV file to be queried."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"Example"})}),"\n",(0,l.jsxs)(n.p,{children:["Here is an input file called ",(0,l.jsx)(n.strong,{children:"C:\\Temp\\schedtour.csv"})," that demonstrates the data format expected by the example component:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"146,AUSTRALIA,ISLAND SUNTANNER,21-3-2020 11:59:01,1-4-2020 11:59:01,2500\n145,AUSTRALIA,ISLAND SUNTANNER,20-11-2019 11:59:01,1-12-2019 11:59:01,2500\n144,BRAZIL,RAINFOREST RIDE,16-10-2021 11:59:01,29-10-2021 11:59:01,3000\n143,BRAZIL,RAINFOREST RIDE,15-9-2021 11:59:01,28-9-2021 11:59:01,3000\n142,BRAZIL,RAINFOREST RIDE,15-8-2021 11:59:01,28-8-2021 11:59:01,5500\n\n"})}),"\n",(0,l.jsx)(n.h3,{id:"step-1-net-component-for-retrieving-data-from-multiple-csv-files",children:"Step 1: .NET component for retrieving data from multiple CSV files"}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0Choose Define, RDMI, dotNet Components from the USoft Definer menu. The DotNetComponents window opens."}),"\n",(0,l.jsx)(n.p,{children:"2.\xa0Provide a Name for your new component, in this case: CSV."}),"\n",(0,l.jsx)(n.p,{children:"3.\xa0In the Program Source field, provide the source code of the component:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-language-cs",children:'using System;\nusing System.Text;\nusing System.IO;\nclass CSV\n{\n string csvFileName = null;\n StreamReader reader = null;\n\n public long QueryExe(string fileName, Nullable<Int32> id, string destination, string tourType, Nullable<DateTime> startDate, Nullable<DateTime> returnDate, Nullable<Int32> price)\n {\n     csvFileName = fileName;\n     if(String.IsNullOrEmpty(csvFileName))\n         throw new Exception("Filename is not set.");\n     reader = new StreamReader(csvFileName);\n     return 1;\n}\n\npublic long QueryFetch(out string fileName, out Nullable<Int32> id, out string destination, out string tourType, out Nullable<DateTime> startDate, out Nullable<DateTime> returnDate, out Nullable<Int32> price)\n{\n     id = null;\n     destination = null;\n     tourType = null;\n     startDate = null;\n     returnDate = null;\n     price = null;\n     fileName = csvFileName;\n     if(reader.EndOfStream){\n          reader.Close();\n          return 0;\n     }\n\n     try{\n          var line = reader.ReadLine();\n          var values = line.Split(\',\');\n          int n = 0;\n          if(values[0] != null && !Int32.TryParse(values[0], out n))\n               throw new Exception("Cannot convert value " + values[0] + " to a number");\n\n          id = n;\n          destination = values[1];\n          tourType = values[2];\n          if(values[3] != null)\n               startDate = Convert.ToDateTime(values[3]);\n\n          if(values[4] != null)\n               returnDate = Convert.ToDateTime(values[4]);\n\n          if(values[5] != null && !Int32.TryParse(values[5], out n))\n               throw new Exception("Cannot convert value " + values[5] + " to a number");\n\n          price = n;\n     }catch(Exception e){\n             reader.Close();\n             throw e;\n     } \n\n     return 1;\n }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"4.\xa0Save work."}),"\n",(0,l.jsx)(n.p,{children:"5.\xa0Press the Check button. The RDMI interface is generated by USoft."}),"\n",(0,l.jsx)(n.p,{children:"6.\xa0On the State tab, set:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Stateful Component = Y"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Participant in Transaction = N"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Support tablecomponent = Y"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Update = N"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Insert = N"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Delete = N"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"7.\xa0Save work."}),"\n",(0,l.jsx)(n.h3,{id:"step-2-query-protocol-association",children:"Step 2: Query protocol association"}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0In the DotNet Components window, click the Query Protocol Associations tab page."}),"\n",(0,l.jsx)(n.p,{children:"2.\xa0Fill out the following fields:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Protocol = QUERY"}),"\n",(0,l.jsx)(n.li,{children:"Execute Method = QUERYEXE"}),"\n",(0,l.jsx)(n.li,{children:"Fetch Method = QUERYFETCH"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"3.\xa0Save work."}),"\n",(0,l.jsx)(n.h3,{id:"step-3-testing-the-query-protocol",children:"Step 3: Testing the query protocol"}),"\n",(0,l.jsx)(n.p,{children:"At this point, you can test the query protocol with null values."}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0Open the User Application from USoft Binder."}),"\n",(0,l.jsx)(n.p,{children:"2.\xa0In Sql Command, execute:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"INVOKE csv.query WITH\nSELECT 'C:\\Temp\\schedtour.csv', null, null, null, null, null, null\n\n"})}),"\n",(0,l.jsx)(n.h3,{id:"step-4-component-table",children:"Step 4: Component table"}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0Choose Tables, Component Tables from the USoft Definer menu."}),"\n",(0,l.jsx)(n.p,{children:"2.\xa0Provide the name CSV for your new component table."}),"\n",(0,l.jsx)(n.p,{children:"3.\xa0Provide values for the Abbreviation, Object Name and Object Name Plural fields."}),"\n",(0,l.jsx)(n.p,{children:"4.\xa0Define the following columns:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Name"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Data Type for domain"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Prompt"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Key"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Position"})})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"FILE_NAME"}),(0,l.jsx)(n.td,{children:"NVARCHAR2(255)"}),(0,l.jsx)(n.td,{children:"CSV File"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"1"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"ID\xa0"}),(0,l.jsx)(n.td,{children:"NUMBER"}),(0,l.jsx)(n.td,{children:"Id\xa0"}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"2"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DESTINATION"}),(0,l.jsx)(n.td,{children:"NVARCHAR2(20)"}),(0,l.jsx)(n.td,{children:"Destination"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"3"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"TOUR_TYPE"}),(0,l.jsx)(n.td,{children:"NVARCHAR2(30)"}),(0,l.jsx)(n.td,{children:"Tour Type"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"4"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"START_DATE"}),(0,l.jsx)(n.td,{children:"DATE"}),(0,l.jsx)(n.td,{children:"Start Date"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"5"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"END_DATE"}),(0,l.jsx)(n.td,{children:"DATE"}),(0,l.jsx)(n.td,{children:"End Date"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"6"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"PRICE"}),(0,l.jsx)(n.td,{children:"NUMBER"}),(0,l.jsx)(n.td,{children:"Price"}),(0,l.jsx)(n.td,{children:"No\xa0"}),(0,l.jsx)(n.td,{children:"7"})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"step-5-query-mandatory",children:"Step 5: Query Mandatory"}),"\n",(0,l.jsx)(n.p,{children:"This component will not work unless the user specifies a filepath to the CSV file."}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0Open the USoft GUI tool (Windows Designer, Web Designer), find the table class for the CSV component table, and for the column control based on the FILE_NAME column, set Query Mandatory = Yes."}),"\n",(0,l.jsx)(n.h3,{id:"step-6-testing-the-solution",children:"Step 6: Testing the solution"}),"\n",(0,l.jsx)(n.p,{children:"1.\xa0Open the client application (User Application item from USoft Binder)."}),"\n",(0,l.jsx)(n.p,{children:"2.\xa0Choose View, Objects from the menu. Open the object that correspond to the component table."}),"\n",(0,l.jsx)(n.p,{children:"3.\xa0Query the info window using the search condition:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"CSV File = C:\\Temp\\schedtour.csv"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"See that the data from the specified CSV file are retrieved."}),"\n",(0,l.jsx)(n.p,{children:"4.\xa0Open a Sql Command window and execute:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0*\nFROM \xa0 \xa0 \xa0csv\nWHERE \xa0 \xa0 file_name = 'C:\\Temp\\schedtour.csv'\n\n"})}),"\n",(0,l.jsx)(n.p,{children:"See that the SQL Command Report area displays data from the specified CSV file."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);