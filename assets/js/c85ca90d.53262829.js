"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[36936],{28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>a});var n=i(96540);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}},80685:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import","title":"Example: JSON import","description":"Example: default JSON import","source":"@site/docs/Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import.md","sourceDirName":"Repositories/Data_flow_control_with_XML_or_JSON","slug":"/Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_JSON_import"},"sidebar":"sidebar","previous":{"title":"Example: XML import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_XML_import"},"next":{"title":"How import XML or JSON is processed","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/How_import_XML_or_JSON_is_processed"}}');var o=i(74848),r=i(28453);const s={id:"Example_JSON_import"},a="Example: JSON import",l={},h=[{value:"Example: default JSON import",id:"example-default-json-import",level:2},{value:"How this import is handled",id:"how-this-import-is-handled",level:3},{value:"Example: JSON import with JSON meta-instruction properties",id:"example-json-import-with-json-meta-instruction-properties",level:2},{value:"How this import is handled",id:"how-this-import-is-handled-1",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"example-json-import",children:"Example: JSON import"})}),"\n",(0,o.jsx)(t.h2,{id:"example-default-json-import",children:"Example: default JSON import"}),"\n",(0,o.jsx)(t.p,{children:'Here is an example of a default JSON import. This is "default\u201d in the sense that the input is a literal data set, as opposed to data accompanied by JSON meta-instruction properties (next section).'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:'INVOKE \xa0 \xa0JSON.Import WITH\nSELECT \xa0 \xa0\'{\n\t"PERSON": [\n\t\t{\n\t\t\t"ID": 112,\n\t\t\t"FAMILY_NAME": "Smith",\n\t\t\t"FIRST_NAME": "John"\n\n\t\t},\n\t\t{\n\t\t\t"ID": 203,\n\t\t\t"FAMILY_NAME": "Sutcliff",\n\t\t\t"FIRST_NAME": "Bill"\n\t\t}\n\t]\n}\' JSONDocument\n\n'})}),"\n",(0,o.jsx)(t.h3,{id:"how-this-import-is-handled",children:"How this import is handled"}),"\n",(0,o.jsx)(t.p,{children:'A default JSON import is handled using the "UPSERT\u201d principle:'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"If a record with the input primary key values does not exist, the import record is INSERTed."}),"\n",(0,o.jsx)(t.li,{children:"If a record with the input primary key values already exists, then any non-primary-key column values that are different in the import record are UPDATEd."}),"\n",(0,o.jsx)(t.li,{children:"No records are DELETEd."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:'Assuming "ID\u201d is by itself the primary key of table PERSON,'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"If there is no person with ID = 112 or ID = 203, the import records are INSERTed. The import will fail If the PERSON table has columns other than ID, FAMILY_NAME, FIRST_NAME that have Mandatory = Yes and Default Value = (empty), where Default Value can be set at column level or at domain level or both."}),"\n",(0,o.jsx)(t.li,{children:"If persons with ID = 112 and ID = 203 already exist, the records are UPDATEd. The current values for FAMILY_NAME and FIRST_NAME will be replaced by the import values."}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"A successful import can still be rolled back. To consolidate, you need to commit."})}),"\n",(0,o.jsx)(t.h2,{id:"example-json-import-with-json-meta-instruction-properties",children:"Example: JSON import with JSON meta-instruction properties"}),"\n",(0,o.jsxs)(t.p,{children:["Here is an example of a JSON import instruction with ",(0,o.jsx)(t.a,{href:"/udocs/Repositories/USoft_JSON_format/Metainstruction_properties_in_JSON",children:"JSON meta-instruction properties"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"If the import is successful, the FIRST_NAME value of one person is changed, and another person is DELETEd."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:'INVOKE    JSON.Import WITH\nSELECT    \'{ "PERSON":[\n                "ID":112\n             ,  "FAMILY_NAME":"Smith"\n             ,  "FIRST_NAME":"John"\n             ,  "@Update":{\n                   "FIRST_NAME":"Johnny"\n                }\n             ],\n             "PERSON":[\n                "ID":203\n             ,  "FAMILY_NAME":"Sutcliff"\n             ,  "FIRST_NAME":"Bill"\n             ,  "@Delete":{}\n             ]\n          }\' JSONDocument\n,         \'AllColumns\' VerifyOriginalValues\n'})}),"\n",(0,o.jsx)(t.h3,{id:"how-this-import-is-handled-1",children:"How this import is handled"}),"\n",(0,o.jsx)(t.p,{children:"This import is handled by following the <Update> and <Delete> instructions."}),"\n",(0,o.jsx)(t.p,{children:"A blocking error is raised if one or more of the following apply:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"There is no PERSON database record with ID = 112."}),"\n",(0,o.jsx)(t.li,{children:"There is no PERSON database record with ID = 203."}),"\n",(0,o.jsx)(t.li,{children:'There is a PERSON database record with ID = 112, but either its FAMILY_NAME value is other than "Smith" or its FIRST_NAME value is other than "John" (or both).'}),"\n",(0,o.jsx)(t.li,{children:'There is a PERSON database record with ID = 203, but either its FAMILY_NAME value is other than "Sutcliff" or its FIRST_NAME value is other than "Bill" (or both).'}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);