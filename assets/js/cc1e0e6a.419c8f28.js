"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[97501],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var d=s(96540);const r={},t=d.createContext(r);function i(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),d.createElement(t.Provider,{value:n},e.children)}},88016:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>j,frontMatter:()=>i,metadata:()=>d,toc:()=>h});const d=JSON.parse('{"id":"Modeller_and_Rules_Engine/SQL_functions/CAST","title":"CAST","description":"This article has additional information about the CAST SQL function.","source":"@site/docs/Modeller_and_Rules_Engine/SQL_functions/CAST.md","sourceDirName":"Modeller_and_Rules_Engine/SQL_functions","slug":"/Modeller_and_Rules_Engine/SQL_functions/CAST","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_functions/CAST","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"CAST"},"sidebar":"sidebar","previous":{"title":"CASE, DECODE","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_functions/CASE_DECODE"},"next":{"title":"CONCAT","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_functions/CONCAT"}}');var r=s(74848),t=s(28453);const i={id:"CAST"},l="CAST",c={},h=[{value:"<strong>CAST</strong>",id:"cast-1",level:2},{value:"Notes",id:"notes",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cast",children:"CAST"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This article has additional information about the ",(0,r.jsx)(n.strong,{children:"CAST"})," SQL function.\nFor convertibility of this function, go to ",(0,r.jsx)(n.a,{href:"/udocs/Modeller_and_Rules_Engine/SQL_functions/SQL_functions_AC",children:"SQL functions\xa0 A - C"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"cast-1",children:(0,r.jsx)(n.strong,{children:"CAST"})}),"\n",(0,r.jsx)(n.p,{children:"The CAST() SQL function converts a value from one data type to another."}),"\n",(0,r.jsx)(n.p,{children:"The function is convertible to all RDBMS platforms. This function takes 1 argument and a data type specifier. Some data type specifiers have additional length and precision specifiers."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CAST( *expression* AS *DATATYPE* )\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 1"})}),"\n",(0,r.jsx)(n.p,{children:"This example converts a datetime value to a time value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT   CAST(CURRENT_DATE() AS SQL_TIME)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 2"})}),"\n",(0,r.jsx)(n.p,{children:"This example converts a string value to a number value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT   CAST('3.14159265' AS SQL_NUMERIC(7, 5))\n"})}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsx)(n.p,{children:"Even though this is a convertible function, supported on all RDBMS platforms, the translation of the data type specifier to the RDBMS-specific data type differs from one RDBMS to another."}),"\n",(0,r.jsx)(n.p,{children:"The outcome of CAST may also differ."}),"\n",(0,r.jsx)(n.p,{children:"The following table gives an overview of the data type specifiers supported by USoft and the translation to the RDBMS specific data type."}),"\n",(0,r.jsx)(n.p,{children:"This table has additions in parentheses:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)("p",{children:"Integer value denoting storage space"}),(0,r.jsx)("p",{children:"Example: (256)"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["(",(0,r.jsx)(n.em,{children:"p"}),",\xa0[",(0,r.jsx)(n.em,{children:"s"}),"])"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsxs)("p",{children:["Integer value denoting precision (",(0,r.jsx)(n.em,{children:"p"}),"), optionally following by integer value denoting scale (",(0,r.jsx)(n.em,{children:"s"}),")."]}),(0,r.jsx)("p",{children:"Precision is the number of digits in a number. Scale is the number of digits to the right of the decimal point in a number."}),(0,r.jsx)("p",{children:"Examples: (8), (10,2)"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The addition is ",(0,r.jsx)(n.em,{children:"optional"})," where surrounded by brackets []."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"USoft"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Oracle"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"SQLServer"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"ODBC"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"JDBC, Derby"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_BIGINT"}),(0,r.jsx)(n.td,{children:"INTEGER"}),(0,r.jsx)(n.td,{children:"INTEGER"}),(0,r.jsx)(n.td,{children:"SQL_BIGINT"}),(0,r.jsx)(n.td,{children:"BIGINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_BINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["RAW(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsxs)(n.td,{children:["BINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["SQL_BINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsx)(n.td,{children:"CHAR FOR BIT DATA"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_CHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["CHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["CHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsx)(n.td,{children:"SQL_CHAR"}),(0,r.jsxs)(n.td,{children:["CHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_DATE"}),(0,r.jsx)(n.td,{children:"(*1)"}),(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{children:"SQL_DATE"}),(0,r.jsx)(n.td,{children:"DATE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_DECIMAL"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"SQL_DECIMAL (*2)"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_DECIMAL(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]}),(0,r.jsxs)(n.td,{children:["NUMBER(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]}),(0,r.jsxs)(n.td,{children:["DECIMAL(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["DECIMAL(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_DOUBLE"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"SQL_DOUBLE"}),(0,r.jsx)(n.td,{children:"DOUBLE"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{children:"SQL_FLOAT"}),(0,r.jsx)(n.td,{children:"FLOAT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_INTEGER"}),(0,r.jsx)(n.td,{children:"INTEGER"}),(0,r.jsx)(n.td,{children:"INTEGER"}),(0,r.jsx)(n.td,{children:"SQL_INTEGER"}),(0,r.jsx)(n.td,{children:"INTEGER"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_LONGVARBINARY"}),(0,r.jsx)(n.td,{children:"(*3)"}),(0,r.jsx)(n.td,{children:"VARBINARY(MAX)"}),(0,r.jsx)(n.td,{children:"SQL_LONGVARBINARY"}),(0,r.jsx)(n.td,{children:"BLOB"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_LONGVARCHAR"}),(0,r.jsx)(n.td,{children:"(*3)"}),(0,r.jsx)(n.td,{children:"VARCHAR(MAX)"}),(0,r.jsx)(n.td,{children:"SQL_LONGVARCHAR"}),(0,r.jsx)(n.td,{children:"CLOB"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_NCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["NCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["NCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsx)(n.td,{children:"SQL_WCHAR"}),(0,r.jsxs)(n.td,{children:["CHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_NLONGVARCHAR"}),(0,r.jsx)(n.td,{children:"(*3)"}),(0,r.jsx)(n.td,{children:"NVARCHAR(MAX)"}),(0,r.jsx)(n.td,{children:"SQL_WLONGVARCHAR"}),(0,r.jsx)(n.td,{children:"CLOB"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_NUMERIC"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"SQL_NUMERIC"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_NUMERIC(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]}),(0,r.jsxs)(n.td,{children:["NUMBER(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]}),(0,r.jsxs)(n.td,{children:["DECIMAL(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)**"]}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["DECIMAL(\xa0",(0,r.jsx)(n.em,{children:"p"}),"\xa0[,",(0,r.jsx)(n.em,{children:"s"}),"]\xa0)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_NVARCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["NVARCHAR2(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsxs)(n.td,{children:["NVARCHAR(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsx)(n.td,{children:"SQL_WVARCHAR"}),(0,r.jsxs)(n.td,{children:["VARCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]\xa0\xa0 (*4)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_REAL"}),(0,r.jsx)(n.td,{children:"REAL"}),(0,r.jsx)(n.td,{children:"REAL"}),(0,r.jsx)(n.td,{children:"SQL_REAL"}),(0,r.jsx)(n.td,{children:"REAL"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SQL_SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_TIME"}),(0,r.jsx)(n.td,{children:"(*1)"}),(0,r.jsx)(n.td,{children:"TIME"}),(0,r.jsx)(n.td,{children:"SQL_TIME"}),(0,r.jsx)(n.td,{children:"TIME"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_TIMESTAMP"}),(0,r.jsx)(n.td,{children:"TIMESTAMP"}),(0,r.jsx)(n.td,{children:"DATETIME"}),(0,r.jsx)(n.td,{children:"SQL_TIMESTAMP"}),(0,r.jsx)(n.td,{children:"TIMESTAMP"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SQL_TINYINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SQL_TINYINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_VARBINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["RAW(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsxs)(n.td,{children:["VARBINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["SQL_VARBINARY[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsx)(n.td,{children:"VARCHAR FOR BIT DATA"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["SQL_VARCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]"]}),(0,r.jsxs)(n.td,{children:["VARCHAR2(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsxs)(n.td,{children:["VARCHAR(",(0,r.jsx)(n.em,{children:"n"}),")"]}),(0,r.jsx)(n.td,{children:"SQL_VARCHAR"}),(0,r.jsxs)(n.td,{children:["VARCHAR[(",(0,r.jsx)(n.em,{children:"n"}),")]\xa0\xa0\xa0 (*4)"]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["(*1) Oracle does not have means to get a date-part or time-part out of a date using the CAST() function. For these two data types, USoft performs the following translation:\n\xa0\xa0\xa0CAST(\xa0",(0,r.jsx)(n.em,{children:"date"}),"\xa0AS\xa0SQL_DAT\xa0)\xa0\u2192\xa0TRUNC(\xa0",(0,r.jsx)(n.em,{children:"date"}),"\xa0)\n\xa0\xa0\xa0CAST(\xa0",(0,r.jsx)(n.em,{children:"date"}),"\xa0AS\xa0SQL_TIME\xa0)\xa0\u2192\xa0TO_CHAR(\xa0",(0,r.jsx)(n.em,{children:"date"}),",\xa0'HH24:MI",":SS","'\xa0)"]}),"\n",(0,r.jsx)(n.p,{children:"(*2) The ODBC CAST function does not allow for specification of precision or scale."}),"\n",(0,r.jsx)(n.p,{children:"(*3) Oracle does not allow casting to a (N)CLOB or BLOB. For these three data types, USoft translates the CAST() into TO_(N)CLOB() / TO_BLOB()"}),"\n",(0,r.jsx)(n.p,{children:"(*4) Derby does not allow casting numbers to VARCHAR directly. An additional CAST as CHAR() is automatically performed first."})]})}function j(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);