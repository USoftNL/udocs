"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[51882],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},35211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Extensions/RulesEngine_internal_component/RulesEngineStartCatchingErrors","title":"RulesEngine.StartCatchingErrors","description":"This article is about the StartCatchingErrors method of the RulesEngine internal component.","source":"@site/docs/Extensions/RulesEngine_internal_component/RulesEngineStartCatchingErrors.md","sourceDirName":"Extensions/RulesEngine_internal_component","slug":"/Extensions/RulesEngine_internal_component/RulesEngineStartCatchingErrors","permalink":"/udocs/Extensions/RulesEngine_internal_component/RulesEngineStartCatchingErrors","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"RulesEngineStartCatchingErrors"},"sidebar":"sidebar","previous":{"title":"RulesEngine.SetUserGroup","permalink":"/udocs/Extensions/RulesEngine_internal_component/RulesEngineSetUserGroup"},"next":{"title":"RulesEngine.StopCatchingErrors","permalink":"/udocs/Extensions/RulesEngine_internal_component/RulesEngineStopCatchingErrors"}}');var s=t(74848),i=t(28453);const o={id:"RulesEngineStartCatchingErrors"},a="RulesEngine.StartCatchingErrors",l={},c=[{value:"<strong>RulesEngine.StartCatchingErrors</strong>",id:"rulesenginestartcatchingerrors-1",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rulesenginestartcatchingerrors",children:"RulesEngine.StartCatchingErrors"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"StartCatchingErrors"})," method of the ",(0,s.jsx)(n.a,{href:"/Extensions/RulesEngine_internal_component",children:"RulesEngine internal component"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"rulesenginestartcatchingerrors-1",children:(0,s.jsx)(n.strong,{children:"RulesEngine.StartCatchingErrors"})}),"\n",(0,s.jsx)(n.p,{children:"Instructs the Rules Engine to begin catching error messages and continue until the StopCatchingErrors method is called. This allows you to check if any errors, or even if a specific error has occurred. Reported error messages can be stored in the database or saved to a file if required. The catching of error messages in this manner does not influence program flow in any way."}),"\n",(0,s.jsx)(n.p,{children:"You can nest multiple calls to this method. This makes it possible to catch error messages without needing to know if the caller is already catching error messages."}),"\n",(0,s.jsx)(n.p,{children:"Returns a number equal to or higher than 1. This number indicates the nesting depth of the error catching. The first call to the method returns the number 1. A second call, without the first session having been stopped, returns the number 2, and so on."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT RulesEngine.StartCatchingErrors(\n\xa0\xa0\xa0\xa0*handling-mode*\n)\n\n*handling-mode*  :=  { Yes | No }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The optional ",(0,s.jsx)(n.em,{children:"handling-mode"})," determines whether any errors are still handled by the original handlers (thereby causing them to be displayed on the screen, written to a log file, etc. as per usual) or not. If ",(0,s.jsx)(n.em,{children:"handling-mode"})," is not passed or it is passed with the 'Yes' value, errors will no longer be handled by the original handlers. If ",(0,s.jsx)(n.em,{children:"handling-mode"})," is passed with the 'No' value, errors will continue to be handled by the original handlers."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);