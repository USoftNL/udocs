"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[17033],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>d});var i=r(96540);const n={},o=i.createContext(n);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:t},e.children)}},35889:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Repositories/Data_flow_control_with_XML_or_JSON/How_import_XML_or_JSON_is_processed","title":"How import XML or JSON is processed","description":"\\"UPSERT\\" default handling","source":"@site/docs/Repositories/Data_flow_control_with_XML_or_JSON/How_import_XML_or_JSON_is_processed.md","sourceDirName":"Repositories/Data_flow_control_with_XML_or_JSON","slug":"/Repositories/Data_flow_control_with_XML_or_JSON/How_import_XML_or_JSON_is_processed","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/How_import_XML_or_JSON_is_processed","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"How_import_XML_or_JSON_is_processed"},"sidebar":"sidebar","previous":{"title":"Example: JSON import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import"},"next":{"title":"Obsolete children on import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Obsolete_children_on_import"}}');var n=r(74848),o=r(28453);const s={id:"How_import_XML_or_JSON_is_processed"},d="How import XML or JSON is processed",a={},c=[{value:"&quot;UPSERT&quot; default handling",id:"upsert-default-handling",level:3},{value:"Rules Engine is active",id:"rules-engine-is-active",level:3},{value:"Import is not automatically committed",id:"import-is-not-automatically-committed",level:3},{value:"Relationships: Referential checks",id:"relationships-referential-checks",level:3},{value:"Relationships: Obsolete children",id:"relationships-obsolete-children",level:3},{value:"Instruction-tagged data and mixed format",id:"instruction-tagged-data-and-mixed-format",level:3}];function l(e){const t={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"how-import-xml-or-json-is-processed",children:"How import XML or JSON is processed"})}),"\n",(0,n.jsx)(t.h3,{id:"upsert-default-handling",children:'"UPSERT" default handling'}),"\n",(0,n.jsx)(t.p,{children:'By default, XML or JSON data are imported following the "UPSERT" principle, a mix of INSERT and UPDATE:'}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"What?"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Definition"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Default handling"})})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"New record"}),(0,n.jsx)(t.td,{children:"The record is in the XML or JSON document.A record with the same primary key does not exist in the database."}),(0,n.jsx)(t.td,{children:"The record is INSERTed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Changed record"}),(0,n.jsx)(t.td,{children:"The record is in the XML or JSON document.A record with the same primary key also exists in the database."}),(0,n.jsx)(t.td,{children:"The record is UPDATEd."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Other record"}),(0,n.jsx)(t.td,{children:"The record is not in the XML or JSON document.It only exists in the database."}),(0,n.jsx)(t.td,{children:"The record is not affected."})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"Default handling is overridden if the XML record has a DML instruction tag, or the JSON record a meta-instruction property:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"What?"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Definition"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Handling"})})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"instruction-tagged record"}),(0,n.jsxs)(t.td,{children:[(0,n.jsxs)("p",{children:["XML record containing a DML instruction tag, ",(0,n.jsx)(t.em,{children:"or:"})]}),(0,n.jsx)("p",{children:"JSON record containing a meta-instruction property."})]}),(0,n.jsx)(t.td,{children:"The instruction is executed."})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Example"})}),"\n",(0,n.jsx)(t.p,{children:"Given this sample database:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"EMPLOYEE: \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ID = 101, \xa0NAME = CELINE\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ID = 102, \xa0NAME = ANJA\nEMPLOYEE_LANGUAGE_SKILL: \xa0 EMP_ID = 101, LANG = NL\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 EMP_ID = 101, LANG = SP\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 EMP_ID = 102, LANG = NL\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 EMP_ID = 102, LANG = SP\n\n"})}),"\n",(0,n.jsx)(t.p,{children:"and this import document:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<?usoft-xml version="1.0" action="multi-tables-import" use-io-formats="no" verify-original-values="no" return-corrected-records ="yes"?>\n<MultiImport>\n \xa0<Employees>\n \xa0 \xa0<EMPLOYEE ID="101" NAME="SELINA"/>\n \xa0 \xa0<EMPLOYEE ID="103" NAME="LUCA"/>\n \xa0</Employees>\n \xa0<Employee_Language_Skills>\n \xa0 \xa0<EMPLOYEE_LANGUAGE_SKILL EMP_ID="101" LANG="NL" />\n \xa0 \xa0<EMPLOYEE_LANGUAGE_SKILL EMP_ID="103" LANG="NL" />\n \xa0 \xa0<EMPLOYEE_LANGUAGE_SKILL EMP_ID="103" LANG="SP" />\n \xa0</Employee_Language_Skills>\n</MultiImport>\n\n'})}),"\n",(0,n.jsx)(t.p,{children:"The result of the import in the database will be:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"EMPLOYEE: \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ID = 101, \xa0NAME = SELINA \xa0 \xa0<= The NAME is updated\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ID = 102, \xa0NAME = ANJA\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ID = 103, \xa0NAME = LUCA \xa0 \xa0 \xa0<= A new record is inserted\nEMPLOYEE_LANGUAGE_SKILL: \xa0EMP_ID = 101, LANG = NL \xa0 \xa0 <= The record is not affected\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0EMP_ID = 101, LANG = SP \xa0 \xa0 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0EMP_ID = 102, LANG = NL\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0EMP_ID = 102, LANG = SP\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0EMP_ID = 103, LANG = NL \xa0 \xa0 <= A new record is inserted\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0EMP_ID = 103, LANG = SP \xa0 \xa0 <= A new record is inserted\n\n"})}),"\n",(0,n.jsx)(t.h3,{id:"rules-engine-is-active",children:"Rules Engine is active"}),"\n",(0,n.jsx)(t.p,{children:"When an import document is processed by a call to XML.Import or JSON.Import, the Rules Engine is active. It performs all the actions, corrections and checks defined for it."}),"\n",(0,n.jsx)(t.h3,{id:"import-is-not-automatically-committed",children:"Import is not automatically committed"}),"\n",(0,n.jsx)(t.p,{children:"When you call XML.Import or JSON.Import, the import operation is not automatically committed. It is the programmer or user who decides when to commit. It is therefore possible to:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Execute an XML or JSON import, consider its result, and then commit the operation or roll it back as a separate action."}),"\n",(0,n.jsx)(t.li,{children:"Execute an XML or JSON import in the middle of a transaction."}),"\n",(0,n.jsx)(t.li,{children:"Have a transaction that consists of more than one XML or JSON import."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"relationships-referential-checks",children:"Relationships: Referential checks"}),"\n",(0,n.jsx)(t.p,{children:"When you use XML.Import to import a multi-table XML document, referential relationship checks are deferred until commit. This allows you to import parent-child record constellations without worrying about the order in which the records appear in the XML or JSON."}),"\n",(0,n.jsx)(t.p,{children:"This applies to XML.Import as of USoft 9.1. JSON.Import was introduced in USoft 10.1."}),"\n",(0,n.jsx)(t.h3,{id:"relationships-obsolete-children",children:"Relationships: Obsolete children"}),"\n",(0,n.jsx)(t.p,{children:"Obsolete children are child records that no longer exist in the import XML or JSON. You can instruct XML.Import and JSON.Import to drop obsolete children by setting Type Of Relationship = Composition for the relationship."}),"\n",(0,n.jsxs)(t.p,{children:['If you are importing an XML document with DML instruction tags, then you must block the "drop obsolete children" behaviour by specifying relationship-behaviour="as-reference" in the ',(0,n.jsx)(t.strong,{children:"usoft-xml"})," processing instruction. Otherwise, an error is raised. With DML instruction tags, you can use the ",(0,n.jsx)(t.code,{children:"<Delete/>"})," tag to manually determine exactly which records are to be dropped."]}),"\n",(0,n.jsxs)(t.p,{children:['If you are importing an JSON document with meta-instruction properties, then you must block the "drop obsolete children" behaviour by specifying relationship-behaviour="as-reference" in the ',(0,n.jsx)(t.code,{children:"@usoft-json"})," meta-instruction property. Otherwise, an error is raised. With meta-instruction properties, you can use the ",(0,n.jsx)(t.code,{children:"@Delete"})," property to manually determine exactly which records are to be dropped."]}),"\n",(0,n.jsx)(t.p,{children:'USoft Delivery Manager performs standard comparisons of exported XML. In the outcome of each data comparison (as produced in a file with name "... .diff. ..."), it automatically adds relationship-behaviour="as-reference" to the usoft-xml processing instruction. This applies to metadata and application data alike. In summary, importing a Delivery Manager "... .diff. ..." file never causes obsolete children to be dropped automatically.'}),"\n",(0,n.jsx)(t.h3,{id:"instruction-tagged-data-and-mixed-format",children:"Instruction-tagged data and mixed format"}),"\n",(0,n.jsx)(t.p,{children:'In your import document you are allowed to use (XML:) DML instruction tags or (JSON:) meta-instruction properties for some, but not all, records to be imported. This is referred to as "mixed-format" documents.'}),"\n",(0,n.jsx)(t.p,{children:"Mixed-format XML or JSON is imported on a record-by-record basis:"}),"\n",(0,n.jsx)(t.p,{children:"In XML:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If there is a DML instruction tag, this tag dictates what XML.Import must do with the record."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'If there is no DML instruction tag, the default "UPSERT" behavior applies.'}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"In JSON:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If there is a meta-instruction property, this property dictates what JSON.Import must do with the record."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:'If there is no meta-instruction property, the default "UPSERT" behavior applies.'}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);