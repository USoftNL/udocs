"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[13259],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},56890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcZipUpdate","title":"pc:ZipUpdate","description":"This article is about the pc:ZipUpdate Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcZipUpdate.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcZipUpdate","permalink":"/udocs/Repositories/Blend_directives/pcZipUpdate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcZipUpdate"},"sidebar":"sidebar","previous":{"title":"pc:ZipReplace","permalink":"/udocs/Repositories/Blend_directives/pcZipReplace"},"next":{"title":"Blend attributes","permalink":"/udocs/Repositories/Blend_attributes"}}');var s=n(74848),r=n(28453);const o={id:"pcZipUpdate"},a="pc",p={},c=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsxs)(t.h1,{id:"pc",children:["pc",":ZipUpdate"]})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This article is about the ",(0,s.jsxs)(t.strong,{children:["pc",":ZipUpdate"]}),(0,s.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"pc-1",children:(0,s.jsxs)(t.strong,{children:["pc",":ZipUpdate"]})}),"\n",(0,s.jsxs)(t.p,{children:["Compresses a set of files or inline content as entries in a ZIP file. This happens on an INSERT-OR-UPDATE basis. If the file already exists, new entries are added to it, entries with the same names are overwritten, and entries not mentioned in the <pc",":ZipFileCreate","> directive are left alone."]}),"\n",(0,s.jsx)(t.p,{children:"There is no result value."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Syntax"}),"\n\xa0"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'<pc:ZipUpdate filepath="*file-path*" select="*xpath*">\n\n*input*\n\n</pc:ZipUpdate>\n\n*input*  ::=  [\n  { <File              entryname="*entryname*"  path="*file-path*" />          |\n    <Content           entryname="*entryname*"> *content* </Content>           |\n    <ContentFromBase64 entryname="*entryname*"> *content* </ContentFromBase64>   \n  }   ... ]\n\n*entryname*  ::=  *relative-file-path*\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The required ",(0,s.jsx)(t.strong,{children:"filepath"}),' is a path leading to the ZIP file you want to update. This is conventionally a file that has the ".zip" file extension. The optional ',(0,s.jsx)(t.strong,{children:"select"})," attribute can be used to restrict the operation to a specific part of input."]}),"\n",(0,s.jsxs)(t.p,{children:["The required ",(0,s.jsx)(t.strong,{children:"input"})," can either be specified as a list of external files to be zipped, or as inline content to be compressed:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"To supply a list of one or more files, use the <File> element name for each input file. In the path attribute, specify where the file is found on the file system."}),"\n",(0,s.jsx)(t.li,{children:"To supply inline content, supply it as content of a <Content> element or, if the content is binary and 64-bit encoded, as content of a <ContentFromBase64> element."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In either case, for ",(0,s.jsx)(t.strong,{children:"entryname"}),", supply a relative path that determines the place of the zipped file in the internal folder structure of the ZIP file."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Example"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ZipUpdate filepath="{$myjarfile}" >\n    <Content entryname="{$myentry}" content="{$NewUServiceClasses}" />\n</pc:ZipUpdate>\n'})}),"\n",(0,s.jsx)(t.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);