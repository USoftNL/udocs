"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[54568],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},83886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Extensions/RDMI_Components/How_many_times_a_called_component_is_executed","title":"How many times a called component is executed?","description":"The INVOKE clause is a SQL statement. It is executed under exactly the same conditions as a SQL statement without INVOKE.","source":"@site/docs/Extensions/RDMI_Components/How_many_times_a_called_component_is_executed.md","sourceDirName":"Extensions/RDMI_Components","slug":"/Extensions/RDMI_Components/How_many_times_a_called_component_is_executed","permalink":"/udocs/Extensions/RDMI_Components/How_many_times_a_called_component_is_executed","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"How_many_times_a_called_component_is_executed"},"sidebar":"sidebar","previous":{"title":"Constructor SQL","permalink":"/udocs/Extensions/RDMI_Components/Constructor_SQL"},"next":{"title":"Components: Standard protocol","permalink":"/udocs/Extensions/RDMI_Components/Components_Standard_protocol"}}');var i=t(74848),s=t(28453);const a={id:"How_many_times_a_called_component_is_executed"},r="How many times a called component is executed?",c={},l=[{value:"Example 1: INVOKE in a restrictive constraint",id:"example-1-invoke-in-a-restrictive-constraint",level:2},{value:"Example 2: INVOKE for doing record-oriented inserts",id:"example-2-invoke-for-doing-record-oriented-inserts",level:2},{value:"Example 3: INVOKE for writing to a log table",id:"example-3-invoke-for-writing-to-a-log-table",level:2},{value:"Example 4: INVOKE in domain constraint",id:"example-4-invoke-in-domain-constraint",level:2},{value:"",id:"",level:2},{value:"",id:"-1",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-many-times-a-called-component-is-executed",children:"How many times a called component is executed?"})}),"\n",(0,i.jsx)(n.p,{children:"The INVOKE clause is a SQL statement. It is executed under exactly the same conditions as a SQL statement without INVOKE."}),"\n",(0,i.jsx)(n.p,{children:"How many times a component is invoked depends on a combination of things, especially on the SQL syntax construction, the context in which it is executed, and the protocol used. The application developer needs to be aware that not all combinations of input and output are appropriate in all contexts."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the INVOKE clause is used independently, the component is invoked once."}),"\n",(0,i.jsx)(n.li,{children:"In the INVOKE ... WITH SELECT ... construction, INVOKE is executed as many times as there are records in the result table of the SELECT statement."}),"\n",(0,i.jsxs)(n.li,{children:["In the INVOKE ... WITH INVOKE ",(0,i.jsx)(n.em,{children:"component.method()"})," construct, the first INVOKE is invoked once."]}),"\n",(0,i.jsxs)(n.li,{children:["In the INVOKE ... WITH INVOKE ",(0,i.jsx)(n.em,{children:"component"}),".",(0,i.jsx)(n.em,{children:"query-protocol()"})," construction, the first INVOKE is executed once for every record returned by the query protocol."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-1-invoke-in-a-restrictive-constraint",children:"Example 1: INVOKE in a restrictive constraint"}),"\n",(0,i.jsx)(n.p,{children:"Suppose, the SQL statement of a constraint has Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0component.method WITH\nSELECT \xa0 \xa0output-list\nFROM \xa0 \xa0 \xa0table\nWHERE \xa0 \xa0 condition\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is a single-record constraint. The constraint is evaluated as a result of the user manipulating a specific record. The component is invoked only for this record, at the time the record is stored. The external component is therefore called at the time the record is stored (if at all)."}),"\n",(0,i.jsx)(n.p,{children:"First the WHERE clause is evaluated:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If there is no record that satisfies ",(0,i.jsx)(n.em,{children:"condition"}),", there are no result records to be fed to the component. The component is not invoked."]}),"\n",(0,i.jsxs)(n.li,{children:["If exactly one record satisfies ",(0,i.jsx)(n.em,{children:"condition"}),", there is 1 SELECTed record to be fed to the component so the component is invoked once."]}),"\n",(0,i.jsxs)(n.li,{children:["If multiple records satisfy ",(0,i.jsx)(n.em,{children:"condition,"})," the component is invoked as many times as there are records in the query result. Each time, the value(s) in the output list of the individual record are passed to the component."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If the component ends up being called one or more times:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For each call, if the component method returns no value, the constraint does not raise a violation."}),"\n",(0,i.jsx)(n.li,{children:'If the component method returns a value, the invocation must be associated with the query protocol, and the component will either return 1, 0, or -1. The Rules Engine interprets this as "row exists", "row does not exist" or "error". Notice that this is very much the same sort of test as the WHERE clause. In this example, two filters must be passed and the statement can be thought of as:'}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0 \xa0 \xa0output-list\nFROM \xa0 \xa0 \xa0 \xa0 \xa0table\nWHERE \xa0 \xa0 \xa0 \xa0 condition-X-evaluated-by-RDMBS\nAND \xa0 \xa0 \xa0 \xa0 \xa0 condition-Y-evaluated-by-external-component\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-2-invoke-for-doing-record-oriented-inserts",children:"Example 2: INVOKE for doing record-oriented inserts"}),"\n",(0,i.jsxs)(n.p,{children:["The following statement can be issued from SQL Command to insert into ",(0,i.jsx)(n.em,{children:"column"})," a constant provided or calculated by an external component:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"UPDATE \xa0 \xa0table\nSET \xa0 \xa0 \xa0 column =\n(\n \xa0 \xa0 INVOKE component.method\n)\nWHERE \xa0 \xa0condition\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The component is invoked once for each record that satisfies ",(0,i.jsx)(n.em,{children:"condition"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example-3-invoke-for-writing-to-a-log-table",children:"Example 3: INVOKE for writing to a log table"}),"\n",(0,i.jsx)(n.p,{children:"In an off-line batch job, a log table is filled with data on the basis of records in an on-line entry table that have received the 'CHANGED' status as a result of on-line manipulation. The component performs a calculation or other operation involving non-SQL data sources. The component could well use the query protocol and return multiple rows for each input row."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO \xa0 log-table\n(\n  column1\n, column2 \n)\nINVOKE \xa0 \xa0 \xa0 \xa0component.method WITH\nSELECT \xa0 \xa0 \xa0 \xa0column1, column2\nFROM \xa0 \xa0 \xa0 \xa0 \xa0online-entry-table\nWHERE \xa0 \xa0 \xa0 \xa0 status = 'CHANGED'\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"In this example the component is invoked as many times as there are records in the on-line entry table that have the 'CHANGED' flag. The number of output records depends on the external component definition. The moment of execution depends on the execution of the batch job."}),"\n",(0,i.jsx)(n.h2,{id:"example-4-invoke-in-domain-constraint",children:"Example 4: INVOKE in domain constraint"}),"\n",(0,i.jsx)(n.p,{children:"This example shows INVOKE in a domain constraint. This is executed when the domain constraint is evaluated, that is to say, at field-validation time."}),"\n",(0,i.jsx)(n.p,{children:"Condition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"'OK' = MyComponent.CheckBankaccount( DOMAIN )\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Correction:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Calculus.CheckSum( DOMAIN)\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Correction:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"( SELECT Calculus.CheckSum( t.value ) FROM check_table t WHERE t.id = DOMAIN )\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"",children:"\xa0"}),"\n",(0,i.jsx)(n.h2,{id:"-1",children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);