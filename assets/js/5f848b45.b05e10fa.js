"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[36161],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},93218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Chained_corrections","title":"Chained corrections","description":"Chained corrections are SQL manipulations that you want to postpone to the next transaction (chained transaction) but that are a direct result of manipulations that have occurred in the current transaction. This applies if the postponed manipulations consist of passing data on to third-party software, perhaps a mail server for outgoing e-mails, and you want to make sure this happens only if your entire current transaction including all transaction checks completes successfully.","source":"@site/docs/Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Chained_corrections.md","sourceDirName":"Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine","slug":"/Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Chained_corrections","permalink":"/udocs/Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Chained_corrections","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Chained_corrections"},"sidebar":"sidebar","previous":{"title":"Constraint evaluation order","permalink":"/udocs/Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Constraint_evaluation_order"},"next":{"title":"Transaction checks","permalink":"/udocs/Modeller_and_Rules_Engine/Constraints_advanced_and_the_Rules_Engine/Transaction_checks"}}');var a=t(74848),r=t(28453);const i={id:"Chained_corrections"},o="Chained corrections",c={},d=[{value:"Effect of chained corrections",id:"effect-of-chained-corrections",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"chained-corrections",children:"Chained corrections"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Chained corrections"})," are SQL manipulations that you want to postpone to the next transaction ",(0,a.jsx)(n.em,{children:"(chained transaction)"})," but that are a direct result of manipulations that have occurred in the current transaction. This applies if the postponed manipulations consist of passing data on to third-party software, perhaps a mail server for outgoing e-mails, and you want to make sure this happens only if your entire current transaction including all transaction checks completes successfully."]}),"\n",(0,a.jsx)(n.p,{children:"Chained corrections are performed at commit time, after the current transaction has been committed. This is also expressed by saying that chained corrections occur in the post-commit phase of a commit event."}),"\n",(0,a.jsx)(n.p,{children:"A productive constraint is evaluated as a chained correction if it is deferred with the setting Deferred = Post Commit."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.p,{children:"You have the following constraint that puts a request XML message in some technical table accessed by third-party software in a way you do not control. Inserting XML into this table results in messages being sent by that software:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"INSERT INTO output_queue_schedtour ( xml_message )\nINVOKE \xa0 \xa0 xml.export WITH\nSELECT \xa0 \xa0 schedtour_id, destination, tour_type, start_date, return_date, max_part\nFROM \xa0 \xa0 \xa0 schedtour\nWHERE \xa0 \xa0 \xa0guide_request = 'Y'\n"})}),"\n",(0,a.jsx)(n.p,{children:"You want to control that:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Outward messages are not sent unless all the constraints in the application are processed successfully, and"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"If for some reason the creating/sending of outward messages fails, all the processing before will still be saved."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Create a second constraint that creates the precondition"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"guide_request = 'Y'\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"and set this second constraint to Deferred = Post Commit:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"UPDATE \xa0 \xa0schedtour\nSET \xa0 \xa0 \xa0 guide_request = 'Y'\nWHERE \xa0 \xa0 guide_request = 'N'\nAND \xa0 \xa0 \xa0 guide is null\nAND \xa0 \xa0 \xa0 ( 0.2 * max_part ) < \n(\n \xa0 \xa0 SELECT \xa0 \xa0count(*)\n \xa0 \xa0 FROM \xa0 \xa0 \xa0participant \n \xa0 \xa0 , \xa0 \xa0 \xa0 \xa0 reservation\n \xa0 \xa0 RELATE \xa0 \xa0schedtour \"FOR WHICH ARE MADE\" reservation\n \xa0 \xa0 , \xa0 \xa0 \xa0 \xa0 reservation \"IS MADE FOR\" participant\n)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You typically want this constraint to be the ",(0,a.jsx)(n.em,{children:"only"})," way that the precondition can be reached: the column should have Input Allowed = No to prevent user interaction, and other constraints than the 2 shown above should leave the ",(0,a.jsx)(n.strong,{children:"guide_request"})," flag alone."]}),"\n",(0,a.jsx)(n.h2,{id:"effect-of-chained-corrections",children:"Effect of chained corrections"}),"\n",(0,a.jsx)(n.p,{children:"If a chained correction is found to have an effect, that is, if your current transaction commits successfully and applying the SQL manipulation to the data after commit affects 1 or more rows, then the SQL manipulation is executed as if it were the first user action in the new transaction."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);