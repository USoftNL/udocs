"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[80625],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(96540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},37281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Repositories/USoft_JSON_format/USoft_JSON_format","title":"USoft JSON format","description":"The USoft JSON format is a standardised way to represent USoft data in JSON. In this format, a top-level JSON object is allowed to contain data from a single table or from multiple tables.","source":"@site/docs/Repositories/USoft_JSON_format/USoft_JSON_format.md","sourceDirName":"Repositories/USoft_JSON_format","slug":"/Repositories/USoft_JSON_format/","permalink":"/udocs/Repositories/USoft_JSON_format/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USoft_JSON_format"},"sidebar":"sidebar","previous":{"title":"USoft JSON format","permalink":"/udocs/Repositories/USoft_JSON_format"},"next":{"title":"JSON representation of date values","permalink":"/udocs/Repositories/USoft_JSON_format/JSON_representation_of_date_values"}}');var r=t(74848),s=t(28453);const a={id:"USoft_JSON_format"},i="USoft JSON format",l={},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usoft-json-format",children:"USoft JSON format"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"USoft JSON format"})," is a standardised way to represent USoft data in JSON. In this format, a top-level JSON object is allowed to contain data from a single table or from multiple tables."]}),"\n",(0,r.jsx)(n.p,{children:"This format is produced by calls to JSON.Export for data from a single table, and by calls to JSON.MultiExportTables for data from multiple tables.\xa0"}),"\n",(0,r.jsx)(n.p,{children:"Data in this format is re-importable by calling JSON.Import."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n*   json-table-section*,  ...\n}\n\n*json-table-section*   ::=  "*table-name*" : [ *row-section*, ... ]\n\n*row-section*     ::=  { *column-section*, ... }\n\n*column-section*  ::=  { "*column-name*" : *column-value* |\n*                       meta-instruction-property   * }\n\n*column-value*  ::=  { "*string-value*" | *number-value* | null | "" }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The top-level JSON object contains 1 or multiple comma-separated ",(0,r.jsx)(n.em,{children:"json-table-sections."})]}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.em,{children:"json-table-section"})," is a property name-value pair. The name refers to a table in the database. The value is an array of *row-sections.\xa0* Each ",(0,r.jsx)(n.em,{children:"row-section"})," represents a record in the table."]}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.em,{children:"row-section"})," is a collection of ",(0,r.jsx)(n.em,{children:"column-sections."})]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"column-section"})," is a property name-value pair. The name corresponds to a column of the table. The value corresponds to the value stored in that column in the record represented by the ",(0,r.jsx)(n.em,{children:"row-section."})," A ",(0,r.jsx)(n.em,{children:"column-section"})," can also be a ",(0,r.jsx)(n.em,{children:"meta-instruction-property"}),". See ",(0,r.jsx)(n.a,{href:"/udocs/Repositories/USoft_JSON_format/Metainstruction_properties_in_JSON",children:"Meta-instruction properties in JSON"}),(0,r.jsx)(n.em,{children:"."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Table-name"})," and ",(0,r.jsx)(n.em,{children:"column-name"})," are double-quoted as shown in the syntax block."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Column-value"})," is double-quoted in the case of a string value or date value, unquoted in the case of a number value, or (in the case of a NULL value) either the JSON ",(0,r.jsx)(n.strong,{children:"null"})," keyword or a double-quoted empty value."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Because USoft converts incoming empty strings to the NULL value for all datatypes, you can import a double-quoted empty value. This has the same effect as importing the ",(0,r.jsx)(n.strong,{children:"null"})," value."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example"})}),"\n",(0,r.jsx)(n.p,{children:"This example contains 1 record from parent table TOUR_PROGRAMME and 2 child records for this parent in child table TOUR."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-language-json",children:'{\n  "TOUR_PROGRAMME": [\n    {\n      "DESTINATION":"AUSTRALIA",\n      "TOUR_TYPE":"ISLAND SUNTANNER",\n      "NUM_DAYS":12,\n      "DESCRIPTION":"Exclusive sailing adventure to the Great Barrier Reef."\n    }\n  ],\n  "TOUR": [\n    {\n      "TOUR_ID":145,\n      "DESTINATION":"AUSTRALIA",\n      "TOUR_TYPE":"ISLAND SUNTANNER",\n      "START_DATE":"2022-07-20T00:00:00",\n      "RETURN_DATE":"2022-08-01T00:00:00",\n      "PRICE":2450,\n      "MAX_PART":25,\n      "GUIDE":7\n    },\t  \n    {\n      "TOUR_ID":148,\n      "DESTINATION":"AUSTRALIA",\n      "TOUR_TYPE":"ISLAND SUNTANNER",\n      "START_DATE":"2020-10-26T00:00:00",\n      "RETURN_DATE":"2020-11-06T00:00:00",\n      "PRICE":2500,\n      "MAX_PART":25,\n      "GUIDE":null\n\t}\n  ]\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);