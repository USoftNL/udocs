"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[18833],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>c});var i=n(96540);const t={},r=i.createContext(t);function l(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:s},e.children)}},55663:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcassignnodesetfromjson","title":"pc:assign-nodeset-from-json","description":"This article is about the pc:assign-nodeset-from-json Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcassignnodesetfromjson.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcassignnodesetfromjson","permalink":"/udocs/Repositories/Blend_directives/pcassignnodesetfromjson","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcassignnodesetfromjson"},"sidebar":"sidebar","previous":{"title":"pc:assign-nodeset-default","permalink":"/udocs/Repositories/Blend_directives/pcassignnodesetdefault"},"next":{"title":"pc:assign-number","permalink":"/udocs/Repositories/Blend_directives/pcassignnumber"}}');var t=n(74848),r=n(28453);const l={id:"pcassignnodesetfromjson"},c="pc",o={},a=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsxs)(s.h1,{id:"pc",children:["pc",":assign-nodeset-from-json"]})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["This article is about the ",(0,t.jsxs)(s.strong,{children:["pc",":assign-nodeset-from-json"]}),(0,t.jsx)(s.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,t.jsx)(s.h2,{id:"pc-1",children:(0,t.jsxs)(s.strong,{children:["pc",":assign-nodeset-from-json"]})}),"\n",(0,t.jsx)(s.p,{children:"Converts a JSON fragment to an equivalent XML fragment for the purpose of processing in a USoft Blend context."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Syntax"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:'<pc:assign-nodeset-from-json *variable*="{ *filepath* | *xpath* }">\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The required ",(0,t.jsx)(s.em,{children:"variable"})," is a variable name by which you can reference the converted JSON later in the script, using:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"$*variable*\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["To read the JSON input from file, specify ",(0,t.jsx)(s.em,{children:"filepath."})," ",(0,t.jsx)(s.strong,{children:"See Example 1."}),"*\xa0*"]}),"\n",(0,t.jsxs)(s.li,{children:["To pass inline JSON input in the script itself, specify an ",(0,t.jsx)(s.em,{children:"xpath"})," expression. ",(0,t.jsx)(s.strong,{children:"See Example 2."})]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Example 1"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n  <pc:assign-nodeset-from-json\n    xmlresult = "{path:Combine(\'c:\\usoft\\blend\\JSON\', \'app.config.json\')}" />\n  <pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2a"})]}),"\n",(0,t.jsxs)(s.p,{children:["This example passes JSON as ",(0,t.jsx)(s.em,{children:"embedded text"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-nodeset-from-json xmlresult = "{.}">\n\t  {"myname":"Lakshmi"}\n\t</pc:assign-nodeset-from-json>\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2b"})]}),"\n",(0,t.jsxs)(s.p,{children:["This example passes JSON as the content of ",(0,t.jsx)(s.em,{children:"an**element"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-nodeset-from-json xmlresult = "{myjson}">\n\t  <myjson>{"myname":"Lakshmi"}</myjson>\n\t</pc:assign-nodeset-from-json>\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2c"})]}),"\n",(0,t.jsxs)(s.p,{children:["This example passes JSON as the value of ",(0,t.jsx)(s.em,{children:"an**attribute"}),". The attribute value is specified by single quotes because the JSON content already uses double quotes:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-nodeset-from-json xmlresult = "{myjson/@somejson}">\n\t  <myjson somejson=\'{"myname":"Lakshmi"}\'/>\n\t</pc:assign-nodeset-from-json>\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2d"})]}),"\n",(0,t.jsxs)(s.p,{children:["This example passes JSON as an ",(0,t.jsx)(s.em,{children:"inline expression"}),". The double brackets are an escape strategy. They are needed because single brackets would be interpreted as an XSLT attribute value template:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-nodeset-from-json xmlresult = \'{{"myname":"Lakshmi"}}\'/>\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2e"})]}),"\n",(0,t.jsxs)(s.p,{children:["This example passes JSON inline in a ",(0,t.jsx)(s.em,{children:"string variable:"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-string jsonstring = "{.}">{"myname":"Lakshmi"}</pc:assign-string>\n\t<pc:assign-nodeset-from-json xmlresult = "{$jsonstring}" />\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsxs)(s.p,{children:["\xa0",(0,t.jsx)(s.em,{children:"Example 2f"})]}),"\n",(0,t.jsx)(s.p,{children:"This example explicitly calls the underlying converter function to a JSON string and catches the result in a nodeset variable:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command">\n\t<pc:assign-string jsonstring = "{.}">{"myname":"Lakshmi"}</pc:assign-string>\n\t<pc:assign-nodeset xmlresult = "{xslutil:json2xml($jsonstring)}" />\n\t<pc:copy-of select="$xmlresult"/>\n</example>\n'})}),"\n",(0,t.jsx)(s.p,{children:"\xa0"})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);