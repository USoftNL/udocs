"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[61685],{28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>d});var r=s(96540);const n={},o=r.createContext(n);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},94803:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Web_and_app_UIs/UDB_ColsMeta/ColsMetasortOrder","title":"ColsMeta.sortOrder()","description":"----","source":"@site/docs/Web_and_app_UIs/UDB_ColsMeta/ColsMetasortOrder.md","sourceDirName":"Web_and_app_UIs/UDB_ColsMeta","slug":"/Web_and_app_UIs/UDB_ColsMeta/ColsMetasortOrder","permalink":"/udocs/Web_and_app_UIs/UDB_ColsMeta/ColsMetasortOrder","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"USoft11","permalink":"/udocs/tags/u-soft-11"},{"inline":true,"label":"USoft10","permalink":"/udocs/tags/u-soft-10"}],"version":"current","frontMatter":{"id":"ColsMetasortOrder","tags":["USoft11","USoft10"]},"sidebar":"sidebar","previous":{"title":"ColsMeta.prompt()","permalink":"/udocs/Web_and_app_UIs/UDB_ColsMeta/ColsMetaprompt"},"next":{"title":"ColsMeta.type()","permalink":"/udocs/Web_and_app_UIs/UDB_ColsMeta/ColsMetatype"}}');var n=s(74848),o=s(28453);const i={id:"ColsMetasortOrder",tags:["USoft11","USoft10"]},d="ColsMeta.sortOrder()",a={},l=[{value:"<strong>ColsMeta.sortOrder()</strong>",id:"colsmetasortorder-1",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"colsmetasortorder",children:"ColsMeta.sortOrder()"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"USoft 11``{.vs_11}"})}),"\n",(0,n.jsx)(t.admonition,{type:"danger",children:(0,n.jsxs)(t.p,{children:["This article describes the USoft 10 product only.\nIn USoft 11, the web UI API was revised and improved. For full details, go to:\n",(0,n.jsx)(t.a,{href:"/udocs/Web_and_app_UIs/UDB_udb/Revised_web_UI_API_in_USoft_11",children:"Revised web UI API in USoft 11"})]})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"USoft 10``{.vs_10}"})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["This article is about the ",(0,n.jsx)(t.strong,{children:"sortOrder()"})," function of the ",(0,n.jsx)(t.a,{href:"/Web_and_app_UIs/UDB_ColsMeta",children:"ColsMeta object"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"colsmetasortorder-1",children:(0,n.jsx)(t.strong,{children:"ColsMeta.sortOrder()"})}),"\n",(0,n.jsx)(t.p,{children:"Gets, sets or removes a sort definition for this column. A sort definition is a column or a list of columns by which data is sorted. A sort definition also contains (in the case of a list of columns) the hierarchy of these sort columns, i.e., the answer to the question by which column the data is sorted first, second\u2026"}),"\n",(0,n.jsx)(t.p,{children:"Returns a struct with two values, index and order. Index is the (1-based) index number of the sort precedence of this column. If data is first sorted by DEPT_NO and then by NAME, the sort precedence of DEPT_NO is 1 and the sort precedence of NAME is 2. Order is a string that is either ASC or DESC. ASC indicates that data is sorted with the lowest value first, DESC indicates that data is sorted with the highest value first."}),"\n",(0,n.jsx)(t.p,{children:"Returns undefined if no column is selected."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Syntax"}),"\n\xa0"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"$.udbMeta( *ds* ).cols( *cols* ).sortOrder( *options* | *order* | *sort-function* | *order* )\n\n*options*   ::=  {\n     fn:  *sort-function*,\n     order: *order*,\n     reset: *reset*\n}\n\n*order*  ::=  { ASC | DESC | TOGGLE | '' }\n\n*reset*  ::=  { true | false }\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Options"})," is a struct that can have the following items, all of which are optional. You can pass ",(0,n.jsx)(t.em,{children:"sort-function"})," and ",(0,n.jsx)(t.em,{children:"order"})," as a direct parameter of ",(0,n.jsx)(t.strong,{children:".sortOrder()"}),", as opposed to passing it as part of an options struct. Examples 2 and 3 at the end of this help topic illustrate this possibility."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Sort-function"})," is a function that overrides the default sorting functionality. The sorting will be executed on the client. If set to NULL, the function will be removed."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Order"})," is a string that specifies the sort order (ascending or descending). The following values are allowed. Setting ",(0,n.jsx)(t.em,{children:"order"})," explicitly to the empty string yields has a different meaning than not setting order at all:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Value"})}),(0,n.jsx)(t.th,{children:(0,n.jsx)(t.strong,{children:"Description"})})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ASC"}),(0,n.jsx)(t.td,{children:"Data are sorted with lowest value first."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DESC"}),(0,n.jsx)(t.td,{children:"Data are sorted with highest value first."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"TOGGLE"}),(0,n.jsx)(t.td,{children:"The sort order on the column is toggled to the opposite ASC/DESC value from the existing sort order. If no sort order exists, evaluates to ASC."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"(empty string)"}),(0,n.jsx)(t.td,{children:"The existing sort order is removed."})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"Reset"})," is a boolean specifying whether the setting must replace the current sorting. The default is false."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Example 1"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"var so = $.udbMeta('EMP').cols('NAME').sortOrder();\n\n$.udbMeta('EMP').cols('NAME').sortOrder({\n   order: 'ASC',\n   reset: true\n});\n\n$.udb('EMP').executeQuery();\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Example 2"})}),"\n",(0,n.jsx)(t.p,{children:"In this example, sort-function is passed as a direct parameter and not as part of an options struct."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"$.udbMeta('EMP').cols('NAME').sortOrder(\n   function(r1, r2){\n      return parseInt(r1.cols('DEPNO').val()) \u2013\n         parseInt(r2.cols('DEPNO').val());\n   }\n);\n$.udb('EMP').executeQuery();\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Example 3"})}),"\n",(0,n.jsx)(t.p,{children:"In this example, order is passed as a direct parameter and not as part of an options struct."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"$.udbMeta('EMP').cols('NAME').sortOrder('ASC');\n$.udb('EMP').executeQuery();\n"})}),"\n",(0,n.jsx)(t.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);