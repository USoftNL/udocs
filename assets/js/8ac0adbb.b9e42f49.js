"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[99728],{28453:(e,n,t)=>{t.d(n,{R:()=>p,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function p(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:p(e.components),r.createElement(i.Provider,{value:n},e.children)}},84309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Modeller_and_Rules_Engine/Rules_Engine_properties/UpdateSupertypeOnInsert","title":"UpdateSupertypeOnInsert","description":"This article is about the UpdateSupertypeOnInsertRules Engine property.","source":"@site/docs/Modeller_and_Rules_Engine/Rules_Engine_properties/UpdateSupertypeOnInsert.md","sourceDirName":"Modeller_and_Rules_Engine/Rules_Engine_properties","slug":"/Modeller_and_Rules_Engine/Rules_Engine_properties/UpdateSupertypeOnInsert","permalink":"/udocs/Modeller_and_Rules_Engine/Rules_Engine_properties/UpdateSupertypeOnInsert","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"UpdateSupertypeOnInsert"},"sidebar":"sidebar","previous":{"title":"UniqueKeyCheck","permalink":"/udocs/Modeller_and_Rules_Engine/Rules_Engine_properties/UniqueKeyCheck"},"next":{"title":"Version","permalink":"/udocs/Modeller_and_Rules_Engine/Rules_Engine_properties/Version"}}');var s=t(74848),i=t(28453);const p={id:"UpdateSupertypeOnInsert"},o="UpdateSupertypeOnInsert",l={},a=[{value:"<strong>UpdateSupertypeOnInsert</strong>",id:"updatesupertypeoninsert-1",level:2},{value:"Setting this property",id:"setting-this-property",level:2},{value:"Getting this property",id:"getting-this-property",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"updatesupertypeoninsert",children:"UpdateSupertypeOnInsert"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"UpdateSupertypeOnInsert"}),(0,s.jsx)(n.a,{href:"/Modeller_and_Rules_Engine/Rules_Engine_properties",children:"Rules Engine property"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"updatesupertypeoninsert-1",children:(0,s.jsx)(n.strong,{children:"UpdateSupertypeOnInsert"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"UpdateSupertypeOnInsert"})," Rules Engine property can be used to override the ",(0,s.jsx)(n.a,{href:"/udocs/Modeller_and_Rules_Engine/Introducing_USoft_Modeller_and_Rules_Engine/Rules_Engine_parameters",children:"UPDATE_SUPERTYPE_ON_INS "}),"Rules Engine parameter setting for the current deployment context and for the duration of the current session."]}),"\n",(0,s.jsx)(n.p,{children:"This setting determines whether or not inserting a subtype for an existing supertype must be considered as an UPDATE on the whole constellation."}),"\n",(0,s.jsx)(n.h2,{id:"setting-this-property",children:"Setting this property"}),"\n",(0,s.jsx)(n.p,{children:"You can reset this property by executing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT RulesEngine.SetProperty( 'UpdateSupertypeOnInsert', '*value*' )\n\n*value*  ::=  { Yes | No }\n"})}),"\n",(0,s.jsx)(n.p,{children:"This entire statement is case-insensitive, including the property name and the values of value. 'No' is the USoft factory default, meaning that the UPDATE_SUPERTYPE_ON_INS Rules Engine parameter is set to 'False' by default."}),"\n",(0,s.jsx)(n.h2,{id:"getting-this-property",children:"Getting this property"}),"\n",(0,s.jsx)(n.p,{children:"You can get the current value of this property by executing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT RulesEngine.GetProperty( 'UpdateSupertypeOnInsert' )\n"})}),"\n",(0,s.jsx)(n.p,{children:"This entire statement is case-insensitive, including the property name."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);