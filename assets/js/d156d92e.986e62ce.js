"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[40737],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},83067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Extensions/DotNet_components/UBlend_components","title":"UBlend components","description":"A \xa0UBlend component is an RDMI component that allows you to execute a USoft Blend script by calling a component.","source":"@site/docs/Extensions/DotNet_components/UBlend_components.md","sourceDirName":"Extensions/DotNet_components","slug":"/Extensions/DotNet_components/UBlend_components","permalink":"/udocs/Extensions/DotNet_components/UBlend_components","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"UBlend_components"},"sidebar":"sidebar","previous":{"title":"JavaScript components","permalink":"/udocs/Extensions/DotNet_components/JavaScript_components"},"next":{"title":"Visual Basic components","permalink":"/udocs/Extensions/DotNet_components/Visual_Basic_components"}}');var o=t(74848),i=t(28453);const r={id:"UBlend_components"},c="UBlend components",a={},l=[{value:"Defining a component for executing a USoft Blend script",id:"defining-a-component-for-executing-a-usoft-blend-script",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"ublend-components",children:"UBlend components"})}),"\n",(0,o.jsxs)(n.p,{children:["A \xa0",(0,o.jsx)(n.strong,{children:"UBlend component"})," is an RDMI component that allows you to execute a USoft Blend script by calling a component."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"You can also execute a sequence of multiple USoft Blend scripts through a single component method, using the same technique as with XSL Stylesheets components. However, with USoft Blend scripts, this is less obviously useful than with XSL stylesheets."})}),"\n",(0,o.jsx)(n.p,{children:"In USoft, UBlend components are typed as .NET components because they use .NET under the hood."}),"\n",(0,o.jsx)(n.p,{children:"Why would you wrap a USoft Blend script in a component?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This allows you to invent a functional name which makes sense to a user and by which he can execute the script."}),"\n",(0,o.jsx)(n.li,{children:"The script is easier to deliver because it is an integral part of your application, not an external file or a CLOB value in an application table."}),"\n",(0,o.jsx)(n.li,{children:"Constraints and other SQL contexts that need to use the script become more compact."}),"\n",(0,o.jsx)(n.li,{children:"The script automatically participates in tool features that all RDMI components participate in: SQL Objects cross-referencing, Find In Repository, and Object Shopping."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"defining-a-component-for-executing-a-usoft-blend-script",children:"Defining a component for executing a USoft Blend script"}),"\n",(0,o.jsx)(n.p,{children:"To define a component for executing a USoft Blend script:"}),"\n",(0,o.jsx)(n.p,{children:'1.\xa0In USoft Definer, from the menu, choose Define, RDMI, dotNet Components, UBlend Components from the Define menu. The "UBlend Components" window opens.'}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0Set any name for the component, e.g., PRINT_CLIPBOARD."}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0Paste the USoft Blend script code into the Program Source field. Save work."}),"\n",(0,o.jsx)(n.p,{children:"4.\xa0Press the Check button in the top right corner. In the question box, choose the Yes button."}),"\n",(0,o.jsx)(n.p,{children:"5.\xa0USoft has now generated an API for executing the Blend script in a variety of ways. Assuming that you have specified only 1 Blend script, the methods generated are as follows:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Method Name"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Description"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"BLEND"}),(0,o.jsx)(n.td,{children:"Executes the Blend script, or all the Blend scripts specified."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"BLEND0"}),(0,o.jsxs)(n.td,{children:["Executes the ",(0,o.jsx)(n.em,{children:"first"})," Blend script specified.*"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"BLEND2FILE"}),(0,o.jsx)(n.td,{children:"Executes the Blend script specified, or all the Blend scripts specified, and then writes the result value(s) to a file with the specified filepath."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"BLEND2FILE0"}),(0,o.jsxs)(n.td,{children:["Executes the ",(0,o.jsx)(n.em,{children:"first"})," USoft Blend script specified and then writes the result value to a file with the specified filepath.*"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PRINT_CLIPBOARD"}),(0,o.jsx)(n.td,{children:"Constructor method with the name that you set in the Name field for the component. This method may not may not be apparent in the list of generated methods and is for technical purposes only."})]})]})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'The "0" suffix in the method name is the 0-based index number of the Blend script, i.e, the first Blend script. Typically, you specify only 1 Blend script, in which case the net effect of calling this method is equivalent to calling the same method name without the "0".'}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"You can get the .NET code that USoft has generated by pressing the small 'copy' button immediately to the right of the Program Source prompt. The code is copied to clipboard:"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["The built-in ",(0,o.jsx)(n.a,{href:"/Extensions/USCSXSL_internal_component",children:"USCSXSL"})," component underlies this API:\nwhich is, in turn, equivalent to:"]})}),"\n",(0,o.jsx)(n.p,{children:"You can view the signature (the parameter list) of each method in the Parameters box at the bottom of the window."}),"\n",(0,o.jsxs)(n.p,{children:["All BLEND... methods allow you to pass a list of input parameters (the ",(0,o.jsx)(n.strong,{children:"args"})," InListparameter listed). You can use this mechanism to pass values to Blend scripts that expect named input parameters. You can pass parameter values as name-value combinations in the following comma-separated syntax, as shown in Example 2 below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"*... variable, value* [, *variable, value* ... ]\n*variable*    ::=    *type*:*name*\n*type*        ::=    { string | document }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For each variable, a ",(0,o.jsx)(n.em,{children:"name"})," and a ",(0,o.jsx)(n.em,{children:"value"})," is required and a ",(0,o.jsx)(n.em,{children:"type"})," prefix (followed by a colon) is optional. If you do not specify a ",(0,o.jsx)(n.em,{children:"type"}),", a string value is expected."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example 1"})}),"\n",(0,o.jsx)(n.p,{children:"This example prints the current content of your clipboard. If the Name of the component is PRINT_CLIPBOARD, and the Program Source for the component is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Example xmlns:pc="Processing.Command">\n   <pc:value-of select="clipboard:GetText()"/>\n</Example>\n'})}),"\n",(0,o.jsx)(n.p,{children:"and the current content of your clipboard is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"**Hello there**\n"})}),"\n",(0,o.jsx)(n.p,{children:"then both these calls:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"**INVOKE print_clipboard.blendSELECT print_clipboard.blend()**\n"})}),"\n",(0,o.jsx)(n.p,{children:"yield this result:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<Example>Hello there</Example>\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example 2"})}),"\n",(0,o.jsx)(n.p,{children:"This example shows input parameters (read the end of this section for a discussion). If the Name of the component is PRINT_VARIABLES, and the Program Source for the component is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Example xmlns:pc="Processing.Command">\n   <pc:value-of select="concat( $myvar1, \' \', $myvar2 )"/>\n</Example\n'})}),"\n",(0,o.jsx)(n.p,{children:"then both these calls:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"INVOKE   print_variables.blend WITH\nSELECT   'myvar1'\n,        'Hello'\n,        'myvar2'\n,        'there'\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT print_clipboard.blend( 'myvar1', 'Hello', 'myvar2', 'there' )\n"})}),"\n",(0,o.jsx)(n.p,{children:"yield this result:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<Example>Hello there</Example>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, a USoft Blend script expects input parameters simply by containing variable references. If you prefer to declare expected input parameters at the top of the script, you can use one of the ",(0,o.jsx)(n.code,{children:"<pc:assign...>"})," directives, for example, you can declare variables with ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"<pc:assign-default>"})}),":\xa0"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Example xmlns:pc="Processing.Command">\n   <pc:assign-default\n      myvar1=""\n      myvar2=""   />\n   <pc:value-of select="concat( $myvar1, \' \', $myvar2 )"/>\n</Example>\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can add error handling for mandatory input parameters:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Example xmlns:pc="Processing.Command">\n   <pc:assign-default\n      myvar1=""\n      myvar2=""   />\n   <pc:terminate test="$myvar1=\'\'" msg="Myvar1 must be specified."/>\n   <pc:terminate test="$myvar2=\'\'" msg="Myvar2 must be specified."/>\n   <pc:value-of select="concat( $myvar1, \' \', $myvar2 )"/>\n</Example>\n'})}),"\n",(0,o.jsx)(n.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);