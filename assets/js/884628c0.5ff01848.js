"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[15138],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},c=s.createContext(i);function r(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(c.Provider,{value:t},e.children)}},65173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Repositories/Blend_directives/pctextmsg","title":"pc:textmsg","description":"This article is about the pc:textmsg Blend directive.","source":"@site/docs/Repositories/Blend_directives/pctextmsg.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pctextmsg","permalink":"/udocs/Repositories/Blend_directives/pctextmsg","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pctextmsg"},"sidebar":"sidebar","previous":{"title":"pc:text","permalink":"/udocs/Repositories/Blend_directives/pctext"},"next":{"title":"pc:then","permalink":"/udocs/Repositories/Blend_directives/pcthen"}}');var i=n(74848),c=n(28453);const r={id:"pctextmsg"},o="pc",d={},l=[{value:"<strong>pc</strong>",id:"pc-1",level:2},{value:"Most recently produced message",id:"most-recently-produced-message",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"pc",children:["pc",":textmsg"]})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["This article is about the ",(0,i.jsxs)(t.strong,{children:["pc",":textmsg"]}),(0,i.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"pc-1",children:(0,i.jsxs)(t.strong,{children:["pc",":textmsg"]})}),"\n",(0,i.jsxs)(t.p,{children:["Returns the information, warning or error message (if any) that was ",(0,i.jsx)(t.a,{href:"#most-recently-produced-message",children:"most recently produced"})," by the USoft Blend processor. This will often be a message as encountered in USoft Rules Service logs. This takes the form of a text string. The Blend processor sets or overwrites this message each time it encounters a message in the result of a function call."]}),"\n",(0,i.jsx)(t.p,{children:"Returns a text string."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["By contrast, ",(0,i.jsxs)(t.a,{href:"/udocs/Repositories/Blend_directives/pcmsg",children:["pc",":msg"]})," returns an XML document."]})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Syntax"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:"<pc:textmsg />\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example"})}),"\n",(0,i.jsx)(t.p,{children:"This example is an attempt to import a record with a non-unique primary key:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml><pc:textmsg",children:'<pc:XmlImport connection="{$myconn}" commit="commit" source="{$myfile}">\n<pc:Succeeded>\n   <pc:ConsoleWrite>Application data imported.<pc:newline/></pc:ConsoleWrite>\n</pc:Succeeded>\n<pc:Failed>\n   <pc:ConsoleWrite>Error: Failed to import application data.\n      <pc:newline/>\n      <pc:textmsg/>\n   </pc:ConsoleWrite>\n</pc:Failed>\n</pc:XmlImport>  \n'})}),"\n",(0,i.jsx)(t.p,{children:"The return message from the Rules Engine looks like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Key "Tours.(Destination,Type)" with value "(AUSTRALIA,ISLAND SUNTANNER)" is not unique.\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The value returned by ",(0,i.jsx)("pc:textmsg",{})," looks like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'TOUR DESTINATION = AUSTRALIA, TOUR_TYPE = ISLAND SUNTANNER\nKey "Tours.(Destination,Type)" with value "(AUSTRALIA,ISLAND SUNTANNER)" is not unique.\nAt: /root[(1)]/pc:AppendFile[(1)]/pc:XmlImport[(1)]<pc:XmlImport connection="{$appconn}" commit="commit" source="{$importapppath}" />\n'})}),"\n",(0,i.jsx)(t.h2,{id:"most-recently-produced-message",children:"Most recently produced message"}),"\n",(0,i.jsxs)(t.p,{children:["<pc",":textmsg","/> returns the ",(0,i.jsx)(t.em,{children:"most recently produced"})," message. It is typically used in combination with <pc",":Succeeded","> and <pc",":Failed","> as the Example showed, but you can also used it on its own. This <pc",":textmsg","/> produces any message raised by the call to pc:RunRulesService:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:"<pc:RunRulesService>\n  ...\n</pc:RunRulesService>\n<pc:textmsg/>\n"})}),"\n",(0,i.jsx)(t.p,{children:"\xa0"})]})}function a(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);