"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[85165],{9529:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"Continuous_delivery/Delivery_Manager_basic_procedures/Archiving_an_upgrade_script","title":"Archiving an upgrade script","description":"You archive current upgrade scripts for user applications indirectly by moving to the next release version.","source":"@site/docs/Continuous_delivery/Delivery_Manager_basic_procedures/Archiving_an_upgrade_script.md","sourceDirName":"Continuous_delivery/Delivery_Manager_basic_procedures","slug":"/Continuous_delivery/Delivery_Manager_basic_procedures/Archiving_an_upgrade_script","permalink":"/udocs/Continuous_delivery/Delivery_Manager_basic_procedures/Archiving_an_upgrade_script","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Archiving_an_upgrade_script"},"sidebar":"sidebar","previous":{"title":"Writing an upgrade script","permalink":"/udocs/Continuous_delivery/Delivery_Manager_basic_procedures/Writing_an_upgrade_script"},"next":{"title":"Restoring an upgrade script","permalink":"/udocs/Continuous_delivery/Delivery_Manager_basic_procedures/Restoring_an_upgrade_script"}}');var s=i(74848),t=i(28453);const a={id:"Archiving_an_upgrade_script"},c="Archiving an upgrade script",o={},p=[{value:"Archiving upgrade scripts",id:"archiving-upgrade-scripts",level:3},{value:"Viewing archived scripts",id:"viewing-archived-scripts",level:3}];function d(e){const r={h1:"h1",h3:"h3",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"archiving-an-upgrade-script",children:"Archiving an upgrade script"})}),"\n",(0,s.jsx)(r.p,{children:"You archive current upgrade scripts for user applications indirectly by moving to the next release version."}),"\n",(0,s.jsx)(r.p,{children:"Delivery Manager automatically archives scripts that belong to a previous version. This is appropriate, since upgrade scripts are typically version-bound. Automatic archiving prevents you from inadvertently running scripts that applied to a previous version."}),"\n",(0,s.jsx)(r.h3,{id:"archiving-upgrade-scripts",children:"Archiving upgrade scripts"}),"\n",(0,s.jsx)(r.p,{children:"To archive upgrade scripts:"}),"\n",(0,s.jsx)(r.p,{children:"1.\xa0Create a new release by choosing Release, Create New Release from the menu."}),"\n",(0,s.jsx)(r.h3,{id:"viewing-archived-scripts",children:"Viewing archived scripts"}),"\n",(0,s.jsx)(r.p,{children:"You can view archived scripts by following these steps:"}),"\n",(0,s.jsx)(r.p,{children:"1.\xa0Choose Define, Upgrade Scripts from the menu."}),"\n",(0,s.jsx)(r.p,{children:"The Current Upgrade Scripts window is opened."}),"\n",(0,s.jsx)(r.p,{children:"2.\xa0Press the Archived Upgrade Scripts button at the bottom of the window."}),"\n",(0,s.jsx)(r.p,{children:"The Archived Upgrade Scripts window is opened."}),"\n",(0,s.jsx)(r.p,{children:"3.\xa0In the top box, query the application that you want to view the archived scripts for."})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>c});var n=i(96540);const s={},t=n.createContext(s);function a(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);