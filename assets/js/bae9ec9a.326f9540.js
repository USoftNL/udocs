"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[91828],{28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>l});var n=i(96540);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}},99221:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Repositories/Data_flow_control_with_XML_or_JSON/Example_XML_import","title":"Example: XML import","description":"Example: default XML import","source":"@site/docs/Repositories/Data_flow_control_with_XML_or_JSON/Example_XML_import.md","sourceDirName":"Repositories/Data_flow_control_with_XML_or_JSON","slug":"/Repositories/Data_flow_control_with_XML_or_JSON/Example_XML_import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_XML_import","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_XML_import"},"sidebar":"sidebar","previous":{"title":"Example: Simple XML or JSON export","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_Simple_XML_or_JSON_export"},"next":{"title":"Example: JSON import","permalink":"/udocs/Repositories/Data_flow_control_with_XML_or_JSON/Example_JSON_import"}}');var o=i(74848),r=i(28453);const s={id:"Example_XML_import"},l="Example: XML import",a={},h=[{value:"Example: default XML import",id:"example-default-xml-import",level:2},{value:"How this import is handled",id:"how-this-import-is-handled",level:3},{value:"Example: XML import with DML instruction tags",id:"example-xml-import-with-dml-instruction-tags",level:2},{value:"How this import is handled",id:"how-this-import-is-handled-1",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"example-xml-import",children:"Example: XML import"})}),"\n",(0,o.jsx)(t.h2,{id:"example-default-xml-import",children:"Example: default XML import"}),"\n",(0,o.jsx)(t.p,{children:'Here is an example of a default XML import. This is "default\u201d in the sense that the input is a literal data set, as opposed to data accompanied by DML instruction tags (next section).'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:'INVOKE \xa0 \xa0XML.Import WITH\nSELECT \xa0 \xa0\'<Persons>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <PERSON ID="112" FAMILY_NAME="Smith" FIRST_NAME="John"></PERSON>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <PERSON ID="203" FAMILY_NAME="Sutcliff" FIRST_NAME="Bill"/></PERSON>\n \xa0 \xa0 \xa0 \xa0 \xa0 </Persons>\' XmlDocument\n\n'})}),"\n",(0,o.jsx)(t.h3,{id:"how-this-import-is-handled",children:"How this import is handled"}),"\n",(0,o.jsx)(t.p,{children:'A default XML import is handled using the "UPSERT\u201d principle:'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"If a record with the input primary key values does not exist, the import record is INSERTed."}),"\n",(0,o.jsx)(t.li,{children:"If a record with the input primary key values already exists, then any non-primary-key column values that are different in the import record are UPDATEd."}),"\n",(0,o.jsx)(t.li,{children:"No records are DELETEd."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:'Assuming "ID\u201d is by itself the primary key of table PERSON,'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"If there is no person with ID = 112 or ID = 203, the import records are INSERTed. The import will fail If the PERSON table has columns other than ID, FAMILY_NAME, FIRST_NAME that have Mandatory = Yes and Default Value = (empty), where Default Value can be set at column level or at domain level or both."}),"\n",(0,o.jsx)(t.li,{children:"If persons with ID = 112 and ID = 203 already exist, the records are UPDATEd. The current values for FAMILY_NAME and FIRST_NAME will be replaced by the import values."}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"A successful import can still be rolled back. To consolidate, you need to commit."})}),"\n",(0,o.jsx)(t.h2,{id:"example-xml-import-with-dml-instruction-tags",children:"Example: XML import with DML instruction tags"}),"\n",(0,o.jsxs)(t.p,{children:["Here is an example of an XML import instruction with ",(0,o.jsx)(t.a,{href:"/udocs/Repositories/USoft_XML_formats/DML_instruction_tags",children:"DML instruction tags"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"If the import is successful, the FIRST_NAME value of one person is changed, and another person is DELETEd."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:'INVOKE \xa0 \xa0XML.Import WITH\nSELECT \xa0 \xa0\'<Persons>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <PERSON ID="112" FAMILY_NAME="Smith" FIRST_NAME="John">\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <Update FIRST_NAME="Johnny"/>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 </PERSON>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <PERSON ID="203" FAMILY_NAME="Sutcliff" FIRST_NAME="Bill"/>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <Delete/>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 </PERSON>\n \xa0 \xa0 \xa0 \xa0 \xa0 </Persons>\' XmlDocument\n, \xa0 \xa0 \xa0 \xa0 \'AllColumns\' VerifyOriginalValues\n\n'})}),"\n",(0,o.jsx)(t.h3,{id:"how-this-import-is-handled-1",children:"How this import is handled"}),"\n",(0,o.jsx)(t.p,{children:"This import is handled by following the <Update> and <Delete> instructions."}),"\n",(0,o.jsx)(t.p,{children:"A blocking error is raised if one or more of the following apply:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"There is no PERSON database record with ID = 112."}),"\n",(0,o.jsx)(t.li,{children:"There is no PERSON database record with ID = 203."}),"\n",(0,o.jsx)(t.li,{children:'There is a PERSON database record with ID = 112, but either its FAMILY_NAME value is other than "Smith" or its FIRST_NAME value is other than "John" (or both).'}),"\n",(0,o.jsx)(t.li,{children:'There is a PERSON database record with ID = 203, but either its FAMILY_NAME value is other than "Sutcliff" or its FIRST_NAME value is other than "Bill" (or both).'}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);