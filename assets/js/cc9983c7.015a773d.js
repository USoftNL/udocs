"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[38090],{10602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_10_Catalog_node_leading_to_data_query","title":"Actions Example 10: Catalog node leading to data query","description":"This example shows how a user can select data in a catalog tree or other tree view, and then double-click to open a window and retrieve corresponding data from the database.","source":"@site/docs/Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_10_Catalog_node_leading_to_data_query.md","sourceDirName":"Desktop_UIs/Scripting_in_USoft_Windows_Designer","slug":"/Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_10_Catalog_node_leading_to_data_query","permalink":"/udocs/Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_10_Catalog_node_leading_to_data_query","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Actions_Example_10_Catalog_node_leading_to_data_query"},"sidebar":"sidebar","previous":{"title":"Actions Example 9: Dialog for search conditions","permalink":"/udocs/Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_9_Dialog_for_search_conditions"},"next":{"title":"Actions Example 11: Window with separate search dialog","permalink":"/udocs/Desktop_UIs/Scripting_in_USoft_Windows_Designer/Actions_Example_11_Window_with_separate_search_dialog"}}');var r=n(74848),a=n(28453);const i={id:"Actions_Example_10_Catalog_node_leading_to_data_query"},s="Actions Example 10: Catalog node leading to data query",c={},d=[{value:"ReservationsFromCatalog Window",id:"reservationsfromcatalog-window",level:2},{value:"Catalog double-click action",id:"catalog-double-click-action",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"actions-example-10-catalog-node-leading-to-data-query",children:"Actions Example 10: Catalog node leading to data query"})}),"\n",(0,r.jsx)(t.p,{children:"This example shows how a user can select data in a catalog tree or other tree view, and then double-click to open a window and retrieve corresponding data from the database."}),"\n",(0,r.jsx)(t.p,{children:"Leaf nodes in the catalog tree represent scheduled tours in a travel agency. If the user double-clicks on one of these leaf nodes, a Reservations window opens in which the reservations for the corresponding scheduled tour are retrieved."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(35965).A+"",width:"272",height:"470"})}),"\n",(0,r.jsx)(t.p,{children:"For help on creating a catalog, go to the Tree Views help topic. The catalog passes the Scheduled Tour primary key value of the selected node to the opening window:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The window has a user-defined property to receive the primary key value as a string."}),"\n",(0,r.jsx)(t.li,{children:"The catalog refers to the user-defined property to pass the primary key value as a string."}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:"The reason why you can use simple string values here is that each double-click action leads to a new info window. The info windows need not refer back to the catalog once they are created. This contrasts with examples 11 and 12, where object-like (as opposed to string-like) properties are required."})}),"\n",(0,r.jsx)(t.h2,{id:"reservationsfromcatalog-window",children:"ReservationsFromCatalog Window"}),"\n",(0,r.jsx)(t.p,{children:"This scenario is part of Actions Example 10: Catalog Node Leading to Data Query."}),"\n",(0,r.jsx)(t.p,{children:"To create a Reservation window with a user-defined property for receiving a value from a catalog, these steps were taken."}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Create a new ReservationsFromCatalog subclass of the Reservations info window."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Open the ReservationsFromCatalog class, open the Property Inspector, select the Post-Open behavior property and open the Object Activator by clicking the Edit button."}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Write this action statement script, for which you define the mySchedtourID property."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"QueryDefine()\nquery.schedtour_id(mySchedtourID() )\nQueryExecute()\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Here are the steps for writing this script:"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0In the Methods pane, on the Methods tab page, select the QueryDefine() method and click Add."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0In the Object Browser pane, select query.schedtour_id() and click Add."}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0In the Script box, select the empty parameter node for query.schedtour_id()."}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Make sure the ReservationsFromCatalog info window is selected in the Object Browser tree view (top-left)."}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0In the Methods pane, on the Properties tab page, click New."}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0Define a new mySchedtourID property, accept the String default for Type, and set Argument Position to 1."}),"\n",(0,r.jsx)(t.p,{children:"The mySchedtourID property can now be referred to by other objects as the first parameter of the ReservationsFromCatalog info box class."}),"\n",(0,r.jsx)(t.p,{children:"7.\xa0Click OK to return to the Object Activator, and then click Set to paste the reference to the new property into your script."}),"\n",(0,r.jsx)(t.p,{children:"8.\xa0In the Methods pane, on the Methods tab page, select the QueryExecute() method and click Add."}),"\n",(0,r.jsx)(t.h2,{id:"catalog-double-click-action",children:"Catalog double-click action"}),"\n",(0,r.jsx)(t.p,{children:"This scenario is part of Actions Example 10: Catalog Node Leading to Data Query."}),"\n",(0,r.jsx)(t.p,{children:"To force the catalog to pass a Scheduled Tour ID to the ReservationsFromCatalog window on double-click, take these steps:"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0In the Property Inspector for the catalog, navigate to Tree View Node 3 and select the Double-click Action property on the Behavior tab page."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Open the Object Activator for this property by clicking the Edit/Compose button."}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0From the Windows Designer catalog, drag the ReservationsFromCatalog info box class into the Script box. This results in the following action statement being created:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"ReservationsFromCatalog( ... ).Window.Create()\n"})}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0In the Script box, select the parameter subnode of this call."}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0In the Object Browser pane, select the following node:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Tab_1.Page_1.Tree_View_1\n"})}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0In the Methods list, select the GetValueFromCurrentItem method, and click the Set button. This results in:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Tab_1.Page_1.Tree_View_1.GetValueFromCurrentItem( ... )\n"})}),"\n",(0,r.jsx)(t.p,{children:"7.\xa0In the Script box, select the empty parameter subnode of this GetValueFromCurrentItem action statement."}),"\n",(0,r.jsx)(t.p,{children:"8.\xa0Click the Edit button, and type: schedtour_id."}),"\n",(0,r.jsx)(t.p,{children:"9.\xa0Click OK to close the Object Activator, and save your work. This results in:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"ReservationsFromCatalog( Tab_1.Page_1.Tree_View_1.GetValueFromCurrentItem( schedtour_id ) ).\nWindow.Create()\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"This action statement creates an instance of the ReservationsFromCatalog class with the schedtour_id value for the current tree view node as a parameter. This parameter is collected in the mySchedtourID user-defined property of the ReservationsFromCatalog info window that will be opened."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(96540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}},35965:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/50f13a8b-fc52-478b-90c9-a600d9d7eb95-7eb80658c2472204c9ff8f2d6d754ccf.jpg"}}]);