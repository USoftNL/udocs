"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[5520],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},42481:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Extensions/RDMI_Components/Component_querying_a_CSV_file","title":"Component querying a CSV file","description":"This example shows how to create a component table that returns data from a CSV file as if it were a database table with multiple rows: a component table mimics the behaviour, or part of the behaviour of a database table but is not itself in the database.","source":"@site/docs/Extensions/RDMI_Components/Component_querying_a_CSV_file.md","sourceDirName":"Extensions/RDMI_Components","slug":"/Extensions/RDMI_Components/Component_querying_a_CSV_file","permalink":"/udocs/Extensions/RDMI_Components/Component_querying_a_CSV_file","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Component_querying_a_CSV_file"},"sidebar":"sidebar","previous":{"title":"Component querying multiple CSV files","permalink":"/udocs/Extensions/RDMI_Components/Component_querying_multiple_CSV_files"},"next":{"title":"Aggregate protocol","permalink":"/udocs/Extensions/RDMI_Components/Aggregate_protocol"}}');var o=t(74848),i=t(28453);const s={id:"Component_querying_a_CSV_file"},l="Component querying a CSV file",a={},c=[{value:"Step 1: .NET component for retrieving data from a CSV file",id:"step-1-net-component-for-retrieving-data-from-a-csv-file",level:3},{value:"Step 2: Query protocol association",id:"step-2-query-protocol-association",level:3},{value:"Step 3: Testing the query protocol",id:"step-3-testing-the-query-protocol",level:3},{value:"Step 4: Component table",id:"step-4-component-table",level:3},{value:"Step 5: Testing the component table",id:"step-5-testing-the-component-table",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"component-querying-a-csv-file",children:"Component querying a CSV file"})}),"\n",(0,o.jsxs)(n.p,{children:["This example shows how to create a ",(0,o.jsx)(n.strong,{children:"component table"})," that returns data from a CSV file as if it were a database table with multiple rows: a component table mimics the behaviour, or part of the behaviour of a database table but is not itself in the database."]}),"\n",(0,o.jsx)(n.p,{children:"The component table uses an underlying .NET component that uses the query protocol to interpret file contents as a multi-row data set."}),"\n",(0,o.jsx)(n.p,{children:"The example component expects a .CSV input file with the following structure: ID, DESTINATION, TOUR_TYPE, START_DATE, END_DATE, PRICE."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example"})}),"\n",(0,o.jsxs)(n.p,{children:["Here is an input file called ",(0,o.jsx)(n.strong,{children:"C:\\Temp\\schedtour.csv"})," that demonstrates the data format expected by the example component:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"146,AUSTRALIA,ISLAND SUNTANNER,21-3-2020 11:59:01,1-4-2020 11:59:01,2500\n145,AUSTRALIA,ISLAND SUNTANNER,20-11-2019 11:59:01,1-12-2019 11:59:01,2500\n144,BRAZIL,RAINFOREST RIDE,16-10-2021 11:59:01,29-10-2021 11:59:01,3000\n143,BRAZIL,RAINFOREST RIDE,15-9-2021 11:59:01,28-9-2021 11:59:01,3000\n142,BRAZIL,RAINFOREST RIDE,15-8-2021 11:59:01,28-8-2021 11:59:01,5500\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-1-net-component-for-retrieving-data-from-a-csv-file",children:"Step 1: .NET component for retrieving data from a CSV file"}),"\n",(0,o.jsx)(n.p,{children:"1.\xa0Choose Define, RDMI, dotNet Components from the USoft Definer menu. The DotNetComponents window opens."}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0Provide a Name for your new component, in this case: CSV. IMPORTANT: This name will also be the name of your component table."}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0In the Program Source field, provide the source code of the component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-language-cs",children:'using System;\nusing System.Text;\nusing System.IO;\n\nclass CSV\n{\n string csvFileName = null;\n StreamReader reader = null;\n\n public CSV(string filename){\n         csvFileName = filename;\n }\n\n public long QueryExe(Nullable<Int32> id, string destination, string tourType, Nullable<DateTime> startDate, Nullable<DateTime> returnDate, Nullable<Int32> price)\n {\n         if(csvFileName == null)\n                 throw new Exception("Filename is not set.");\n\n         reader = new StreamReader(csvFileName);\n         return 1;\n }\n\n public long QueryFetch(out Nullable<Int32> id, out string destination, out string tourType, out Nullable<DateTime> startDate, out Nullable<DateTime> returnDate, out Nullable<Int32> price)\n {\n         id = null;\n         destination = null;\n         tourType = null;\n         startDate = null;\n         returnDate = null;\n         price = null;\n\n        if(reader.EndOfStream){\n                 reader.Close();\n                 return 0;\n         }\n\n         try{\n                 var line = reader.ReadLine();\n                 var values = line.Split(\',\');\n                 int n = 0;\n                 if(values[0] != null && !Int32.TryParse(values[0], out n))\n                         throw new Exception("Cannot convert value " + values[0] + " to a number");\n\n                 id = n;\n                 destination = values[1];\n                 tourType = values[2];\n                 if(values[3] != null)\n                         startDate = Convert.ToDateTime(values[3]);\n\n                 if(values[4] != null)\n                         returnDate = Convert.ToDateTime(values[4]);\n\n                 if(values[5] != null && !Int32.TryParse(values[5], out n))\n                         throw new Exception("Cannot convert value " + values[5] + " to a number");\n\n                 price = n;\n         }catch(Exception e){\n                 reader.Close();\n                 throw e;\n         }\n\n         return 1;\n }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"4.\xa0Save work."}),"\n",(0,o.jsx)(n.p,{children:"5.\xa0Press the Check button. The RDMI interface is generated by USoft."}),"\n",(0,o.jsx)(n.p,{children:"6.\xa0On the Constructor tab, set :"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Constructor SQL = select 'C:\\Temp\\schedtour.csv'"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"7.\xa0Press the Check button. See that Correct = Y."}),"\n",(0,o.jsx)(n.p,{children:"8.\xa0Set:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Active = Y"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"9.\xa0Save work."}),"\n",(0,o.jsx)(n.h3,{id:"step-2-query-protocol-association",children:"Step 2: Query protocol association"}),"\n",(0,o.jsx)(n.p,{children:"1.\xa0In the DotNet Components window, click the Query Protocol Associations tab page."}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0Fill out the following fields:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Protocol = QUERY"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Execute Method = QUERYEXE"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Fetch Method = QUERYFETCH"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0Save work."}),"\n",(0,o.jsx)(n.h3,{id:"step-3-testing-the-query-protocol",children:"Step 3: Testing the query protocol"}),"\n",(0,o.jsx)(n.p,{children:"At this point, you can test the query protocol with null values."}),"\n",(0,o.jsx)(n.p,{children:"1.\xa0Open the User Application from USoft Binder."}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0In Sql Command, execute:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0csv.query WITH\nSELECT \xa0 \xa0null\n, \xa0 \xa0 \xa0 \xa0 null\n, \xa0 \xa0 \xa0 \xa0 null\n, \xa0 \xa0 \xa0 \xa0 null\n, \xa0 \xa0 \xa0 \xa0 null\n, \xa0 \xa0 \xa0 \xa0 null\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0See that the SQL Command Report area displays all the data from the CSV file."}),"\n",(0,o.jsx)(n.h3,{id:"step-4-component-table",children:"Step 4: Component table"}),"\n",(0,o.jsx)(n.p,{children:"1.\xa0Choose Define, RDMI, dotNet Components from the USoft Definer menu. The DotNetComponents window opens. Query the record with Name = CSV."}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0On the State tab, set :"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Stateful Component = Y"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Participate in Transaction = N"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Support tablecomponent = Y"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Update = N"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Insert = N"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Delete = N"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0Save work."}),"\n",(0,o.jsx)(n.p,{children:"4.\xa0Choose Tables, Component Tables from the USoft Definer menu."}),"\n",(0,o.jsx)(n.p,{children:"5.\xa0Fill out the name of your new component table. This must be the name that you provided for the supporting component in a previous step, in this case: CSV."}),"\n",(0,o.jsx)(n.p,{children:"6.\xa0Provide values in the Abbreviation, Object Name and Object Name Plural fields."}),"\n",(0,o.jsx)(n.p,{children:"7.\xa0Define the following columns:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Name"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Data Type for domain"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Prompt"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Key"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Position"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"ID\xa0"}),(0,o.jsx)(n.td,{children:"NUMBER"}),(0,o.jsx)(n.td,{children:"Id\xa0"}),(0,o.jsx)(n.td,{children:"1"}),(0,o.jsx)(n.td,{children:"1"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"DESTINATION"}),(0,o.jsx)(n.td,{children:"NVARCHAR2(20)"}),(0,o.jsx)(n.td,{children:"Destination"}),(0,o.jsx)(n.td,{children:"No\xa0"}),(0,o.jsx)(n.td,{children:"2"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"TOUR_TYPE"}),(0,o.jsx)(n.td,{children:"NVARCHAR2(30)"}),(0,o.jsx)(n.td,{children:"Tour Type"}),(0,o.jsx)(n.td,{children:"No\xa0"}),(0,o.jsx)(n.td,{children:"3"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"START_DATE"}),(0,o.jsx)(n.td,{children:"DATE"}),(0,o.jsx)(n.td,{children:"Start Date"}),(0,o.jsx)(n.td,{children:"No\xa0"}),(0,o.jsx)(n.td,{children:"4"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"END_DATE"}),(0,o.jsx)(n.td,{children:"DATE"}),(0,o.jsx)(n.td,{children:"End Date"}),(0,o.jsx)(n.td,{children:"No\xa0"}),(0,o.jsx)(n.td,{children:"5"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PRICE"}),(0,o.jsx)(n.td,{children:"NUMBER"}),(0,o.jsx)(n.td,{children:"Price"}),(0,o.jsx)(n.td,{children:"No\xa0"}),(0,o.jsx)(n.td,{children:"6"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"8.\xa0Save work."}),"\n",(0,o.jsx)(n.h3,{id:"step-5-testing-the-component-table",children:"Step 5: Testing the component table"}),"\n",(0,o.jsx)(n.p,{children:"1.\xa0Open the client application (User Application item from USoft Binder)."}),"\n",(0,o.jsx)(n.p,{children:"2.\xa0Choose View, Objects from the menu. Open the object that correspond to the component table."}),"\n",(0,o.jsx)(n.p,{children:"3.\xa0Query the info window. See that it presents data from the CSV file."}),"\n",(0,o.jsx)(n.p,{children:"4.\xa0Query the info window with the search condition:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Destination = AUSTRALIA\n"})}),"\n",(0,o.jsx)(n.p,{children:"See that only records with AUSTRALIA as destination are now displayed."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);