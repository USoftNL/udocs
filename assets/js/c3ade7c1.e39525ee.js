"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[21226],{28357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Task_flow/Action_Language_reference_D-H/FileSaveAs","title":"FileSaveAs()","description":"This article is about the FileSaveAs action in the USoft Action Language.","source":"@site/docs/Task_flow/Action_Language_reference_D-H/FileSaveAs.md","sourceDirName":"Task_flow/Action_Language_reference_D-H","slug":"/Task_flow/Action_Language_reference_D-H/FileSaveAs","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileSaveAs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"FileSaveAs"},"sidebar":"sidebar","previous":{"title":"FileOpen()","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileOpen"},"next":{"title":"FileSearchIn()","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileSearchIn"}}');var t=s(74848),r=s(28453);const a={id:"FileSaveAs"},o="FileSaveAs()",l={},c=[{value:"<strong>FileSaveAs()</strong>",id:"filesaveas-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"filesaveas",children:"FileSaveAs()"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["This article is about the ",(0,t.jsx)(n.strong,{children:"FileSaveAs"})," action in the ",(0,t.jsx)(n.a,{href:"/udocs/Task_flow/Action_Language_reference/USoft_Action_Language",children:"USoft Action Language"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"filesaveas-1",children:(0,t.jsx)(n.strong,{children:"FileSaveAs()"})}),"\n",(0,t.jsx)(n.p,{children:'Opens the standard Windows "Save As" dialog that enables the user to save a file. Allows the user to save the contents of the on-screen editor in a file.'}),"\n",(0,t.jsx)(n.p,{children:"If the user does use the dialog to save contents as a file, the name of that file is returned as the value of the current control."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Syntax"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"FileSaveAs( *title*, *directory*, *file*, *read-only*, *filter* ... )\n\n*read-only*  :=  {  }\n\n*filter*  :=  *description*, *type*\n"})}),"\n",(0,t.jsxs)(n.p,{children:["All parameters are optional string parameters. If you want to pass any parameter, it is interpreted in strict order of position. Thus, to pass a ",(0,t.jsx)(n.em,{children:"filter"})," parameter, you must make sure to pass at least an empty string for each of ",(0,t.jsx)(n.em,{children:"title, directory, file, read-only."})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Title"})," is the text that appears as the dialog window title. If ",(0,t.jsx)(n.em,{children:"title"}),' is not specified, "Save As" is used.']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Directory"})," is the directory shown by default (= when the dialog is opened). If ",(0,t.jsx)(n.em,{children:"directory"})," is not specified, a default directory depending on settings in the file system is shown at this point, such as the last visited directory."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"File"})," is the file name shown by default in the File Name field. This field specifies under which name the contents is to be saved. If ",(0,t.jsx)(n.em,{children:"file"})," is not specified, the field is empty at this point."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Read-only"})," must be passed as an empty string ('') if you want to pass one or more ",(0,t.jsx)(n.em,{children:"filters"})," successfully."]}),"\n",(0,t.jsxs)(n.p,{children:["You can add any number of optional ",(0,t.jsx)(n.em,{children:"filter"})," parameters. Each ",(0,t.jsx)(n.em,{children:"filter"})," parameter is a ",(0,t.jsx)(n.em,{children:"description, type"})," pair, where ",(0,t.jsx)(n.em,{children:"description"})," and ",(0,t.jsx)(n.em,{children:"type"})," are separated by commas from each other and from preceding and following values. ",(0,t.jsx)(n.em,{children:"Description"})," is the description of the file type that the dialog will display. ",(0,t.jsx)(n.em,{children:"Type"})," is a descriptor of the corresponding set of files. ",(0,t.jsx)(n.em,{children:"Type"})," will contain at least one * wildcard. The typical use case for ",(0,t.jsx)(n.em,{children:"filters"})," in FileSaveAs() is to help users select a logical file extension."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"FileSaveAs( \n    'Save As'\n,   'c:\\temp\\' \n,   FORMULA ( :1 || :2, query.job(), '.log' )\n,   ''\n,   'Log File (*.log)'   ,  '*.log'\n,   'Text File (*.txt)'  ,  '*.txt' \n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);