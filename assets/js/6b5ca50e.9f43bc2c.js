"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[48396],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},48331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Extensions/USMeta_internal_component/USMetaModules","title":"USMeta.Modules","description":"This article is about the Modules method of the USMeta internal component.","source":"@site/docs/Extensions/USMeta_internal_component/USMetaModules.md","sourceDirName":"Extensions/USMeta_internal_component","slug":"/Extensions/USMeta_internal_component/USMetaModules","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaModules","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USMetaModules"},"sidebar":"sidebar","previous":{"title":"USMeta.Jobs","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaJobs"},"next":{"title":"USMeta.Relationships","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaRelationships"}}');var o=t(74848),i=t(28453);const l={id:"USMetaModules"},a="USMeta.Modules",r={},d=[{value:"<strong>USMeta.Modules</strong>",id:"usmetamodules-1",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"usmetamodules",children:"USMeta.Modules"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This article is about the ",(0,o.jsx)(n.strong,{children:"Modules"})," method of the ",(0,o.jsx)(n.a,{href:"/Extensions/USMeta_internal_component",children:"USMeta internal component"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"usmetamodules-1",children:(0,o.jsx)(n.strong,{children:"USMeta.Modules"})}),"\n",(0,o.jsx)(n.p,{children:'At runtime, gets metadata information about how modules are run. This information extends not just to consumed modules (if any) and plug-in modules (if any), but also to the application itself (the so-called "consumer application" or "main module").'}),"\n",(0,o.jsx)(n.p,{children:"Returns an XML document of the form demonstrated in the Example below."}),"\n",(0,o.jsx)(n.p,{children:"The return document contains an entry for:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'The application itself (the "consumer application" or "main module").'}),"\n",(0,o.jsx)(n.li,{children:"Any module that has been declared for the application with Load Module = Yes."}),"\n",(0,o.jsx)(n.li,{children:"Any module that is run as a result of being declared as a plug-in module in a .PIN file."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Each entry contains a list of attributes that are name/value pairs. Attributes returned are:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Attribute"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Description"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"MODULE_NAME"}),(0,o.jsx)(n.td,{children:"The name of the module, or the name of the consumer application."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"VERSION"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)("p",{children:"For USoft applications, the USoft patch version name (for example, '10.0.1') of the module."}),(0,o.jsx)("p",{children:"For user-defined applications, the value of VERSION is empty."})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"FROM_DATABASE"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)("p",{children:"Whether the module or consumer application is run from repository ('Y') or from flatfles ('N')."}),(0,o.jsx)("p",{children:"If NAME is for a consumed module or plug-in module, then FROM_DATABASE is forceably 'N'."}),(0,o.jsx)("p",{children:"If NAME is for a USoft application, eg., USoft Definer, then FROM_DATABASE is forceably 'N'."}),(0,o.jsx)("p",{children:"It is possible for FROM_DATABASE to be set to 'Y' only if NAME is for a user-defined consumer application."})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"MAIN_MODULE"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)("p",{children:"Whether the module is the consumer application ('Y'), or a consumed module ('N')."}),(0,o.jsx)("p",{children:'"Main module" is a synonym of "consumer application".'}),(0,o.jsx)("p",{children:"There is always exactly 1 main module. Any remaining modules are consumed modules or plug-in modules."})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PLUGIN"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)("p",{children:"Whether the module is run as a plug-in or not."}),(0,o.jsx)("p",{children:"For the consumer application, this attribute is set to 'N'."}),(0,o.jsx)("p",{children:"For modules, if the module is run because it is declared in a .PIN file, this attribute is set to 'Y', otherwise to 'N'."})]})]})]})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Syntax"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Modules(\n\xa0\xa0\xa0\xa0*module-name-pattern*     Modules\n\xa0\xa0\xa0\xa0*mime-type*               MimeType\n)\n\n*mime-type*   ::=  {  application/xml\n                 ,  xml\n                 ,  application/json\n                 ,  json  }\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Module-name-pattern"})," is optional. Parameter values that you pass are mapped to parameters by alias name. The '.",(0,o.jsx)(n.em,{children:"MAIN."}),"' value in the following example is for ",(0,o.jsx)(n.em,{children:"module-name-pattern"}),' because of the "Modules" alias:']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT   USMeta.Modules( '.*MAIN.*' Modules )\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Module-name-pattern"})," is a regular expression that matches zero, one or more module names in the model. The result data is limited to modules matching the pattern. If ",(0,o.jsx)(n.em,{children:"module-name-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Mime-type"})," determines whether the output is in XML ( \u2018application/xml\u2018 or 'xml\u2019) or in JSON ('application/json\u2019 or 'json\u2019). The default is XML."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example returns module information about all modules run, and about the consumer application:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Modules()\n"})}),"\n",(0,o.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Modules>\n      <Module MODULE_NAME="TRAVEL" VERSION="" FROM_DATABASE="Y" MAIN_MODULE="Y" PLUGIN="N"/>\n      <Module MODULE_NAME="CAR_RENTAL" VERSION="" FROM_DATABASE="N" MAIN_MODULE="N" PLUGIN="N"/>\n   </Modules>\n</Meta>\n'})}),"\n",(0,o.jsx)(n.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);