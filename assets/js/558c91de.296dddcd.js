"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[95105],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},31086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Services/Web_socket_services/Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application","title":"Example: USoft Default Web Socket Provider for a Chat application","description":"The following step-by-step instructions are for creating a WebSocket service that retrieves text messages, saves them in a chat table, and echoes them back to all active clients along with the name of the user who has sent the message and the timestamp of the message.","source":"@site/docs/Services/Web_socket_services/Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application.md","sourceDirName":"Services/Web_socket_services","slug":"/Services/Web_socket_services/Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application","permalink":"/udocs/Services/Web_socket_services/Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application"},"sidebar":"sidebar","previous":{"title":"USoft Default Web Socket Provider","permalink":"/udocs/Services/Web_socket_services/USoft_Default_Web_Socket_Provider"},"next":{"title":"Predefined REST services","permalink":"/udocs/Services/Predefined_REST_services"}}');var r=n(74848),i=n(28453);const a={id:"Example_USoft_Default_Web_Socket_Provider_for_a_Chat_application"},c="Example: USoft Default Web Socket Provider for a Chat application",d={},l=[{value:"Defining the model",id:"defining-the-model",level:2},{value:"Defining the job",id:"defining-the-job",level:2},{value:"Creating the WebSocket service for receiving messages",id:"creating-the-websocket-service-for-receiving-messages",level:2},{value:"Publishing the solution",id:"publishing-the-solution",level:2},{value:"Creating a test client and testing the implementation",id:"creating-a-test-client-and-testing-the-implementation",level:2}];function o(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"example-usoft-default-web-socket-provider-for-a-chat-application",children:"Example: USoft Default Web Socket Provider for a Chat application"})}),"\n",(0,r.jsx)(t.p,{children:"The following step-by-step instructions are for creating a WebSocket service that retrieves text messages, saves them in a chat table, and echoes them back to all active clients along with the name of the user who has sent the message and the timestamp of the message."}),"\n",(0,r.jsx)(t.h2,{id:"defining-the-model",children:"Defining the model"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0In USoft Definer, select Tables, Database Tables from the Define menu."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Provide the name CHAT_MESSAGE for your new table."}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Provide values for Abbreviation, Object Name and Object Name Plural fields."}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Add the following columns:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Name"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Data Type for domain"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Prompt"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Key"})})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ID\xa0"}),(0,r.jsx)(t.td,{children:"generated NUMBER"}),(0,r.jsx)(t.td,{children:"Id\xa0"}),(0,r.jsx)(t.td,{children:"1"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"USERNAME"}),(0,r.jsx)(t.td,{children:"NVARCHAR2(50)"}),(0,r.jsx)(t.td,{children:"User Name"}),(0,r.jsx)(t.td,{children:"No\xa0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MESSAGE_TEXT"}),(0,r.jsx)(t.td,{children:"NCLOB"}),(0,r.jsx)(t.td,{children:"Message"}),(0,r.jsx)(t.td,{children:"No\xa0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RECEIVED_ON"}),(0,r.jsx)(t.td,{children:"DATETIME"}),(0,r.jsx)(t.td,{children:"Timespamp"}),(0,r.jsx)(t.td,{children:"No\xa0"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0Save changes."}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0Add a constraint that updates the USERNAME and RECEIVED_ON columns on INSERT:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"UPDATE \xa0 chat_message\nSET \xa0 \xa0 \xa0username = user\n, \xa0 \xa0 \xa0 \xa0received_on = current_date()\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"7.\xa0Make the constraint transitional:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Transition Table"}),(0,r.jsx)(t.td,{children:"CHAT_MESSAGE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Fire on Insert"}),(0,r.jsx)(t.td,{children:"Always"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Fire on Update"}),(0,r.jsx)(t.td,{children:"Never"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Fire on Delete"}),(0,r.jsx)(t.td,{children:"Never"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"\xa0"}),"\n",(0,r.jsx)(t.p,{children:"8.\xa0Check the constraint. Save changes."}),"\n",(0,r.jsx)(t.h2,{id:"defining-the-job",children:"Defining the job"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Define a job NEW_CHAT_MESSAGE that will receive a text message as an input parameter set, insert the text message into the CHAT_MESSAGE table, and return the message along with the current user name and current time."}),"\n",(0,r.jsxs)(t.p,{children:["2.\xa0Define an Input Parameter Set named ",(0,r.jsx)(t.strong,{children:"CHAT_MESSAGE_IN"})," with the following elements:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Name"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Data Type"})})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MESSAGE_TEXT"}),(0,r.jsx)(t.td,{children:"NCLOB"})]})})]}),"\n",(0,r.jsxs)(t.p,{children:["3.\xa0Define an Input Parameter Set named ",(0,r.jsx)(t.strong,{children:"CHAT_MESSAGE_OUT"})," with the following elements:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Name"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Data Type"})})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"USERNAME"}),(0,r.jsx)(t.td,{children:"NVARCHAR2(50)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"MESSAGE_TEXT"}),(0,r.jsx)(t.td,{children:"NCLOB"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RECEIVED_ON"}),(0,r.jsx)(t.td,{children:"DATETIME"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Define a SQL task containing the following statements, and include it in the job:"}),"\n",(0,r.jsx)(t.p,{children:"Insert a message in CHAT_MESSAGE table\xa0:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"INSERT INTO \xa0 chat_message (message_text)\nSELECT \xa0 \xa0 \xa0 \xa0message_text\nFROM \xa0 \xa0 \xa0 \xa0 \xa0chat_message_in\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Output the message along with the current user name and current time\xa0:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"INSERT INTO chat_message_out(\n \xa0 \xa0 \xa0 \xa0 \xa0 username\n, \xa0 \xa0 \xa0 \xa0 \xa0 message_text\n, \xa0 \xa0 \xa0 \xa0 \xa0 received_on\n)\nSELECT \xa0 \xa0 \xa0user\n, \xa0 \xa0 \xa0 \xa0 \xa0 message_text\n, \xa0 \xa0 \xa0 \xa0 \xa0 current_date()\nFROM \xa0 \xa0 \xa0 \xa0chat_message_in\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0Save changes. Check the job."}),"\n",(0,r.jsxs)(t.p,{children:["6.\xa0Configure and start a rule service for your application on port ",(0,r.jsx)(t.strong,{children:"9997"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"creating-the-websocket-service-for-receiving-messages",children:"Creating the WebSocket service for receiving messages"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0In Service Definer, create a connection for your application that uses a Rules Service on port 9997."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Choose Define, SQL Statements and add a statement that will insert received text messages into the CHAT_MESSAGE table."}),"\n",(0,r.jsx)(t.p,{children:"Statement Name = NEW_CHAT_MESSAGE"}),"\n",(0,r.jsx)(t.p,{children:"Statement:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:'INVOKE \xa0 BatchRunner.NEW_CHAT_MESSAGE WITH\nSELECT \xa0 :message "MESSAGE_TEXT"\n, \xa0 \xa0 \xa0 \xa0\'true\' \xa0 \xa0 "-quiet"\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Create a new Structure to receive the output of the statement. Choose Derive Structure from Tools menu. Specify:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Return Structure Name"}),(0,r.jsx)(t.td,{children:"ChatResponseDerive"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Structure from SQL Statement"}),(0,r.jsx)(t.td,{children:"Yes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SQL Statement Name"}),(0,r.jsx)(t.td,{children:"NEW_CHAT_MESSAGE"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"\xa0"}),"\n",(0,r.jsx)(t.p,{children:"4.\xa0Choose Services, New WebSocket Service from the menu."}),"\n",(0,r.jsx)(t.p,{children:"5.\xa0Provide a name for the service, e.g. ChatService. Press OK. Service Definer generates a WebSocket service."}),"\n",(0,r.jsx)(t.p,{children:"6.\xa0Provide an implementation for the onMessage method based on the NEW_CHAT_MESSAGE statement."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-language-java",children:'ChatResponse response = (ChatResponse)sql( ChatResponse.class, "NEW_CHAT_MESSAGE" , new Object[]{ message } );\n\n//transform ChatResponse  structure to json string\njavax.xml.bind.JAXBContext jc = javax.xml.bind.JAXBContext.newInstance(new Class[]{ChatResponse.class}, null);\njavax.xml.bind.Marshaller jm = jc.createMarshaller();\njm.setProperty(org.eclipse.persistence.jaxb.MarshallerProperties.MEDIA_TYPE, "application/json");\njm.setProperty(org.eclipse.persistence.jaxb.MarshallerProperties.JSON_INCLUDE_ROOT, new Boolean(true));\njava.io.StringWriter sw = new java.io.StringWriter();\njm.marshal(response, sw);\n\n//broadcast resut to all active clients\nbroadcast(sw.toString());\n'})}),"\n",(0,r.jsx)(t.p,{children:"7.\xa0Click the Connections tab and specify the connection that you want the service to use. Save."}),"\n",(0,r.jsx)(t.p,{children:"8.\xa0Click the SQL Statements tab and specify the statement with the name NEW_CHAT_MESSAGE. Save."}),"\n",(0,r.jsx)(t.p,{children:"9.\xa0Click the Servers tab and specify the server where you want to publish the service, for example, the default server called 'Default'. Save."}),"\n",(0,r.jsx)(t.p,{children:"10.To make testing of your service easier, specify that the WebServer socket does not require authentication. In the Annotations field of the server add:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'@AuthNone(user="(your user name)", password="(your passwword)")\n\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'@AuthNone(user="USoftUser", password="USoftPassword")\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"where the combination USoftUser, USoftPassword is defined as valid credentials in Authorizer."}),"\n",(0,r.jsx)(t.h2,{id:"publishing-the-solution",children:"Publishing the solution"}),"\n",(0,r.jsx)(t.p,{children:"1.\xa0Choose Define, Servers, and retrieve the record of the Server where you expose the service."}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0With input focus on this record, choose Publish, Publish and Restart from the menu."}),"\n",(0,r.jsx)(t.h2,{id:"creating-a-test-client-and-testing-the-implementation",children:"Creating a test client and testing the implementation"}),"\n",(0,r.jsx)(t.p,{children:"To test your WebSocket service you need a client application. You can download an existing test tool that supports native WebSockets or create your own \xa0html/JavaScript client. Following is an unpainted html/JavaScript web page that you can use to test the ChatService WebSocket service."}),"\n",(0,r.jsxs)(t.p,{children:["1.\xa0Save following html/JavaScript code as ",(0,r.jsx)(t.strong,{children:"chatApp.html"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n<head>\n    <title>WebsSockets</title>\n</head>\n<body>\n    <div id="chatControl">\n        <input id="message" placeholder="Type your message">\n        <button id="send">Send</button>\n    </div>\n    <ul id="chat" style="list-style-type: none"></ul>\n\n   <script>\n//Establish the WebSocket connection and set up event handlers\nws = new WebSocket("ws://localhost:8090/ChatService");\nws.onmessage = msg => updateChat(msg);\nws.onclose = () => alert("WebSocket connection closed");\n\n// Add event listeners to button and input field\ndocument.getElementById("send").addEventListener("click", function (e) {\n   sendAndClear(document.getElementById("message").value)\n});\n\ndocument.getElementById("message").addEventListener("keypress", function (e) {\n    if (e.keyCode === 13) { // Send message if enter is pressed in input field\n        sendAndClear(e.target.value);\n    }\n});\n\nfunction sendAndClear(message) {\n    if (message !== "") {\n        ws.send(message);\n        document.getElementById("message").value = "";\n    }\n}\n\nfunction updateChat(msg) { // Update chat-panel and list of connected users\n    var data = JSON.parse(msg.data);\n   var li = document.createElement("li");\n   li.innerHTML = \'<div style="font-size: 11px;color: gray;">User \' + data.ChatResponse.USERNAME + \' on \' + data.ChatResponse.RECEIVED_ON + \'</div>\' + data.ChatResponse.MESSAGE_TEXT;\n   document.getElementById("chat").appendChild(li); \n}\n   <\/script>   \n</body>\n</html>\n'})}),"\n",(0,r.jsx)(t.p,{children:"2.\xa0Change the web socket (ws) address in following line if you use a different port number"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'ws = new WebSocket("ws://localhost:8090/ChatService");\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"3.\xa0Open chatApp.html in a browser and send messages via the edit box provided in the page. Both browsers receive all messages."}),"\n",(0,r.jsx)(t.p,{children:"Open in a Client/Server application the Chat Message info window. Query the window and see that messages are saved in the database."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);