"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[1274],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(96540);const i={},s=a.createContext(i);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:n},e.children)}},62341:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/cde672da-679f-4ad8-a6ae-7c145d808492-69fb581f52b98ec89737600c9b159590.png"},94501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Modeller_and_Rules_Engine/Tables_columns_and_relationships/What_is_a_column","title":"What is a column?","description":"A column is the implementation of an attribute that is relevant for distinguishing or describing instances of an entity.","source":"@site/docs/Modeller_and_Rules_Engine/Tables_columns_and_relationships/What_is_a_column.md","sourceDirName":"Modeller_and_Rules_Engine/Tables_columns_and_relationships","slug":"/Modeller_and_Rules_Engine/Tables_columns_and_relationships/What_is_a_column","permalink":"/udocs/Modeller_and_Rules_Engine/Tables_columns_and_relationships/What_is_a_column","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"What_is_a_column"},"sidebar":"sidebar","previous":{"title":"What is an index?","permalink":"/udocs/Modeller_and_Rules_Engine/Tables_columns_and_relationships/What_is_an_index"},"next":{"title":"Virtual columns (joined columns)","permalink":"/udocs/Modeller_and_Rules_Engine/Tables_columns_and_relationships/Virtual_columns_joined_columns"}}');var i=t(74848),s=t(28453);const l={id:"What_is_a_column"},o="What is a column?",r={},c=[{value:"Columns implement attributes",id:"columns-implement-attributes",level:3},{value:"Attribute values are stored in database columns",id:"attribute-values-are-stored-in-database-columns",level:3},{value:"USoft generates database columns",id:"usoft-generates-database-columns",level:3},{value:"USoft generates fields in application interfaces",id:"usoft-generates-fields-in-application-interfaces",level:3}];function d(e){const n={em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"what-is-a-column",children:"What is a column?"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"column"})," is the implementation of an attribute that is relevant for distinguishing or describing instances of an entity."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Examples"})}),"\n",(0,i.jsx)(n.p,{children:"A numberplate is an attribute of the CAR entity that allows you to distinguish individual vehicles."}),"\n",(0,i.jsx)(n.p,{children:"A colour is an attribute of the CAR entity that allows you to describe an aspect of an individual vehicle."}),"\n",(0,i.jsx)(n.h3,{id:"columns-implement-attributes",children:"Columns implement attributes"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"attribute"})," is an abstraction that allows you to identify, describe and classify instances of an entity on the basis of assigning an attribute value, and so describing a relevant characteristic of that instance."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example"})}),"\n",(0,i.jsx)(n.p,{children:'An individual vehicle could be identified, described and classified as an instance of the "Car" entity by assigning the attribute values of "RR-847-PA" to the attribute Numberplate, "4" to the attribute "Number of wheels", "AUDI A6" to the attribute Car Model, and "Yes" to the attribute "Primarily used for the transport of people" :'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(62341).A+"",width:"457",height:"120"})}),"\n",(0,i.jsx)(n.h3,{id:"attribute-values-are-stored-in-database-columns",children:"Attribute values are stored in database columns"}),"\n",(0,i.jsx)(n.p,{children:"A column is the part of a table where attribute values for a specific attribute are stored of the entity represented by the table. For example, the fact that a car with numberplace RR-847-PA is of the car model AUDI A6 is stored in the CAR table in the CAR_MODEL column of the record with numberplate RR-847-PA:"}),"\n",(0,i.jsxs)(n.p,{children:["|",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.strong,{children:"Table: CAR"})}),"|\n|--------|--------|\n|",(0,i.jsx)(n.strong,{children:"Numberplate"}),"|",(0,i.jsx)(n.strong,{children:"Car model"}),"|\n|134-PTB-04|MERCEDES C COUPE|\n|RR-847-PA|AUDI A6 |"]}),"\n",(0,i.jsx)(n.p,{children:"Only non-trivial attribute values are stored in a practical implementation. For a car, the fact that an instance has 4 wheels and is primarily used for transporting people is not stored in a column because it applies by definition for all car instances. The numberplate is likely to identify the instance, and is therefore stored in a column of the CAR database table called NUMBERPLATE. The car model is also likely a non-trivial characteristic of a car, and is therefore likely to be stored in a column called CAR_MODEL."}),"\n",(0,i.jsx)(n.h3,{id:"usoft-generates-database-columns",children:"USoft generates database columns"}),"\n",(0,i.jsx)(n.p,{children:"On the basis of Column and Domain definitions that you specify in USoft Definer, USoft generates database columns automatically in the RDBMS as part of (re)generating a database table."}),"\n",(0,i.jsx)(n.p,{children:"Each column must have a name that uniquely identifies that column within the table. A column name is spelled all-uppercaps with underscores (rather than spaces or hyphens) as separators, as in FIRST_NAME."}),"\n",(0,i.jsx)(n.p,{children:"Each column is based on a domain. The domain characterises the set of values that are allowed as input for the column."}),"\n",(0,i.jsx)(n.p,{children:"Some of the attributes that you define for Columns and Domains are used when (re)generating the column in the RDBMS. The most important are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The name of the table."}),"\n",(0,i.jsx)(n.li,{children:"The name of each of the columns."}),"\n",(0,i.jsx)(n.li,{children:"The datatype of each of the columns."}),"\n",(0,i.jsx)(n.li,{children:"The maximum length (if applicable) of each of the columns."}),"\n",(0,i.jsx)(n.li,{children:"The fact that a column is Mandatory (= must have a value for each instance) or not."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"usoft-generates-fields-in-application-interfaces",children:"USoft generates fields in application interfaces"}),"\n",(0,i.jsx)(n.p,{children:"Some of the attributes that you define for Columns and Domains are used by USoft to generate application interfaces automatically."}),"\n",(0,i.jsx)(n.p,{children:"Generated C/S and web interfaces allow human end users to interact with the tables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In a default generated C/S application, each input field in a window corresponds with a column."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In a default generated Web application, each input field on a web page corresponds with a column."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Thus,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A column's Prompt attribute determines which text is displayed as a prompt next to a field for the column."}),"\n",(0,i.jsx)(n.li,{children:"A column's Position attribute determines in which order a field for the column appears in the window or on the page, relative to fields for other columns in the table."}),"\n",(0,i.jsx)(n.li,{children:"A domain's Display Type determines what sort of visible control is used to display fields for columns based on the domain, for example, a regular text box, a check box, or a dropdown list box."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);