"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[70146],{2585:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Services/Event_processing/Event_handling_Example_1_Job_that_processes_queued_input_events","title":"Event handling Example 1: Job that processes queued input events","description":"The following step-by-step instructions are for creating a job that processes queued input events. In the example, these are reservation events for a Travel Agency model.","source":"@site/docs/Services/Event_processing/Event_handling_Example_1_Job_that_processes_queued_input_events.md","sourceDirName":"Services/Event_processing","slug":"/Services/Event_processing/Event_handling_Example_1_Job_that_processes_queued_input_events","permalink":"/udocs/Services/Event_processing/Event_handling_Example_1_Job_that_processes_queued_input_events","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Event_handling_Example_1_Job_that_processes_queued_input_events"},"sidebar":"sidebar","previous":{"title":"Handling events","permalink":"/udocs/Services/Event_processing/Handling_events"},"next":{"title":"Event handling Example 2: Queue service that processes input events","permalink":"/udocs/Services/Event_processing/Event_handling_Example_2_Queue_service_that_processes_input_events"}}');var r=n(74848),a=n(28453);const i={id:"Event_handling_Example_1_Job_that_processes_queued_input_events"},o="Event handling Example 1: Job that processes queued input events",d={},l=[{value:"Creating a job that processes queued events",id:"creating-a-job-that-processes-queued-events",level:2},{value:"Testing the implementation",id:"testing-the-implementation",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"event-handling-example-1-job-that-processes-queued-input-events",children:"Event handling Example 1: Job that processes queued input events"})}),"\n",(0,r.jsx)(s.p,{children:"The following step-by-step instructions are for creating a job that processes queued input events. In the example, these are reservation events for a Travel Agency model."}),"\n",(0,r.jsx)(s.p,{children:"The event data has already been stored in a queue table as an XML message. To make things easier, the event data in this example is in USoft's XML.Export format as applied to the Travel Agency's RESERVATION table."}),"\n",(0,r.jsx)(s.p,{children:"The queue table is called INPUT_QUEUE_RESERVATION. To define this queue table, see Example: REST service that receives events asynchronously."}),"\n",(0,r.jsx)(s.h2,{id:"creating-a-job-that-processes-queued-events",children:"Creating a job that processes queued events"}),"\n",(0,r.jsx)(s.p,{children:"Processing a queue is a customised activity. It must operate row-by-row. The ID field is used as a handle to identify each queue message to be processed. For debugging purposes, when a processing action fails, it is useful to keep error information in the queue table. This gives you the possibility to see what went wrong with a message and reproduce the problem. \xa0To create a job that processes queued events:"}),"\n",(0,r.jsx)(s.p,{children:"1.\xa0Define a SQL Task that starts collecting errors by executing:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT \xa0 RulesEngine.StartCatchingErrors('Yes')\n\n"})}),"\n",(0,r.jsx)(s.p,{children:"Define this SQL Task as a Job Task in a new job called PROCESS_QUEUE_RESERVATION."}),"\n",(0,r.jsx)(s.p,{children:"2.\xa0Define another SQL Task that processes the next item in the queue by executing:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:'INVOKE  xml.import WITH\nSELECT  fm.xml_message           "xmldocument"\nFROM    in_process_message       in_params\n,       input_queue_reservation  fm\nWHERE   fm.id = in_params.message_id\n'})}),"\n",(0,r.jsx)(s.p,{children:"Add this SQL Task as a Job Task to the PROCESS_QUEUE_RESERVATION job."}),"\n",(0,r.jsx)(s.p,{children:"3.\xa0Define another SQL Task that catches any errors encountered when the most recent item was processed."}),"\n",(0,r.jsx)(s.p,{children:"Do this by first creating an External Set named IN_PROCESS_MESSAGE that will store any caught errors:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Element Name"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Data Type"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MESSAGE_ID"}),(0,r.jsx)(s.td,{children:"NUMBER"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"ERROR_MSG"}),(0,r.jsx)(s.td,{children:"NCLOB"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Define this External Set as being the Input Parameter Set of the PROCESS_QUEUE_RESERVATION job. Define a new SQL Task that executes:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"UPDATE    in_process_message\nSET       error_msg = RulesEngine.GetLastCaughtErrors()\n"})}),"\n",(0,r.jsx)(s.p,{children:"Add this SQL Task as a Job Task to the PROCESS_QUEUE_RESERVATION job."}),"\n",(0,r.jsx)(s.p,{children:"4.\xa0Define a SQL Task that stops collecting errors by executing:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"SELECT \xa0 RulesEngine.StopCatchingErrors()\n\n"})}),"\n",(0,r.jsx)(s.p,{children:"Add this SQL Task as a Job Task to the PROCESS_QUEUE_RESERVATION job."}),"\n",(0,r.jsx)(s.p,{children:"5.\xa0Define a SQL Task that gets the message status:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:"UPDATE     input_queue_reservation\nSET \n(   \n     status\n,    error_message\n) = \n(\n      SELECT     DECODE( error_msg, null, 'DONE', 'ERROR' )\n      ,          error_msg\n      FROM       in_process_message\n)\nWHERE id = \n(\n      SELECT     message_id \n      FROM       in_process_message\n)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Add this SQL Task as a Job Task to the PROCESS_QUEUE_RESERVATION job."}),"\n",(0,r.jsxs)(s.p,{children:["6.\xa0Set ",(0,r.jsx)(s.strong,{children:"Commit Type"})," and ",(0,r.jsx)(s.strong,{children:"Abort Mode"})," attributes for the individual Job Tasks as follows:"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Job Task Executes"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Commit Type"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Abort Mode"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"SELECT \xa0RulesEngine.StartCatchingErrors('Yes')"}),(0,r.jsx)(s.td,{children:"Task"}),(0,r.jsx)(s.td,{children:"Abort Job On Error"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"INVOKE \xa0xml.import"}),(0,r.jsx)(s.td,{children:"Task"}),(0,r.jsx)(s.td,{children:"Abort Task On Error"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"UPDATE \xa0in_process_message"}),(0,r.jsx)(s.td,{children:"Task"}),(0,r.jsx)(s.td,{children:"Abort Task On Error"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"SELECT \xa0RulesEngine.StopCatchingErrors()"}),(0,r.jsx)(s.td,{children:"Task"}),(0,r.jsx)(s.td,{children:"Abort Job On Error"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"UPDATE \xa0input_queue_reservation"}),(0,r.jsx)(s.td,{children:"Task"}),(0,r.jsx)(s.td,{children:"Abort Job On Error"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"7.\xa0Validate the job."}),"\n",(0,r.jsx)(s.h2,{id:"testing-the-implementation",children:"Testing the implementation"}),"\n",(0,r.jsx)(s.p,{children:"1.\xa0Start the default client/server application."}),"\n",(0,r.jsx)(s.p,{children:"2.\xa0Add a small number of event messages in the queue table with:"}),"\n",(0,r.jsxs)(s.p,{children:["Status: ",(0,r.jsx)(s.strong,{children:"NONE"})]}),"\n",(0,r.jsx)(s.p,{children:"XML Message: (A message in USoft's XML.Export format as applied to the RESERVATION table, for example:)"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-xml",children:'<Reservations>\n \xa0 <RESERVATION SCHEDTOUR_ID="53" MADE_BY="14" DEALT_WITH_BY="1"/>\n</Reservations>\n\n'})}),"\n",(0,r.jsx)(s.p,{children:"3.\xa0Open SQL Command from the Tools menu and execute:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",children:'INVOKE  BatchRunner.PROCESS_QUEUE_RESERVATION WITH \nSELECT  1     "MESSAGE_ID"\n,      \'True\' "-quiet"\n'})}),"\n",(0,r.jsx)(s.p,{children:"making sure that 1 is an ID in the INPUT_QUEUE_RESERVATION table."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(96540);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);