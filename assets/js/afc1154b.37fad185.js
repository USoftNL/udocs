"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[58658],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},52239:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Modeller_and_Rules_Engine/Supertypes_and_subtypes/Constraints_on_supertypes_and_subtypes","title":"Constraints on supertypes and subtypes","description":"When you write constraint statements on a supertype table, you can refer to:","source":"@site/docs/Modeller_and_Rules_Engine/Supertypes_and_subtypes/Constraints_on_supertypes_and_subtypes.md","sourceDirName":"Modeller_and_Rules_Engine/Supertypes_and_subtypes","slug":"/Modeller_and_Rules_Engine/Supertypes_and_subtypes/Constraints_on_supertypes_and_subtypes","permalink":"/udocs/Modeller_and_Rules_Engine/Supertypes_and_subtypes/Constraints_on_supertypes_and_subtypes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Constraints_on_supertypes_and_subtypes"},"sidebar":"sidebar","previous":{"title":"Relationship Inheritance from supertype to subtype (RELATE)","permalink":"/udocs/Modeller_and_Rules_Engine/Supertypes_and_subtypes/Relationship_Inheritance_from_supertype_to_subtype_RELATE"},"next":{"title":"Transitional constraints on supertypes and subtypes","permalink":"/udocs/Modeller_and_Rules_Engine/Supertypes_and_subtypes/Transitional_constraints_on_supertypes_and_subtypes"}}');var r=s(74848),a=s(28453);const o={id:"Constraints_on_supertypes_and_subtypes"},i="Constraints on supertypes and subtypes",l={},p=[];function u(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"constraints-on-supertypes-and-subtypes",children:"Constraints on supertypes and subtypes"})}),"\n",(0,r.jsx)(n.p,{children:"When you write constraint statements on a supertype table, you can refer to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All supertype columns."}),"\n",(0,r.jsx)(n.li,{children:"All subtype indicators of the constellation, since these are attributes of the supertype."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Constraints on supertypes are automatically enforced on all subtype manipulations of that supertype."}),"\n",(0,r.jsx)(n.p,{children:"When you write constraints statements on a subtype table, you can refer to all of the following without joining with another table:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All supertype columns."}),"\n",(0,r.jsx)(n.li,{children:"All columns of the subtype table."}),"\n",(0,r.jsx)(n.li,{children:"All subtype indicators of the constellation, since these are attributes of the supertype."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In the following example you only need a single table name in your statement."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 1"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose Persons can be Guides or Office Staff (subtype set Occupation), and they can be Male or Female (subtype set Gender)."}),"\n",(0,r.jsx)(n.p,{children:"Maternity leave is not possible for guides, only for office staff. This business rule can be enforced by a restrictive constraint with the following statement:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0' '\nFROM \xa0 \xa0 \xa0female\nWHERE \xa0 \xa0 maternity_leave = 'Y'\nAND \xa0 \xa0 \xa0 guide = 'Y'\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, Female is a subtype table, Maternity_leave is a column of this subtype table, and Guide is a subtype indicator of the constellation."}),"\n",(0,r.jsx)(n.p,{children:"In the following example, you need to join tables only because the business rule refers to subtype columns in different subtype tables:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 2"})}),"\n",(0,r.jsx)(n.p,{children:"Office staff can only get maternity leave if a number of conditions are met. These conditions refer to office staff attributes such as the person's hire date."}),"\n",(0,r.jsx)(n.p,{children:"This business rule can be enforced by a constraint with the following statement:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0' '\nFROM \xa0 \xa0 \xa0female f\n, \xa0 \xa0 \xa0 \xa0 staff s\nWHERE \xa0 \xa0 f.primary_key = s.primary_key\nAND \xa0 \xa0 \xa0 f.maternity_leave = 'Y'\nAND \xa0 \xa0 \xa0 s.hire_date = condition\nAND \xa0 \xa0 \xa0 ...\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);