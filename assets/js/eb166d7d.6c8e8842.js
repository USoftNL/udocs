"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[53520],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var t=s(96540);const i={},o=t.createContext(i);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:n},e.children)}},77397:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Repositories/Blend_directives/pccopyof","title":"pc:copy-of","description":"This article is about the pc:copy-of Blend directive.","source":"@site/docs/Repositories/Blend_directives/pccopyof.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pccopyof","permalink":"/udocs/Repositories/Blend_directives/pccopyof","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pccopyof"},"sidebar":"sidebar","previous":{"title":"pc:ConvertFormatAndCulture","permalink":"/udocs/Repositories/Blend_directives/pcConvertFormatAndCulture"},"next":{"title":"pc:CopyDirectory","permalink":"/udocs/Repositories/Blend_directives/pcCopyDirectory"}}');var i=s(74848),o=s(28453);const c={id:"pccopyof"},r="pc",d={},l=[{value:"<strong>pc</strong>",id:"pc-1",level:2},{value:"Attributes",id:"attributes",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"pc",children:["pc",":copy-of"]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This article is about the ",(0,i.jsxs)(n.strong,{children:["pc",":copy-of"]}),(0,i.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"pc-1",children:(0,i.jsxs)(n.strong,{children:["pc",":copy-of"]})}),"\n",(0,i.jsx)(n.p,{children:"Evaluates an XPath expression and (if the result is a node set) returns a deep copy of all the nodes in the resulting node set. The result can be serialised as output XML or passed to a different directive (Example 3)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Syntax"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<pc:copy-of\n     select="*xpath >> (any)*" />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The required ",(0,i.jsx)(n.strong,{children:"select"})," attribute is the XPath expression to be evaluated."]}),"\n",(0,i.jsx)(n.p,{children:'The intended use is that the result is a node set. A "deep copy" of this resulting node set is returned. Such a "deep copy" includes all the nodes in the node set and all of these nodes\' descendent nodes, attribute nodes and namespace nodes.'}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"xpath"})," evaluates to a string then this string is returned. If it evaluates to a number or boolean, this value is converted to a string and then returned. In this respect, pc",":copy-of"," behaves in the same way as pc",":value","\u2011of."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.em,{children:"xpath"})," evaluates to an XML document, then this entire document is copied to the result tree:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<pc:assign-nodeset envxml="{files:XmlFile(\'env.xml\')}"/>\n<pc:copy-of select="$envxml"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 1"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<pc:copy-of select="$myvariable"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 2"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<pc:copy-of select=\"strings:ReplaceVariables($infile, $replacements, 'name', 'value', '')\"/>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 3"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<pc:assign-nodeset mydialog="{.}">\n   <Form w="200" h="50" >\n      <Title>An empty dialog</Title>\n   </Form>\n</pc:assign-nodeset>      \n<pc:Dialog><pc:copy-of select="$mydialog"/></pc:Dialog>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(n.p,{children:["The pc",":copy-of"," directive supports the ",(0,i.jsxs)(n.strong,{children:["pc",":if"]})," attribute."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);