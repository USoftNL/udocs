"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[11958],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},96410:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>T,frontMatter:()=>o,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"Extensions/XML_internal_component/XMLJSON2XML","title":"XML.JSON2XML","description":"This article is about the JSON2XML method of the XML internal component.","source":"@site/docs/Extensions/XML_internal_component/XMLJSON2XML.md","sourceDirName":"Extensions/XML_internal_component","slug":"/Extensions/XML_internal_component/XMLJSON2XML","permalink":"/udocs/Extensions/XML_internal_component/XMLJSON2XML","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"XMLJSON2XML"},"sidebar":"sidebar","previous":{"title":"XML.Import","permalink":"/udocs/Extensions/XML_internal_component/XMLImport"},"next":{"title":"XML.MultiExportTables","permalink":"/udocs/Extensions/XML_internal_component/XMLMultiExportTables"}}');var i=t(74848),r=t(28453);const o={id:"XMLJSON2XML"},l="XML.JSON2XML",a={},m=[{value:"<strong>XML.JSON2XML</strong>",id:"xmljson2xml-1",level:2},{value:"Interaction with file system",id:"interaction-with-file-system",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"xmljson2xml",children:"XML.JSON2XML"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This article is about the ",(0,i.jsx)(n.strong,{children:"JSON2XML"})," method of the ",(0,i.jsx)(n.a,{href:"/Extensions/XML_internal_component",children:"XML internal component"}),".\nSee also the ",(0,i.jsx)(n.a,{href:"/Repositories/Data_flow_control_with_XML_or_JSON",children:"Data flow control with XML or JSON"})," section."]})}),"\n",(0,i.jsx)(n.h2,{id:"xmljson2xml-1",children:(0,i.jsx)(n.strong,{children:"XML.JSON2XML"})}),"\n",(0,i.jsx)(n.p,{children:"Converts JSON to XML. Describes the structure and content of a JSON object as an XML document."}),"\n",(0,i.jsx)(n.p,{children:"Returns the XML document."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Syntax"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INVOKE  XML.JSON2XML WITH\nSELECT  *json-object*\n,       *mode*\n...\n\n*mode*  ::=  { '' | 'COMPACT' | 'FULL' }\n\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The required ",(0,i.jsx)(n.em,{children:"json-object"})," must be a valid JSON object."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can pass ",(0,i.jsx)(n.em,{children:"json-object"})," as a string literal (as in the Examples).\nYou can alternatively select ",(0,i.jsx)(n.em,{children:"json-object"}),' from a database column, in which case you need a FROM clause.\nYou can also read from file and write to file. For an example, see the "Interaction with file system\u201d section below.']})}),"\n",(0,i.jsxs)(n.p,{children:["The required ",(0,i.jsx)(n.em,{children:"mode"})," is either a quoted empty string, or the quoted string value 'COMPACT', or the quoted string value 'FULL'. The empty string '' is equivalent to 'COMPACT':"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For the empty-string or 'COMPACT' mode, see Example 1."}),"\n",(0,i.jsx)(n.li,{children:"For the 'FULL' mode, which yields a slightly more verbose result, see Example 2."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example input data"})}),"\n",(0,i.jsxs)(n.p,{children:["The 2 Examples below use this ",(0,i.jsx)(n.em,{children:"input-data:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-language-json",children:'{\n  "TOUR": [\n    {\n      "TOUR_ID": 50,\n      "DESTINATION": "PARAGUAY",\n      "TOUR_TYPE": "SOUTH AM. SPECIAL",\n      "START_DATE": "2020-05-11T00:00:00",\n      "RETURN_DATE": "2020-06-04T00:00:00",\n      "PRICE": 120,\n      "MAX_PART": 10,\n      "GUIDE": 5\n    },\n    {\n      "TOUR_ID": 51,\n      "DESTINATION": "AUSTRALIA",\n      "TOUR_TYPE": "ISLAND SUNTANNER",\n      "START_DATE": "2019-05-14T00:00:00",\n      "RETURN_DATE": "2019-05-25T00:00:00",\n      "PRICE": 122,\n      "MAX_PART": 10,\n      "GUIDE": null\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 1"})}),"\n",(0,i.jsxs)(n.p,{children:["This example calls the empty-string or 'COMPACT' ",(0,i.jsx)(n.em,{children:"mode"})," (the default):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INVOKE  XML.JSON2XML WITH\nSELECT  '*input-data*'\n,       ''\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the input is in the USoft JSON format, table names and column names appear as XML ",(0,i.jsx)(n.strong,{children:"element"})," names:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<root type="object">\n  <TOUR type="array">\n    <element type="object">\n      <TOUR_ID type="number">50</TOUR_ID>\n      <DESTINATION type="string">PARAGUAY</DESTINATION>\n      <TOUR_TYPE type="string">SOUTH AM. SPECIAL</TOUR_TYPE>\n      <START_DATE type="string">2020-05-11T00:00:00</START_DATE>\n      <RETURN_DATE type="string">2020-06-04T00:00:00</RETURN_DATE>\n      <PRICE type="number">120</PRICE>\n      <MAX_PART type="number">10</MAX_PART>\n      <GUIDE type="number">5</GUIDE>\n    </element>\n    <element type="object">\n      <TOUR_ID type="number">51</TOUR_ID>\n      <DESTINATION type="string">AUSTRALIA</DESTINATION>\n      <TOUR_TYPE type="string">ISLAND SUNTANNER</TOUR_TYPE>\n      <START_DATE type="string">2019-05-14T00:00:00</START_DATE>\n      <RETURN_DATE type="string">2019-05-25T00:00:00</RETURN_DATE>\n      <PRICE type="number">122</PRICE>\n      <MAX_PART type="number">10</MAX_PART>\n      <GUIDE type="null"/>\n    </element>\n  </TOUR>\n</root>\n\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 2"})}),"\n",(0,i.jsxs)(n.p,{children:["This example calls the 'FULL' ",(0,i.jsx)(n.em,{children:"mode"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INVOKE  XML.JSON2XML WITH\nSELECT  '*input-data*'\n,       'FULL'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the input is in the USoft JSON format, table names and column names appear as XML ",(0,i.jsx)(n.strong,{children:"attribute"})," names:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<root type="object">\n  <item name="TOUR" type="array">\n    <element type="object">\n      <item name="TOUR_ID" type="number">50</item>\n      <item name="DESTINATION" type="string">PARAGUAY</item>\n      <item name="TOUR_TYPE" type="string">SOUTH AM. SPECIAL</item>\n      <item name="START_DATE" type="string">2020-05-11T00:00:00</item>\n      <item name="RETURN_DATE" type="string">2020-06-04T00:00:00</item>\n      <item name="PRICE" type="number">120</item>\n      <item name="MAX_PART" type="number">10</item>\n      <item name="GUIDE" type="number">5</item>\n    </element>\n    <element type="object">\n      <item name="TOUR_ID" type="number">51</item>\n      <item name="DESTINATION" type="string">AUSTRALIA</item>\n      <item name="TOUR_TYPE" type="string">ISLAND SUNTANNER</item>\n      <item name="START_DATE" type="string">2019-05-14T00:00:00</item>\n      <item name="RETURN_DATE" type="string">2019-05-25T00:00:00</item>\n      <item name="PRICE" type="number">122</item>\n      <item name="MAX_PART" type="number">10</item>\n      <item name="GUIDE" type="null"/>\n    </element>\n  </item>\n</root>\n\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"interaction-with-file-system",children:"Interaction with file system"}),"\n",(0,i.jsx)(n.p,{children:"The following example script reads the JSON input from file and writes the XML result back to file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INVOKE   USFile.Open WITH \nSELECT   'ToursXML'\n,        'c:\\temp\\tours.xml'\n,        'WRITE'\n;\n\nINVOKE USFile.Write WITH\nSELECT\t'USFile.ToursXML'\n,  (\n     INVOKE  XML.JSON2XML WITH\n     SELECT\n       (  INVOKE USFile.ReadTextFile WITH\n          SELECT 'c:\\temp\\tours.json' \n       )\n     , '' \n    )\n;\n\nINVOKE   USFile.Close WITH \nSELECT   'ToursXML'\n;\n"})}),"\n",(0,i.jsx)(n.p,{children:"\xa0"})]})}function T(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);