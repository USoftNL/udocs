"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[7733],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(96540);const s={},l=n.createContext(s);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(l.Provider,{value:t},e.children)}},76937:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Repositories/Blend_directives/pcReadFiles","title":"pc:ReadFiles","description":"This article is about the pc:ReadFiles Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcReadFiles.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcReadFiles","permalink":"/udocs/Repositories/Blend_directives/pcReadFiles","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcReadFiles"},"sidebar":"sidebar","previous":{"title":"pc:ReadFile","permalink":"/udocs/Repositories/Blend_directives/pcReadFile"},"next":{"title":"pc:ReadXmlFile","permalink":"/udocs/Repositories/Blend_directives/pcReadXmlFile"}}');var s=i(74848),l=i(28453);const r={id:"pcReadFiles"},a="pc",c={},d=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsxs)(t.h1,{id:"pc",children:["pc",":ReadFiles"]})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This article is about the ",(0,s.jsxs)(t.strong,{children:["pc",":ReadFiles"]}),(0,s.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"pc-1",children:(0,s.jsxs)(t.strong,{children:["pc",":ReadFiles"]})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the content of a specified set of files, and returns this content as a set of XML text nodes."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Syntax"}),"\n\xa0"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'<pc:ReadFiles  filepath="*directory-path*" disable-output-escaping="*disable*">\n     <file filepath="*file-path*" />\n     ...\n</pc:ReadFiles>\n\n*disable*  ::=  { yes | no }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In each of the file child elements, the required ",(0,s.jsx)(t.strong,{children:"filepath"})," points to the file to be read. If ",(0,s.jsx)(t.strong,{children:"filepath"})," is a relative filepath, the path is relative to the current working directory."]}),"\n",(0,s.jsxs)(t.p,{children:["In the pc",":ReadFiles"," parent element, ",(0,s.jsx)(t.strong,{children:"filepath"})," is optional. In this position, ",(0,s.jsx)(t.strong,{children:"filepath"})," must point to a directory rather than to a file, and the ",(0,s.jsx)(t.strong,{children:"filepath"})," values in the child nodes must be relative paths. The latter are interpreted relative to the directory that filepath in the parent element points to."]}),"\n",(0,s.jsx)(t.p,{children:"The name file used for the child elements could be any valid XML element name. This type of element is only a pretext for getting a filepath attribute where you can specify one of the files to be read."}),"\n",(0,s.jsxs)(t.p,{children:['If you pass disable-output-escaping="yes", XML markup characters (if any) will not be escaped. See the examples at pc',":ReadFile","."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Examples"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ReadFiles filepath="c:/temp/xmldirectory/">\n     <file filepath="DefinerModel.xml"/>\n     <file filepath="ApplicationData.xml"/>\n</pc:ReadFiles>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ReadFiles>\n     <file filepath="c:/temp/document_1.xml" assign:document1="."/>\n     <file filepath="d:/production/document_2.xml" assign:document2="."/>\n</pc:ReadFiles>\n'})}),"\n",(0,s.jsx)(t.p,{children:"\xa0"})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);