"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[11052],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(96540);const s={},c=t.createContext(s);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(c.Provider,{value:n},e.children)}},46616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Repositories/Blend_directives/pcFailed","title":"pc:Failed","description":"This article is about the pc:Failed Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcFailed.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcFailed","permalink":"/udocs/Repositories/Blend_directives/pcFailed","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcFailed"},"sidebar":"sidebar","previous":{"title":"pc:evaluate","permalink":"/udocs/Repositories/Blend_directives/pcevaluate"},"next":{"title":"pc:GenerateKeySchema","permalink":"/udocs/Repositories/Blend_directives/pcGenerateKeySchema"}}');var s=i(74848),c=i(28453);const o={id:"pcFailed"},r="pc",l={},a=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"pc",children:["pc",":Failed"]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsxs)(n.strong,{children:["pc",":Failed"]}),(0,s.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"pc-1",children:(0,s.jsxs)(n.strong,{children:["pc",":Failed"]})}),"\n",(0,s.jsx)(n.p,{children:"Makes an action, or a series of actions, dependent on the fact that another action fails."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Syntax"}),"\n\xa0"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Action(s) that fail(s) --\x3e\n\n  <pc:Failed>\n\n    \x3c!-- Action(s) to be performed --\x3e\n\n  </pc:Failed>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The <pc",":Failed","> element is a child element of the action that potentially fails. The XML content that it contains is executed if that action fails and not otherwise."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.p,{children:'A message "Failed to open file for logging" is written to the console if a logfile is not successfully opened for logging.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<pc:WriteFile filepath="{$logfile}">\n  <pc:Succeeded>\n    <pc:ConsoleWrite>Logging in: <pc:value-of select="$logfile"/>...<pc:newline/></pc:ConsoleWrite>\n  </pc:Succeeded>\n\n  <pc:Failed>\n    <pc:ConsoleWrite>Error: Failed to open file for logging.</pc:ConsoleWrite>\n    <pc:terminate/>\n  </pc:Failed>\n\n</pc:WriteFile>   \n'})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);