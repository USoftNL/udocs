"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[2481],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(96540);const s={},a=o.createContext(s);function l(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(a.Provider,{value:n},e.children)}},62005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Extensions/RDMI_Components/Calling_a_component","title":"Calling a component","description":"Where to call a component from?","source":"@site/docs/Extensions/RDMI_Components/Calling_a_component.md","sourceDirName":"Extensions/RDMI_Components","slug":"/Extensions/RDMI_Components/Calling_a_component","permalink":"/udocs/Extensions/RDMI_Components/Calling_a_component","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Calling_a_component"},"sidebar":"sidebar","previous":{"title":"Component for exporting a data set to a CSV file","permalink":"/udocs/Extensions/RDMI_Components/Component_for_exporting_a_data_set_to_a_CSV_file"},"next":{"title":"Component error handling","permalink":"/udocs/Extensions/RDMI_Components/Component_error_handling"}}');var s=t(74848),a=t(28453);const l={id:"Calling_a_component"},i="Calling a component",r={},c=[{value:"Where to call a component from?",id:"where-to-call-a-component-from",level:2},{value:"How to call the component?",id:"how-to-call-the-component",level:2},{value:"Independent INVOKE statements",id:"independent-invoke-statements",level:3},{value:"INVOKE in a SELECT output list",id:"invoke-in-a-select-output-list",level:3},{value:"INVOKE as a subquery in a SET or WHERE clause",id:"invoke-as-a-subquery-in-a-set-or-where-clause",level:3},{value:"Function call syntax",id:"function-call-syntax",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"calling-a-component",children:"Calling a component"})}),"\n",(0,s.jsx)(n.h2,{id:"where-to-call-a-component-from",children:"Where to call a component from?"}),"\n",(0,s.jsx)(n.p,{children:"You can call a component from most USoft contexts where SELECT is permitted:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Constraint SQL"}),"\n",(0,s.jsx)(n.li,{children:"SQL in SqlScript()"}),"\n",(0,s.jsx)(n.li,{children:"SQL Command dialog"}),"\n",(0,s.jsx)(n.li,{children:"SQL in USoft Batch Server"}),"\n",(0,s.jsx)(n.li,{children:"Decision SQL"}),"\n",(0,s.jsx)(n.li,{children:"Remote Rules Service API"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The INVOKE clause can NOT be used in the following contexts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Graphical SQL Definer"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In Extra Query statements in the Windows Designer, the INVOKE clause may only be used in the top-level SELECT output list and in subqueries."}),"\n",(0,s.jsx)(n.h2,{id:"how-to-call-the-component",children:"How to call the component?"}),"\n",(0,s.jsx)(n.p,{children:"You can call an RDMI component from a USoft SQL context by using one of two constructs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The USoft-proprietary INVOKE keyword."}),"\n",(0,s.jsx)(n.li,{children:"Function call syntax."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Either way, the RDMI call may appear in a number of different contexts, for example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"As an independent statement."}),"\n",(0,s.jsx)(n.li,{children:"In a nested manner, in association with another INVOKE clause."}),"\n",(0,s.jsx)(n.li,{children:"In association with a SELECT clause."}),"\n",(0,s.jsx)(n.li,{children:"In a WHERE condition."}),"\n",(0,s.jsx)(n.li,{children:"In the output list of a SELECT statement."}),"\n",(0,s.jsx)(n.li,{children:"In a subquery."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In general, there are two different ways to access a component's functionality:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["By calling a ",(0,s.jsx)(n.em,{children:"method"})," of the component."]}),"\n",(0,s.jsxs)(n.li,{children:["By calling a ",(0,s.jsx)(n.em,{children:"query protocol"})," of the component."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The combination of all these options gives you many different constructs to choose from. This help topic shows some possibilities without being exhaustive."}),"\n",(0,s.jsx)(n.h3,{id:"independent-invoke-statements",children:"Independent INVOKE statements"}),"\n",(0,s.jsx)(n.p,{children:"A component method or query protocol that requires no input parameters can be called with a simple INVOKE one-liner:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0component.method\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"To pass one or more parameters from a query result to the component method, combine INVOKE...WITH and SELECT... FROM...:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0component.method WITH\nSELECT \xa0 \xa0parameter(s)FROM \xa0 \xa0 \xa0...WHERE \xa0 \xa0 ...\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"To pass one or more parameters that you do not need to query the database for, you can omit FROM:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0component.method WITH\nSELECT \xa0 \xa0parameter(s)\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As an alternative, you can use so-called ",(0,s.jsx)(n.em,{children:"function call syntax"})," in this case:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0component.method(\xa0parameter(s) )\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can call a component 1 and pass the return value as an input parameter in a call to a component 2:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INVOKE \xa0 \xa0component2.method WITH\nINVOKE \xa0 \xa0component1.method WITH ...\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"invoke-in-a-select-output-list",children:"INVOKE in a SELECT output list"}),"\n",(0,s.jsx)(n.p,{children:"You can use INVOKE as an expression in the output list of a SELECT statement. This makes it possible to retrieve, in a single SELECT statement, values assembled from the combination of a database query and a component call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT    column\n,         ( INVOKE     component1.method )\n,         ( INVOKE     component2.method WITH\n            SELECT     column1\n            ,          column2\n            ,          ...\n          )\nFROM      table\nWHERE     ...\nGROUP BY  ...\nHAVING    ...\nORDER BY  ...\n"})}),"\n",(0,s.jsx)(n.p,{children:"This syntax is the same as used by database vendors for supporting subqueries in the SELECT output list."}),"\n",(0,s.jsx)(n.p,{children:"An INVOKE in a SELECT output list may not return more than one record; otherwise, it's an error."}),"\n",(0,s.jsx)(n.p,{children:"By default, an INVOKE returns a string with maximum size of 32K. You can use the TO_CLOB() SQL function to tell the INVOKE to return the long string correctly without it being truncated."}),"\n",(0,s.jsx)(n.h3,{id:"invoke-as-a-subquery-in-a-set-or-where-clause",children:"INVOKE as a subquery in a SET or WHERE clause"}),"\n",(0,s.jsx)(n.p,{children:"You can use INVOKE in a similar way as a SELECT subquery in a SET or WHERE clause. The result of the component call is passed to the embedding SQL statement as a value."}),"\n",(0,s.jsx)(n.p,{children:"The result of an INVOKE in this context must be a single scalar value. If INVOKE turns out to have an empty result at runtime, depending on the case, this may or may not be an error. If INVOKE yields an array of multiple values, it's an error."}),"\n",(0,s.jsx)(n.p,{children:"If a SELECT query that passes its value to an embedding INVOKE yields 0 rows, it passes the NULL value to the component call."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example 1"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \xa0 \xa0'' violation\nFROM \xa0 \xa0 \xa0department\nWHERE \xa0 \xa0 budget > \n( \n    INVOKE SAP.MaxBudget\n)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example 2"})}),"\n",(0,s.jsx)(n.p,{children:"This statement displays all the flights that are scheduled to 'VENICE' and for which the scheduled departure time lies after a certain time. The time is read real-time using a SOAP service."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT     s.scheduled_departure_time\n,          k.flight_nr\n,          k.flight_name\nFROM       scheduled_flights s\n,          kl_flight_info k\nWHERE      s.flight_id = k.id\nAND        s.destination = 'VENICE'\nAND        s.scheduled_departure_time > \n(\n     INVOKE      KLSoapService.GetDepartureTime WITH\n     SELECT      k2.klm_flight_nr\n     FROM        klm_flight_info k2\n     WHERE       k2.id = 21\n)\nORDER BY   scheduled_departure_time\n"})}),"\n",(0,s.jsx)(n.h3,{id:"function-call-syntax",children:"Function call syntax"}),"\n",(0,s.jsx)(n.p,{children:"Function call syntax for RDMI components resembles functions calls from programming languages and allows you to work without the INVOKE keyword:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT      component1.method()\n,           component2.method( column1, column2 )\nFROM        table1\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is equivalent to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \n      ( INVOKE component1.method )\n,     ( INVOKE component2.method WITH \n        SELECT    column1\n        ,         column2\n      )\nFROM  table1\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also use function call syntax in a WHERE clause:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT   ...\nFROM     ...\nWHERE    condition = ( SELECT  component1.method() )\n"})}),"\n",(0,s.jsx)(n.p,{children:"You CANNOT pass the outcome of RDMI function call syntax to a mathematical operator or a SQL function. The following are errors:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT column1 + component1.method()\n\nSELECT UPPER( component1.method() )\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);