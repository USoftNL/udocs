"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[33050],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},55004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Extensions/USMeta_internal_component/USMetaDecisions","title":"USMeta.Decisions","description":"This article is about the Decisions method of the USMeta internal component.","source":"@site/docs/Extensions/USMeta_internal_component/USMetaDecisions.md","sourceDirName":"Extensions/USMeta_internal_component","slug":"/Extensions/USMeta_internal_component/USMetaDecisions","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaDecisions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USMetaDecisions"},"sidebar":"sidebar","previous":{"title":"USMeta.Constraints","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaConstraints"},"next":{"title":"USMeta.Domains","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaDomains"}}');var s=t(74848),o=t(28453);const a={id:"USMetaDecisions"},r="USMeta.Decisions",c={},l=[{value:"<strong>USMeta.Decisions</strong>",id:"usmetadecisions-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"usmetadecisions",children:"USMeta.Decisions"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"Decisions"})," method of the ",(0,s.jsx)(n.a,{href:"/Extensions/USMeta_internal_component",children:"USMeta internal component"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"usmetadecisions-1",children:(0,s.jsx)(n.strong,{children:"USMeta.Decisions"})}),"\n",(0,s.jsx)(n.p,{children:"At runtime, gets metadata information about decisions from the model developed in USoft Definer.\nFor each retrieved decision, this information takes the form of name/value pairs. Each name/value pair expresses a decision attribute setting."}),"\n",(0,s.jsx)(n.p,{children:"Returns an XML document of the form demonstrated in the Example below."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Decisions(\n\xa0\xa0\xa0\xa0*decision-name-pattern*     Decisions\n,\xa0\xa0\xa0*interfaces-only*           InterfacesOnly\n,\xa0\xa0\xa0*module-pattern*            Module\n,\xa0\xa0\xa0*mime-type*                 MimeType\n)\n\n*interfaces-only* ::=  { yes | no }\n\n*mime-type*       ::=  {  application/xml\n                     ,  xml\n                     ,  application/json\n                     ,  json  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["All parameters are optional. Parameter values that you pass are mapped to parameters by alias name. The '.",(0,s.jsx)(n.em,{children:"test."}),"' value in the following example is for ",(0,s.jsx)(n.em,{children:"decision-name-pattern"}),' because of the "Decisions" alias:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Decisions( '.*test.*' Decisions )\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Decision-name-pattern"})," is a regular expression that matches zero, one or more decision names in the model. The result data is limited to decisions matching the pattern. If ",(0,s.jsx)(n.em,{children:"decision-name-pattern"})," is omitted, the result data is not limited in this way."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.em,{children:"interfaces-only"})," is set to 'yes', only decisions that have Interface = Yes are included. If it is set to 'no' (the default), the result data is not limited in this way."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Module-pattern"})," is a regular expression that matches zero, one or more module names in the model. The result data is limited to decisions within modules that match the pattern. If ",(0,s.jsx)(n.em,{children:"module-pattern"})," is omitted, the result data is not limited in this way."]}),"\n",(0,s.jsx)(n.p,{children:"Result data for decisions from consumed modules that match module-pattern contain two additional attributes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'INTERFACE_FROM_MODULE', which is set to 'Y',"}),"\n",(0,s.jsx)(n.li,{children:"''IMPLEMENTING_MODULE', which is set to the module name where the decision originates from. The 'MODULE_NAME' attribute is set in this case to the name of the consumer module."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Mime-type"})," determines whether the output is in XML ( \u2018application/xml\u2018 or 'xml\u2019) or in JSON ('application/json\u2019 or 'json\u2019). The default is XML."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.p,{children:"This example returns decision information about any decisions in the model with a name containing the string 'test':"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Decisions( '.*test.*' Decisions )\n"})}),"\n",(0,s.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Decisions>\n      <Decision NAME="ALL_TEST" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" CLIENT=""/>\n      <Decision NAME="BM_TEST_FAILEXEC" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" CLIENT=""/>\n      <Decision NAME="BM_TEST_FAILPROC" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" CLIENT=""/>\n      <Decision NAME="BM_TEST_LOOKUP_CONSTRAINT" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" CLIENT=""/>\n      <Decision NAME="BM_TEST_SQLGRP1" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" CLIENT=""/>\n   </Decisions>\n</Meta>\n'})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);