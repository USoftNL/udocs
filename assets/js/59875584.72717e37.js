"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[62660],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const r={},c=t.createContext(r);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:n},e.children)}},76125:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Repositories/Blend_directives/pcmsg","title":"pc:msg","description":"This article is about the pc:msg Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcmsg.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcmsg","permalink":"/udocs/Repositories/Blend_directives/pcmsg","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcmsg"},"sidebar":"sidebar","previous":{"title":"pc:MoveFileOverwrite","permalink":"/udocs/Repositories/Blend_directives/pcMoveFileOverwrite"},"next":{"title":"pc:nbs","permalink":"/udocs/Repositories/Blend_directives/pcnbs"}}');var r=s(74848),c=s(28453);const i={id:"pcmsg"},o="pc",l={},a=[{value:"<strong>pc</strong>",id:"pc-1",level:2},{value:"Most recently produced message",id:"most-recently-produced-message",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"pc",children:["pc",":msg"]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This article is about the ",(0,r.jsxs)(n.strong,{children:["pc",":msg"]}),(0,r.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"pc-1",children:(0,r.jsxs)(n.strong,{children:["pc",":msg"]})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the information, warning or error message (if any) that was ",(0,r.jsx)(n.a,{href:"#most-recently-produced-message",children:"most recently produced"})," by the USoft Blend processor. This will often be a message as encountered in USoft Rules Service logs. This takes the form of an XML document. The Blend processor sets or overwrites this message each time it encounters a message in the result of a function call."]}),"\n",(0,r.jsx)(n.p,{children:"Returns an XML document."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["By contrast, ",(0,r.jsxs)(n.a,{href:"/udocs/Repositories/Blend_directives/pctextmsg",children:["pc",":textmsg"]})," returns a text string."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<pc:msg />\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example"})}),"\n",(0,r.jsx)(n.p,{children:"This example is an attempt to import a record with a non-unique primary key:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<pc:XmlImport connection="{$myconn}" commit="commit" source="{$myfile}">\n   <pc:Succeeded>\n      <pc:ConsoleWrite>Application data imported.<pc:newline/></pc:ConsoleWrite>\n   </pc:Succeeded>\n   <pc:Failed>\n      <pc:ConsoleWrite>Error: Failed to import application data.\n          <pc:newline/>\n          <pc:msg/>\n      </pc:ConsoleWrite>\n   </pc:Failed>\n</pc:XmlImport> \n'})}),"\n",(0,r.jsx)(n.p,{children:"The return message from the Rules Engine looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Key "Tours.(Destination,Type)" with value "(AUSTRALIA,ISLAND SUNTANNER)" is not unique.\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The value returned by ",(0,r.jsx)("pc:msg",{})," looks like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Error location="/root[(1)]/pc:AppendFile[(1)]/pc:XmlImport[(1)]<pc:XmlImport connection="{$appconn}" commit="commit" source="{$importapppath}" />">\n  <uslng:messages version="1.0" statement="select to_clob((invoke xml.import with select \'c:\\labs\\blend\\TRAVEL.xml\'))" xmlns:uslng="http://www.usoft.com/Product/Messages">\n    <uslng:message msg-code="no code" msg-category="built-in" msg-type="Error" source="constraint" constraint-name="built-in" constraint-type="column-check" language="default" _escape-xml-content_="yes">\n      <uslng:context>\n        <uslng:execution-stack>\n          <uslng:execution-element section="rdmi" type="internal-component" name="XML.IMPORT(XMLIMPORTFETCH)" />\n        </uslng:execution-stack>\n        <uslng:record>\n          <uslng:table-name>TOUR</uslng:table-name>\n          <uslng:defined-window-name>Tours</uslng:defined-window-name>\n          <uslng:primary-key>\n            <TOUR prompt="Tours">\n              <DESTINATION prompt="Destination" value="AUSTRALIA" />\n              <TOUR_TYPE prompt="Type" value="ISLAND SUNTANNER" />\n            </TOUR>\n          </uslng:primary-key>\n        </uslng:record>\n      </uslng:context>\n      <uslng:violation>\n        <uslng:message\n            msg-code="60446"\n            msg-category="Frequent End User Msg"\n            msg-type="Error"\n            system-msg="yes"\n            language="default" _\n            escape-xml-content_="yes">\n               Key "<uslng:param name="ObjectName">Tours</uslng:param>.<uslng:param name="Key">(Destination,Type)</uslng:param>\n               " with value "<uslng:param name="Val">(AUSTRALIA,ISLAND SUNTANNER)</uslng:param>" is not unique.</uslng:message>\n      </uslng:violation>\n    </uslng:message>\n  </uslng:messages>\n</Error>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"most-recently-produced-message",children:"Most recently produced message"}),"\n",(0,r.jsxs)(n.p,{children:["<pc",":msg","/> returns the ",(0,r.jsx)(n.em,{children:"most recently produced"})," message. It is typically used in combination with <pc",":Succeeded","> and <pc",":Failed","> as the Example showed, but you can also used it on its own. This <pc",":msg","/> produces any message raised by the call to pc:RunRulesService:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<pc:RunRulesService>\n  ...\n</pc:RunRulesService>\n<pc:msg/>\n"})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);