"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[55188],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var d=n(96540);const t={},r=d.createContext(t);function i(e){const s=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),d.createElement(r.Provider,{value:s},e.children)}},39004:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"Modeller_and_Rules_Engine/Logical_Views/Example_Rulebased_Logical_View","title":"Example: Rule-based Logical View","description":"This section discusses an example of a rule-based logical view. The chosen implementation is transitional constraints, as opposed to a batch job called by one or more constraints.","source":"@site/docs/Modeller_and_Rules_Engine/Logical_Views/Example_Rulebased_Logical_View.md","sourceDirName":"Modeller_and_Rules_Engine/Logical_Views","slug":"/Modeller_and_Rules_Engine/Logical_Views/Example_Rulebased_Logical_View","permalink":"/udocs/Modeller_and_Rules_Engine/Logical_Views/Example_Rulebased_Logical_View","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_Rulebased_Logical_View"},"sidebar":"sidebar","previous":{"title":"Rule-based logical views","permalink":"/udocs/Modeller_and_Rules_Engine/Logical_Views/Rulebased_logical_views"},"next":{"title":"Supertypes and subtypes","permalink":"/udocs/Modeller_and_Rules_Engine/Supertypes_and_subtypes"}}');var t=n(74848),r=n(28453);const i={id:"Example_Rulebased_Logical_View"},a="Example: Rule-based Logical View",l={},c=[{value:"Step 1: Define and test the logical view",id:"step-1-define-and-test-the-logical-view",level:3},{value:"Step 2: Set constraint flags",id:"step-2-set-constraint-flags",level:3},{value:"Step 3: Plan rules",id:"step-3-plan-rules",level:3},{value:"Step 4: Set column attributes",id:"step-4-set-column-attributes",level:3},{value:"Step 5: Retrieve database key ahead of time",id:"step-5-retrieve-database-key-ahead-of-time",level:3},{value:"Step 6: Deal with INSERT of person data",id:"step-6-deal-with-insert-of-person-data",level:3},{value:"Step 7: Deal with INSERT of address data in new view records",id:"step-7-deal-with-insert-of-address-data-in-new-view-records",level:3},{value:"Step 8: Deal with INSERT of address data in existing view records",id:"step-8-deal-with-insert-of-address-data-in-existing-view-records",level:3},{value:"Step 9: Deal with UPDATE of address data",id:"step-9-deal-with-update-of-address-data",level:3},{value:"Step 10: Deal with DELETE of address data",id:"step-10-deal-with-delete-of-address-data",level:3}];function h(e){const s={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"example-rule-based-logical-view",children:"Example: Rule-based Logical View"})}),"\n",(0,t.jsx)(s.p,{children:"This section discusses an example of a rule-based logical view. The chosen implementation is transitional constraints, as opposed to a batch job called by one or more constraints."}),"\n",(0,t.jsx)(s.p,{children:"Assume you have a customer relationship management system, where customers are saved in the PERSON table and their addresses in the ADDRESS table. The ADDRESS table can store different types of addresses. You want to provide a Logical View on this model that will present customers and their home and postal addresses in a single form. In order to allow users to manipulate customer data and related home and postal address data directly through this same form, you turn the Logical View into a Rule-based Logical View."}),"\n",(0,t.jsx)(s.p,{children:"The PERSON table has a database-generated PERSON_ID primary key. The ADDRESS table is a child table of PERSON. It has a unique primary key across the columns (PERSON_ID, ADDRESS_TYPE)."}),"\n",(0,t.jsx)(s.p,{children:"The Relationship between PERSON and ADDRESS has Delete Rule = Cascading."}),"\n",(0,t.jsx)(s.h3,{id:"step-1-define-and-test-the-logical-view",children:"Step 1: Define and test the logical view"}),"\n",(0,t.jsx)(s.p,{children:"Define and test a new Logical View. Provide the SQL Statement, press the Check button so that USoft sets the view to Correct = Yes, then save your work."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"View Name:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Abbreviation:"}),(0,t.jsx)(s.td,{children:"P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Object Name:"}),(0,t.jsx)(s.td,{children:"Person address"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Object Name Plural:"}),(0,t.jsx)(s.td,{children:"Person addresses"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT\xa0 \xa0 p.* \n,\xa0 \xa0 \xa0 \xa0 \xa0a1.address \xa0 \xa0 \xa0 home_address\n,\xa0 \xa0 \xa0 \xa0 \xa0a1.city \xa0 \xa0 \xa0 \xa0 \xa0home_city\n,\xa0 \xa0 \xa0 \xa0 \xa0a1.country \xa0 \xa0 \xa0 home_country\n,\xa0 \xa0 \xa0 \xa0 \xa0a2.address \xa0 \xa0 \xa0 postal_address\n,\xa0 \xa0 \xa0 \xa0 \xa0a2.city \xa0 \xa0 \xa0 \xa0 \xa0postal_city\n,\xa0 \xa0 \xa0 \xa0 \xa0a2.country \xa0 \xa0 \xa0 postal_country\nFROM\xa0 \xa0 \xa0 person p\n,\xa0 \xa0 \xa0 \xa0 \xa0address a1\n,\xa0 \xa0 \xa0 \xa0 \xa0address a2\nWHERE\xa0 \xa0 \xa0p.person_id = a1.person_id(+)\nAND\xa0 \xa0 \xa0 \xa0p.person_id = a2.person_id(+)\nAND\xa0 \xa0 \xa0 \xa0a1.address_type(+) = 'HOME'\nAND\xa0 \xa0 \xa0 \xa0a2.address_type(+) = 'POSTAL'\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-2-set-constraint-flags",children:"Step 2: Set constraint flags"}),"\n",(0,t.jsx)(s.p,{children:"Set Use Constraints... flags. Because of the cascading Delete Rule between PERSON and ADDRESS, you don't need special rules for Delete, only for Insert and Update:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"View Name:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Use Constraints for Inserts:"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Use Constraints for Updates:"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Use Constraints for Deletes:"}),(0,t.jsx)(s.td,{children:"No"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"step-3-plan-rules",children:"Step 3: Plan rules"}),"\n",(0,t.jsx)(s.p,{children:"Plan ahead what are the special rules that you need."}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsx)(s.p,{children:"At this stage, it is a good idea actually to create the constraints listed. Use dummy SQL statements at this stage. Replace them by the correct SQL in a later step:"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Constraint Name"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Required Action"})})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"UPD_P_A_KEYVALUE"}),(0,t.jsx)(s.td,{children:"Copy database-generated key value for person on insert of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"INS_P_ON_INS_P_A"}),(0,t.jsx)(s.td,{children:"Insert person data on insert of new view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"INS_A_HOME_ON_INS_P_A"}),(0,t.jsx)(s.td,{children:"Insert home address data (if any) on insert of new view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"INS_A_POSTAL_ON_INS_P_A"}),(0,t.jsx)(s.td,{children:"Insert postal address data (if any) on insert of new view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"UPD_P_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Update person data on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"INS_A_HOME_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Insert new home address data (if any) on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"INS_A_POSTAL_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Insert new postal address data (if any) on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"UPD_A_HOME_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Update existing home address data (if any) on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"UPD_A_POSTAL_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Update existing postal address data (if any) on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DEL_A_HOME_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Delete erased home address data (if any) on update of view record"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DEL_A_POSTAL_ON_UPD_P_A"}),(0,t.jsx)(s.td,{children:"Delete erased postal address data (if any) on update of view record"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"step-4-set-column-attributes",children:"Step 4: Set column attributes"}),"\n",(0,t.jsx)(s.p,{children:"Make sure that column attributes for PERSON_ADDRESS correctly reflect the intended user interaction with the view:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Column"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Mandatory"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Input Allowed"})}),(0,t.jsx)(s.th,{children:(0,t.jsx)(s.strong,{children:"Updatable"})})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PERSON_ID"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"No"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"NAME"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"TITLE"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"MARITAL_STATUS"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"EMAIL"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"HOME_ADDRESS"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"HOME_CITY"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"HOME_COUNTRY"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"POSTAL_ADDRESS"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"POSTAL_CITY"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"POSTAL_COUNTRY"}),(0,t.jsx)(s.td,{children:"No"}),(0,t.jsx)(s.td,{children:"Yes"}),(0,t.jsx)(s.td,{children:"Yes"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"step-5-retrieve-database-key-ahead-of-time",children:"Step 5: Retrieve database key ahead of time"}),"\n",(0,t.jsx)(s.p,{children:"Retrieve the next database-generated primary key value for PERSON_ID ahead of time, that is, before the INSERT action on the view is translated to actions on underlying tables. For this, choose an implementation that uses a transitional constraint:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"UPD_P_A_KEYVALUE"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Always"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Never"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"UPDATE \xa0 \xa0person_address\nSET \xa0 \xa0 \xa0 person_id = person.GetNextGeneratedUniqueValue()\nWHERE \xa0 \xa0 person_id IS NULL\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-6-deal-with-insert-of-person-data",children:"Step 6: Deal with INSERT of person data"}),"\n",(0,t.jsx)(s.p,{children:"Translate INSERT of person data in the view to INSERT of person data in the PERSON table:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"INS_P_ON_INS_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Always"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Never"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement. The first WHERE clause is needed to force this constraint to be handled AFTER the UPD_P_A_KEYVALUE constraint retrieves the database-generated key value:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT INTO person\n(\n \xa0 \xa0 \xa0 \xa0 \xa0person_id\n, \xa0 \xa0 \xa0 \xa0 name\n, \xa0 \xa0 \xa0 \xa0 title\n, \xa0 \xa0 \xa0 \xa0 marital_status\n, \xa0 \xa0 \xa0 \xa0 email\n)\nSELECT \xa0 \xa0pa.person_id\n, \xa0 \xa0 \xa0 \xa0 pa.name\n, \xa0 \xa0 \xa0 \xa0 pa.title\n, \xa0 \xa0 \xa0 \xa0 pa.marital_status\n, \xa0 \xa0 \xa0 \xa0 pa.email \xa0 \nFROM \xa0 \xa0 \xa0person_address pa\nWHERE \xa0 \xa0 pa.person_id IS NOT NULL\nAND NOT EXISTS\n( \xa0 \n      SELECT \xa0 \xa0 \xa0 \xa0'' \xa0 \n      FROM \xa0 \xa0 \xa0 \xa0 \xa0person p \xa0 \n      WHERE \xa0 \xa0 \xa0 \xa0 p.person_id = pa.person_id\n)\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-7-deal-with-insert-of-address-data-in-new-view-records",children:"Step 7: Deal with INSERT of address data in new view records"}),"\n",(0,t.jsx)(s.p,{children:"Translate INSERT of address data in a NEW view record to INSERT of address data in the ADDRESS table (2 constraints):"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"INS_A_HOME_ON_INS_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Always"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Never"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement. The first WHERE clause is needed to force this constraint to be handled AFTER the UPD_P_A_KEYVALUE constraint retrieves the database-generated key value:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT INTO address \n(\n \xa0 person_id\n, \xa0address_type\n, \xa0address\n, \xa0city\n, \xa0country\n)\nSELECT\n \xa0 \xa0 \xa0 \xa0 \xa0pa.person_id\n, \xa0 \xa0 \xa0 \xa0 'HOME'\n, \xa0 \xa0 \xa0 \xa0 pa.home_address\n, \xa0 \xa0 \xa0 \xa0 pa.home_city\n, \xa0 \xa0 \xa0 \xa0 pa.home_country\nFROM \xa0 \xa0 \xa0person_address pa\nWHERE \xa0 \xa0 pa.person_id IS NOT NULL\nAND\n(\n \xa0 \xa0 \xa0 \xa0 \xa0pa.home_address IS NOT NULL \xa0 \xa0\n    OR \xa0 \xa0pa.home_city IS NOT NULL \xa0 \xa0\n    OR \xa0 \xa0pa.home_country IS NOT NULL\n)\nAND NOT EXISTS\n( \xa0 \xa0 \n      SELECT \xa0 \xa0 ''\n \xa0 \xa0 \xa0FROM \xa0 \xa0 \xa0 address a\n \xa0 \xa0 \xa0WHERE \xa0 \xa0 \xa0a.person_id = pa.person_id\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0a.address_type = 'HOME'\n)\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-8-deal-with-insert-of-address-data-in-existing-view-records",children:"Step 8: Deal with INSERT of address data in existing view records"}),"\n",(0,t.jsx)(s.p,{children:"Translate INSERT of address data in an EXISTING view record to INSERT of address data in the ADDRESS table (2 constraints):"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"INS_A_HOME_ON_UPD_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Used Columns"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT INTO address\n(\n \xa0 \xa0 \xa0 \xa0 \xa0person_id\n, \xa0 \xa0 \xa0 \xa0 address_type\n, \xa0 \xa0 \xa0 \xa0 address\n, \xa0 \xa0 \xa0 \xa0 city\n, \xa0 \xa0 \xa0 \xa0 country\n)\nSELECT \xa0 \xa0pa.person_id\n, \xa0 \xa0 \xa0 \xa0 'HOME'\n, \xa0 \xa0 \xa0 \xa0 pa.home_address\n, \xa0 \xa0 \xa0 \xa0 pa.home_city\n, \xa0 \xa0 \xa0 \xa0 pa.home_country\nFROM \xa0 \xa0 \xa0person_address pa\nWHERE\n(\n \xa0 \xa0 \xa0 \xa0 \xa0pa.home_address IS NOT NULL \xa0\n   OR\xa0 \xa0 \xa0pa.home_city IS NOT NULL \xa0\n   OR\xa0 \xa0 \xa0pa.home_country IS NOT NULL\n)\nAND NOT EXISTS\n(\n \xa0 \xa0SELECT \xa0 \xa0 \xa0''\n \xa0 \xa0FROM \xa0 \xa0 \xa0 \xa0address a\n \xa0 \xa0WHERE \xa0 \xa0 \xa0 a.person_id = pa.person_id \xa0 \xa0\n    AND \xa0 \xa0 \xa0 \xa0 a.address_type = 'HOME'\n)\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-9-deal-with-update-of-address-data",children:"Step 9: Deal with UPDATE of address data"}),"\n",(0,t.jsx)(s.p,{children:"Translate UPDATE of address data in an EXISTING view record to UPDATE of address data in the ADDRESS table (2 constraints):"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Constraint 1"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"UPD_A_HOME_ON_UPD_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Used Columns"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"UPDATE address a\nSET \n( \xa0 \xa0 \xa0 \xa0 \xa0\n          a.address\n, \xa0 \xa0 \xa0 \xa0 a.city\n, \xa0 \xa0 \xa0 \xa0 a.country\n) =\n(\n \xa0 SELECT \xa0 \xa0 pa.home_address \xa0\n   , \xa0 \xa0 \xa0    pa.home_city \xa0 \n   ,\xa0 \xa0 \xa0 \xa0 \xa0 pa.home_country \xa0 \n   FROM\xa0 \xa0 \xa0 \xa0person_address pa \xa0 \n   WHERE  \xa0 \xa0 pa.person_id = a.person_id\n)\nWHERE \xa0 \xa0 a.address_type = 'HOME'\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Constraint 2"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"UPD_A_POSTAL_ON_UPD_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Used Columns"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"UPDATE address a\nSET \n( \xa0 \xa0 \xa0 \xa0 \xa0\n          a.address\n, \xa0 \xa0 \xa0 \xa0 a.city\n, \xa0 \xa0 \xa0 \xa0 a.country\n) =\n( \xa0 \xa0\n     SELECT \xa0 pa.postal_address \xa0 \n     ,\xa0 \xa0 \xa0 \xa0 pa.postal_city \xa0 \n     ,\xa0 \xa0 \xa0 \xa0 pa.postal_country \xa0 \n     FROM\xa0 \xa0 \xa0person_address pa \xa0 \n     WHERE\xa0 \xa0 pa.person_id = a.person_id\n)\nWHERE \xa0 \xa0 a.address_type = 'POSTAL'\n"})}),"\n",(0,t.jsx)(s.h3,{id:"step-10-deal-with-delete-of-address-data",children:"Step 10: Deal with DELETE of address data"}),"\n",(0,t.jsx)(s.p,{children:"Translate DELETE of address data in an EXISTING view record to DELETE of address data in the ADDRESS table (2 constraints):"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Constraint 1"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"DEL_A_HOME_ON_UPD_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Used Columns"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL Statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"DELETE FROM \xa0 \xa0 \xa0address a\nWHERE \xa0 \xa0 \xa0 \xa0 \xa0 \xa0a.address_type = 'HOME'\nAND EXISTS\n(\n \xa0 \xa0 \xa0SELECT \xa0 \xa0 ''\n \xa0 \xa0 \xa0FROM \xa0 \xa0 \xa0 person_address pa\n \xa0 \xa0 \xa0WHERE \xa0 \xa0 \xa0pa.person_id = a.person_id\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.home_address IS NULL\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.home_city IS NULL\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.home_country IS NULL\n)\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Constraint 2"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Constraint Name:"}),(0,t.jsx)(s.td,{children:"DEL_A_POSTAL_ON_UPD_P_A"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Transition Table:"}),(0,t.jsx)(s.td,{children:"PERSON_ADDRESS"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Insert:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Delete:"}),(0,t.jsx)(s.td,{children:"Never"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Fire on Update:"}),(0,t.jsx)(s.td,{children:"Used Columns"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"SQL statement:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"DELETE FROM \xa0 \xa0 \xa0address a\nWHERE \xa0 \xa0 \xa0 \xa0 \xa0 \xa0a.address_type = 'POSTAL'\nAND EXISTS\n(\n \xa0 \xa0 \xa0SELECT \xa0 \xa0 ''\n \xa0 \xa0 \xa0FROM \xa0 \xa0 \xa0 person_address pa\n \xa0 \xa0 \xa0WHERE \xa0 \xa0 \xa0pa.person_id = a.person_id\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.postal_address IS NULL\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.postal_city IS NULL\n \xa0 \xa0 \xa0AND \xa0 \xa0 \xa0 \xa0pa.postal_country IS NULL\n)\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);