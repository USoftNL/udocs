"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[42557],{28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>o});var s=t(96540);const n={},i=s.createContext(n);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(i.Provider,{value:r},e.children)}},83637:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_3","title":"Configuration example 3","description":"This example shows how to perform a merge of source-side and target-side server properties when you deploy a Server defined in USoft Service Definer. When the server is deployed on a specific target machine, it will have a list of properties that combines:","source":"@site/docs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_3.md","sourceDirName":"Continuous_delivery/Understanding_USoft_Delivery_Manager","slug":"/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_3","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Configuration_example_3"},"sidebar":"sidebar","previous":{"title":"Configuration example 2","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Configuration_example_2"},"next":{"title":"Release management: Deploy phase","permalink":"/udocs/Continuous_delivery/Understanding_USoft_Delivery_Manager/Release_management_Deploy_phase"}}');var n=t(74848),i=t(28453);const a={id:"Configuration_example_3"},o="Configuration example 3",d={},l=[{value:"Step 1: Declare and release a server with server properties",id:"step-1-declare-and-release-a-server-with-server-properties",level:3},{value:"Step 2: Describe machine-specific server properties in registry",id:"step-2-describe-machine-specific-server-properties-in-registry",level:3},{value:"Step 3: Output deployment XSL that merges source-side and target-side properties",id:"step-3-output-deployment-xsl-that-merges-source-side-and-target-side-properties",level:3},{value:"Step 4: Merge source-side and target-side properties",id:"step-4-merge-source-side-and-target-side-properties",level:3}];function p(e){const r={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"configuration-example-3",children:"Configuration example 3"})}),"\n",(0,n.jsx)(r.p,{children:"This example shows how to perform a merge of source-side and target-side server properties when you deploy a Server defined in USoft Service Definer. When the server is deployed on a specific target machine, it will have a list of properties that combines:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Source-side properties supplied (",(0,n.jsx)(r.em,{children:"released"}),") from Development and"]}),"\n",(0,n.jsxs)(r.li,{children:["Other properties (",(0,n.jsx)(r.em,{children:"target-side properties"}),") that are machine-specific and declared in a registry."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"This example shows the use of XSLT transformation during deployment. It is an example of configuration by XSL transformation."}),"\n",(0,n.jsx)(r.p,{children:"Good command of the XSLT 1.0 language is required, as well as a minimal grasp of the USoft REST service framework."}),"\n",(0,n.jsx)(r.h3,{id:"step-1-declare-and-release-a-server-with-server-properties",children:"Step 1: Declare and release a server with server properties"}),"\n",(0,n.jsx)(r.p,{children:'1.\xa0In USoft Service Definer, declare an example Server object named, say, "MYSERVER1".'}),"\n",(0,n.jsx)(r.p,{children:'2.\xa0Make sure you define a couple of server properties for "MYSERVER1", even if they are just dummy properties that will at least allow you to grasp the outcome of this configuration example.'}),"\n",(0,n.jsx)(r.p,{children:"2.\xa0In USoft Delivery Manager, define a task with a task step that executes the Extract servers action in the database account where you have defined MYSERVER1."}),"\n",(0,n.jsx)(r.p,{children:"3.\xa0Run the task step. See that Delivery Manager has extracted the server information (choose Define, Extracted Server Objects)."}),"\n",(0,n.jsx)(r.p,{children:'4.\xa0Add a task step that executes the Release server action for "MYSERVER1".'}),"\n",(0,n.jsxs)(r.p,{children:["5.\xa0Run this task step. See that a .JAR file and supporting files have been released to the ",(0,n.jsx)(r.strong,{children:"\\servers"}),' subfolder of the current release folder. One of the supporting files is "config.xml". See that the server properties are described in this "config.xml" file.']}),"\n",(0,n.jsx)(r.h3,{id:"step-2-describe-machine-specific-server-properties-in-registry",children:"Step 2: Describe machine-specific server properties in registry"}),"\n",(0,n.jsx)(r.p,{children:"1.\xa0Run the Tools, Load Registry Samples feature from the Delivery Manager menu. More information about this feature is here. An explanation of what is a registry is here."}),"\n",(0,n.jsx)(r.p,{children:"2.\xa0In the current registry (choose Release, Registries and find the registry with Current = Yes), define some additional and machine-specific server properties, making sure these have different property names than the source-side properties defined in Service Definer:"}),"\n",(0,n.jsx)(r.p,{children:"3.\xa0Make sure the Current Release (choose Release, Current Release) has Put Current Registry = Yes."}),"\n",(0,n.jsx)(r.p,{children:'4.\xa0Re-run the task step that releases MYSERVER1. Check that the machine-specific server properties have been correctly output to a file named "registry.xml" in the release folder.'}),"\n",(0,n.jsx)(r.h3,{id:"step-3-output-deployment-xsl-that-merges-source-side-and-target-side-properties",children:"Step 3: Output deployment XSL that merges source-side and target-side properties"}),"\n",(0,n.jsx)(r.p,{children:"1.\xa0Run the Tools, Load Deploy Samples feature from the Delivery Manager menu. More information about this feature is here. An explanation of what is a deploy script is here."}),"\n",(0,n.jsx)(r.p,{children:'2.\xa0Check that you have an attachment (choose Release, Attachments) with File Name = "deploy.xml" and Section = servers and Blocked = No.'}),"\n",(0,n.jsx)(r.p,{children:"This attachment must have Subfolder ="}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"\\\n"})}),"\n",(0,n.jsx)(r.p,{children:'and "Path from server folder" = Yes.'}),"\n",(0,n.jsx)(r.p,{children:'3.\xa0Check that you have an attachment (choose Release, Attachments) with File Name = "deploy.xsl" and Section = servers and Blocked = No.'}),"\n",(0,n.jsx)(r.p,{children:"This attachment must have Subfolder ="}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"\\using\n"})}),"\n",(0,n.jsxs)(r.p,{children:['4.\xa0Re-run the task step that releases MYSERVER1. Check that the "deploy.xml" attachment has been output to the server release folder and the "deploy.xsl" attachment to its ',(0,n.jsx)(r.strong,{children:"\\using"})," subfolder."]}),"\n",(0,n.jsxs)(r.p,{children:['5.\xa0Inspect "deploy.xml" and see that this script applies the "deploy.xsl" transformation before actually deploying the server deliverables. This is performed by the ',(0,n.jsxs)(r.strong,{children:["<pc",":apply2file",">"]})," command."]}),"\n",(0,n.jsx)(r.p,{children:'6.\xa0Inspect "deploy.xsl" and check that this transformation combines source-side server properties from "config.xml" with target-side properties from the registry.'}),"\n",(0,n.jsx)(r.h3,{id:"step-4-merge-source-side-and-target-side-properties",children:"Step 4: Merge source-side and target-side properties"}),"\n",(0,n.jsx)(r.p,{children:'1.\xa0Run the "deploy.xml" script. See that the resulting "config.xml" has the combined list of source-side and target-side properties.'}),"\n",(0,n.jsx)(r.p,{children:"\xa0"}),"\n",(0,n.jsx)(r.p,{children:"\xa0"}),"\n",(0,n.jsx)(r.p,{children:"\xa0"}),"\n",(0,n.jsx)(r.p,{children:"\xa0"}),"\n",(0,n.jsx)(r.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);