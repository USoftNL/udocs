"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[98828],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},91568:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_debugging","title":"Guide to Blend debugging","description":"Manual debugging","source":"@site/docs/Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_debugging.md","sourceDirName":"Repositories/Blend_scripts_for_repository_management","slug":"/Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_debugging","permalink":"/udocs/Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_debugging","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Guide_to_Blend_debugging"},"sidebar":"sidebar","previous":{"title":"Calling USCSXSL","permalink":"/udocs/Repositories/Blend_scripts_for_repository_management/Calling_USCSXSL"},"next":{"title":"Guide to Blend expressions and data types","permalink":"/udocs/Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_expressions_and_data_types"}}');var s=t(74848),i=t(28453);const r={id:"Guide_to_Blend_debugging"},d="Guide to Blend debugging",l={},a=[{value:"Manual debugging",id:"manual-debugging",level:2},{value:"Tracemode tool",id:"tracemode-tool",level:2},{value:"Detecting obsolete code",id:"detecting-obsolete-code",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"guide-to-blend-debugging",children:"Guide to Blend debugging"})}),"\n",(0,s.jsx)(n.h2,{id:"manual-debugging",children:"Manual debugging"}),"\n",(0,s.jsx)(n.p,{children:"In practice, the most common way to debug a Blend script is simply to insert temporary statements that provide messages or output for yourself as a developer to inspect. When you are done debugging, you remove these statements.\nTo write output to the console during script execution, call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<pc:ConsoleWrite>\n"})}),"\n",(0,s.jsx)(n.p,{children:"To output data elements as a response to the console, perhaps in order to see whether certain data are available, for string data, call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<pc:value-of>\n"})}),"\n",(0,s.jsx)(n.p,{children:"and, for node sets, call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<pc:copy-of>\n"})}),"\n",(0,s.jsx)(n.p,{children:"To send this type of debug information to a file instead of the console, redirect it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"> *usoft-bindir*\\ublendit.exe *script-file* >log.xml\n"})}),"\n",(0,s.jsx)(n.p,{children:"When debugging long scripts, you can temporarily skip sections by commenting them out:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"\x3c!--  --\x3e\n"})}),"\n",(0,s.jsx)(n.p,{children:"but it is often more practical to debug code blocks as stand-alone scripts and paste the result back into the original script when you are satisfied with it. To debug longer sections, clone the entire Blend script as a second .XML file, remove from this second script all the sections you are not interested in, debug what remains, and paste the debugged code back into the original."}),"\n",(0,s.jsx)(n.h2,{id:"tracemode-tool",children:"Tracemode tool"}),"\n",(0,s.jsx)(n.p,{children:"When you run a Blend script with the tracemode option:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"> *usoft-bindir*\\ublendit.exe *script-file* tracemode\n"})}),"\n",(0,s.jsx)(n.p,{children:"a browser-based debugging tool is presented. This tool allows you to inspect script processing in a number of ways. For example, this tool allows you to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Expand and collapse script sections."}),"\n",(0,s.jsx)(n.li,{children:"Inspect variable values by hovering a variable placeholder."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["After use, if you want to re-run the script, you must remember to first close the browser window created by ",(0,s.jsx)(n.strong,{children:"tracemode"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"detecting-obsolete-code",children:"Detecting obsolete code"}),"\n",(0,s.jsx)(n.p,{children:"You can get warnings that you are using Blend commands that are either obsolete or deprecated. Add obsoleted=true when you give the command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"> *usoft-bindir*\\ublendit.exe *script-file* obsoleted=true\n"})}),"\n",(0,s.jsx)(n.p,{children:"This causes the following type of warning to appear on the console:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"pc:assign is obsoleted. Use pc:assign-string\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);