"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[62792],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},70296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Task_flow/Jobs/Import_Task_Set_Virtuals_Managing_Decision_Trees","title":"Import Task Set Virtuals Managing Decision Trees","description":"Complex import tasks often include decision trees: if the current import record meets a SQL condition, then if it meets another condition A should happen, otherwise B, etc.","source":"@site/docs/Task_flow/Jobs/Import_Task_Set_Virtuals_Managing_Decision_Trees.md","sourceDirName":"Task_flow/Jobs","slug":"/Task_flow/Jobs/Import_Task_Set_Virtuals_Managing_Decision_Trees","permalink":"/udocs/Task_flow/Jobs/Import_Task_Set_Virtuals_Managing_Decision_Trees","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Import_Task_Set_Virtuals_Managing_Decision_Trees"},"sidebar":"sidebar","previous":{"title":"Job Parameters as Import Task Variables","permalink":"/udocs/Task_flow/Jobs/Job_Parameters_as_Import_Task_Variables"},"next":{"title":"Import Task Set Virtuals in Record-by-Record Computations","permalink":"/udocs/Task_flow/Jobs/Import_Task_Set_Virtuals_in_RecordbyRecord_Computations"}}');var i=n(74848),r=n(28453);const a={id:"Import_Task_Set_Virtuals_Managing_Decision_Trees"},o="Import Task Set Virtuals Managing Decision Trees",l={},c=[];function u(e){const t={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"import-task-set-virtuals-managing-decision-trees",children:"Import Task Set Virtuals Managing Decision Trees"})}),"\n",(0,i.jsx)(t.p,{children:"Complex import tasks often include decision trees: if the current import record meets a SQL condition, then if it meets another condition A should happen, otherwise B, etc."}),"\n",(0,i.jsx)(t.p,{children:"You can use import task set virtuals to keep track of decision trees in import tasks."}),"\n",(0,i.jsx)(t.p,{children:"This strategy makes it easier to construct and maintain decision trees in complex import tasks."}),"\n",(0,i.jsx)(t.p,{children:"To use an import task set virtual for managing decision trees:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Define an (additional) import task set virtual for the driving set of the import task."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Define an import SQL statement setting the virtual to a certain value if a SQL condition is met. Such a statement would typically have the form:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"UPDATE \xa0 \xa0driving-set\nSET \xa0 \xa0 \xa0 virtual = value\nWHERE \xa0 \xa0 ... (subquery) ...\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"The WHERE clause compares one or more (computations of) driving set values to (computations of) database values."}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsx)(t.li,{children:"Define a further import SQL statement referring to the current value of the virtual, e.g."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"UPDATE \xa0 \xa0driving-set\nSET \xa0 \xa0 \xa0 virtual = value2\nWHERE \xa0 \xa0 ... (subquery) ...\nAND \xa0 \xa0 \xa0 virtual = value1\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"and so on."}),"\n",(0,i.jsxs)(t.ol,{start:"4",children:["\n",(0,i.jsx)(t.li,{children:"Finally, make the import statement(s) subject to values for the virtual. A typical construction would be:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"INSERT INTO table\n(\n \xa0 \xa0SELECT \xa0 \xa0...\n \xa0 \xa0FROM \xa0 \xa0driving-set\n \xa0 \xa0WHERE \xa0 virtual = value\n)\n\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);