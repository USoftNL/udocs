"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[28481],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}},76525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcZipFileCreate","title":"pc:ZipFileCreate","description":"This article is about the pc:ZipFileCreate Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcZipFileCreate.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcZipFileCreate","permalink":"/udocs/Repositories/Blend_directives/pcZipFileCreate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcZipFileCreate"},"sidebar":"sidebar","previous":{"title":"pc:ZipFile","permalink":"/udocs/Repositories/Blend_directives/pcZipFile"},"next":{"title":"pc:ZipFileCreateFromDir","permalink":"/udocs/Repositories/Blend_directives/pcZipFileCreateFromDir"}}');var s=n(74848),r=n(28453);const l={id:"pcZipFileCreate"},a="pc",c={},p=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsxs)(t.h1,{id:"pc",children:["pc",":ZipFileCreate"]})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This article is about the ",(0,s.jsxs)(t.strong,{children:["pc",":ZipFileCreate"]}),(0,s.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"pc-1",children:(0,s.jsxs)(t.strong,{children:["pc",":ZipFileCreate"]})}),"\n",(0,s.jsxs)(t.p,{children:["Compresses one or more files or inline content as entries in a ZIP file. This happens on an INSERT-NO-UPDATE basis. If the file already exists, new entries are added to it, entries with the same names remain silently unchanged, and entries not mentioned in the <pc",":ZipFileCreate","> directive are left alone.\nThere is no result value."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Syntax"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'<pc:ZipFileCreate filepath="*file-path*" select="*xpath*">\n\n*input*\n\n</pc:ZipFileCreate>\n\n*input*  ::=  [\n               { <File                entryname="*entryname*"  path="*inputfile*" />          |\n                 <Content             entryname="*entryname*"> *content* </Content>           |\n                 <ContentFromBase64   entryname="*entryname*"> *content* </ContentFromBase64>   \n               }   ... ]\n\n*entryname*  ::=  *relative-file-path*\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The required ",(0,s.jsx)(t.strong,{children:"filepath"}),' is a path leading to the target ZIP file. This is conventionally a file that has the ".zip" file extension. The optional ',(0,s.jsx)(t.strong,{children:"select"})," attribute can be used to restrict the operation to a specific part of input."]}),"\n",(0,s.jsxs)(t.p,{children:["The required ",(0,s.jsx)(t.strong,{children:"input"})," can either be specified as a list of external files to be zipped, or as inline content to be compressed:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"To supply a list of one or more files, use the <File> element name for each input file. In the path attribute, specify where the file is found on the file system."}),"\n",(0,s.jsx)(t.li,{children:"To supply inline content, place it inside a <Content> element or, if the content is binary and 64-bit encoded, a <ContenFromBase64> element."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In both cases, for ",(0,s.jsx)(t.strong,{children:"entryname"}),", supply a relative filepath that determines the place of the zipped file in the internal folder structure of the ZIP file."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Example 1"})}),"\n",(0,s.jsx)(t.p,{children:"This example zips 3 files into 1 ZIP file."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ZipFileCreate filepath="c:\\temp\\mynewzip.zip">\n   <File entryname="assets\\resources.xml" path="c:\\temp\\resources.xml" />\n   <File entryname="assets\\tasks.xml" path="c:\\temp\\tasks.xml" />\n   <File entryname="assets\\tasks.txt" path="c:\\temp\\tasks.txt" />\n</pc:ZipFileCreate>\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Example 2"})}),"\n",(0,s.jsx)(t.p,{children:"This is the same as Example 1, except for the select attribute. This example zips only the 2 first referenced files. The 3rd <File> element is not processed because it does not match the location path in the select attribute."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ZipFileCreate filepath="c:\\temp\\mynewzip.zip" select="*[contains(@path,\'.xml\')]">\n   <File entryname="assets\\resources.xml" path="c:\\temp\\resources.xml" />\n   <File entryname="assets\\tasks.xml" path="c:\\temp\\tasks.xml" />\n   <File entryname="assets\\tasks.txt" path="c:\\temp\\tasks.txt" />\n</pc:ZipFileCreate>\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Example 3"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<pc:ZipFileCreate filepath="c:\\temp\\mynewzip.zip">\n    <Content entryname="assets\\resources.txt">No resources apply to this instance.</Content>\n</pc:ZipFileCreate>\n'})}),"\n",(0,s.jsx)(t.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);