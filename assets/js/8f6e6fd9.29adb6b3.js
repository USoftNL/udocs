"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[83867],{28453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>r});var t=l(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},45975:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Extensions/USCSXSL_internal_component/USCSXSLApply2File","title":"USCSXSL.Apply2File","description":"This article is about the Apply2File method of the USCSXSL internal component.","source":"@site/docs/Extensions/USCSXSL_internal_component/USCSXSLApply2File.md","sourceDirName":"Extensions/USCSXSL_internal_component","slug":"/Extensions/USCSXSL_internal_component/USCSXSLApply2File","permalink":"/udocs/Extensions/USCSXSL_internal_component/USCSXSLApply2File","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USCSXSLApply2File"},"sidebar":"sidebar","previous":{"title":"USCSXSL.Apply","permalink":"/udocs/Extensions/USCSXSL_internal_component/USCSXSLApply"},"next":{"title":"USCSXSL.Blend","permalink":"/udocs/Extensions/USCSXSL_internal_component/USCSXSLBlend"}}');var s=l(74848),i=l(28453);const o={id:"USCSXSLApply2File"},r="USCSXSL.Apply2File",a={},c=[{value:"<strong>USCSXSL.Apply2File</strong>",id:"uscsxslapply2file-1",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"uscsxslapply2file",children:"USCSXSL.Apply2File"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"Apply2File"})," method of the ",(0,s.jsx)(n.a,{href:"/Extensions/USCSXSL_internal_component",children:"USCSXSL internal component"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"uscsxslapply2file-1",children:(0,s.jsx)(n.strong,{children:"USCSXSL.Apply2File"})}),"\n",(0,s.jsxs)(n.p,{children:["Applies a specific, non-default transformation to an XML input document and writes the result to a file.\nThe input document may contain calls to USCSXSL extension functions (this is an added possibility compared to calling ",(0,s.jsx)(n.strong,{children:"USXSL.Apply2File"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["If you use USCSXSL to process a USoft Blend script, then you apply to this script the default Batch.1.0.xsl transformation. Do this not by calling USCSXSL.Apply2File() but rather by calling ",(0,s.jsx)(n.strong,{children:"USCSXSL.Blend()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select uscsxsl.apply2file( *xml*, *xsl*, *xml-resultfilepath*  [ , *variable-name*, *variable-value* ... ] )\n\n*xml*  :=  { *xml-filepath* | *xml-document* }\n*xsl*  :=  ( *xsl-filepath* | *xsl-document* }\n"})}),"\n",(0,s.jsx)(n.p,{children:"All arguments are single-quoted string values."}),"\n",(0,s.jsxs)(n.p,{children:["The required ",(0,s.jsx)(n.em,{children:"xml"})," must be a valid XML document. You can submit this XML document either as a file on the file system that you reference by ",(0,s.jsx)(n.em,{children:"xml-filepath"})," or inline as a literal ",(0,s.jsx)(n.em,{children:"xml-document"})," string."]}),"\n",(0,s.jsxs)(n.p,{children:["The required ",(0,s.jsx)(n.em,{children:"xsl"})," must be a valid XSLT 1.0 transformation. You can submit this transformation either as a file on the file system that you reference by ",(0,s.jsx)(n.em,{children:"xsl-filepath"})," or inline as a literal ",(0,s.jsx)(n.em,{children:"xsl-document"})," string."]}),"\n",(0,s.jsxs)(n.p,{children:["Optionally, you can pass any number of Blend input parameters as ",(0,s.jsx)(n.em,{children:"variable-name=variable-value"})," pairs."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["From USoft 10.0.1I, ",(0,s.jsx)(n.em,{children:"xml-resultfilepath"})," is allowed to be identical to ",(0,s.jsx)(n.em,{children:"xml-filepath."})," In this case, be aware that the result file is forceably overwritten, even if the transformation fails."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select uscsxsl.apply2file( '<MyClipboardNow/>', 'c:\\temp\\PrintClipboard.xsl', 'c:\\temp\\Result.xml'  )\n"})}),"\n",(0,s.jsx)(n.p,{children:'If the file content of the "c:\\temp\\PrintClipboard.xsl" file is:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="windows-1252"?>\n<xsl:stylesheet version="1.0"\n  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"\n  xmlns:clipboard="USoft:ClipBoard"\n>\n<xsl:output method="xml" encoding="UTF-8" omit-xml-declaration="yes"/>\n\n<xsl:template match="*|@*|comment()|processing-instruction()|text()">\n  <xsl:copy>\n    <xsl:apply-templates select="*|@*|text()|comment()|processing-instruction()"/>\n  </xsl:copy>\n</xsl:template>\n\n<xsl:template match="MyClipboardNow">\n  <xsl:copy>\n    <xsl:value-of select="clipboard:GetText()"/>\n  </xsl:copy>\n</xsl:template>\n\n</xsl:stylesheet>\n'})}),"\n",(0,s.jsx)(n.p,{children:'and your clipboard currently contains "Hello World", then the contents of the Result.xml file will be:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<MyClipboardNow>Hello World</MyClipboardNow>\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);