"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[37391],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},89931:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Repositories/Blend_functions/directoriesDirectoryContent","title":"directories:DirectoryContent","description":"This article is about the directories:DirectoryContent Blend function.","source":"@site/docs/Repositories/Blend_functions/directoriesDirectoryContent.md","sourceDirName":"Repositories/Blend_functions","slug":"/Repositories/Blend_functions/directoriesDirectoryContent","permalink":"/udocs/Repositories/Blend_functions/directoriesDirectoryContent","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"directoriesDirectoryContent"},"sidebar":"sidebar","previous":{"title":"dates:ShowInputFormats","permalink":"/udocs/Repositories/Blend_functions/datesShowInputFormats"},"next":{"title":"directories:DirectoryExists","permalink":"/udocs/Repositories/Blend_functions/directoriesDirectoryExists"}}');var r=i(74848),s=i(28453);const l={id:"directoriesDirectoryContent"},o="directories",c={},d=[{value:"<strong>directories</strong>",id:"directories-1",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"directories",children:["directories",":DirectoryContent"]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This article is about the ",(0,r.jsxs)(n.strong,{children:["directories",":DirectoryContent"]}),(0,r.jsx)(n.a,{href:"/Repositories/Blend_functions",children:" Blend function"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"directories-1",children:(0,r.jsxs)(n.strong,{children:["directories",":DirectoryContent"]})}),"\n",(0,r.jsx)(n.p,{children:"Returns a node set enumerating files and folders found in the filesystem at the location of filepath."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Syntax"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Namespace declaration"})}),"\n",(0,r.jsx)(n.p,{children:"You need to declare this namespace only if you call the function directly from the USCSXSL component but outside Blend. In a Blend context (ublendit.exe, uscsxsl.blend()) the namespace is already declared in the Blend transformation, which is in xsl\\Util\\Batch.1.0.xsl in your USoft installation folder."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'xmlns:directories="USoft:Directories"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Function call"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"directories:DirectoryContent(\n*filepath*\n,  *filter*\n,  *level*\n,  *after*\n,  *before*\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Filepath"}),", ",(0,r.jsx)(n.em,{children:"filter"})," and ",(0,r.jsx)(n.em,{children:"level"})," are required. ",(0,r.jsx)(n.em,{children:"After"})," and ",(0,r.jsx)(n.em,{children:"before"})," are optional."]}),"\n",(0,r.jsxs)(n.p,{children:["The result is filtered using ",(0,r.jsx)(n.em,{children:"filter"})," and ",(0,r.jsx)(n.em,{children:"level"}),", and, optionally, ",(0,r.jsx)(n.em,{children:"after"})," and ",(0,r.jsx)(n.em,{children:"before"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Filter"})," is a DOS filter for folder- and filenames in which '*' (asterisk) is a name wildcard."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Level"})," is the number of directory levels taken into account from filepath, with '0' representing the directory at filepath itself and any files in this directory."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"After"})," (if passed) specifies a date value. Files stamped before this date are filtered from the result set."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Before"})," (if passed) specifies a date value. Files stamped after this date are filtered from the result set."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 1"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<pc:assign-nodeset mycontentslist=\"{directories:DirectoryContent($workingdir, '*.*', '1', '', '')}\" />\n<pc:copy-of select=\"$mycontentslist\"/>\n"})}),"\n",(0,r.jsx)(n.p,{children:"This example could return:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Directory dirpath="c:\\usoft\\1.0\\flatfiles\\using" dirname="using" lastwrite="2018/0103123145">\n  <File filepath="c:\\usoft\\1.0\\flatfiles\\using\\config.xsl" filename="config.xsl" lastwrite="2018/0103125957" />\n  <File filepath="c:\\usoft\\1.0\\flatfiles\\using\\sample.xsl" filename="sample.xsl" lastwrite="2018/0103123145" />\n</Directory>\n\n<File filepath="c:\\usoft\\1.0\\flatfiles\\config.xml" filename="config.xml" lastwrite="2018/0103132731" />\n<File filepath="c:\\usoft\\1.0\\flatfiles\\TRAVEL.con" filename="TRAVEL.con" lastwrite="2018/0103122019" />\n<File filepath="c:\\usoft\\1.0\\flatfiles\\TRAVEL.con" filename="TRAVEL.job" lastwrite="2018/0103122020" />\n<File filepath="c:\\usoft\\1.0\\flatfiles\\TRAVEL.esi" filename="TRAVEL.esi" lastwrite="2018/0103122021" />\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 2"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<pc:each\n  using=\"directories:DirectoryContent($workingdir, '*.*', '1', '', '')\"\n  select=\"Directory/File[not(@filename='deploy.xml')]\n  assign:result=\"@filename\">\n\n  <pc:CopyFileOverwrite\n    source=\"{path:Combine($sourcedir,$result)}\"\n    destination=\"{path:Combine($destdir,$result)}\"/>\n\n</pc:each>\n"})}),"\n",(0,r.jsx)(n.p,{children:"\xa0"})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);