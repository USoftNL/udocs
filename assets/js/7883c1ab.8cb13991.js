"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[62632],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},74620:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Extensions/USMeta_internal_component/USMetaRoles","title":"USMeta.Roles","description":"This article is about the Roles method of the USMeta internal component.","source":"@site/docs/Extensions/USMeta_internal_component/USMetaRoles.md","sourceDirName":"Extensions/USMeta_internal_component","slug":"/Extensions/USMeta_internal_component/USMetaRoles","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaRoles","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USMetaRoles"},"sidebar":"sidebar","previous":{"title":"USMeta.Relationships","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaRelationships"},"next":{"title":"USMeta.Sets","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaSets"}}');var o=t(74848),i=t(28453);const a={id:"USMetaRoles"},r="USMeta.Roles",l={},c=[{value:"<strong>USMeta.Roles</strong>",id:"usmetaroles-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"usmetaroles",children:"USMeta.Roles"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This article is about the ",(0,o.jsx)(n.strong,{children:"Roles"})," method of the ",(0,o.jsx)(n.a,{href:"/Extensions/USMeta_internal_component",children:"USMeta internal component"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"usmetaroles-1",children:(0,o.jsx)(n.strong,{children:"USMeta.Roles"})}),"\n",(0,o.jsx)(n.p,{children:"At runtime, gets metadata information about roles from the model developed in USoft Definer. For each retrieved role, this information takes the form of name/value pairs. Each name/value pair expresses a role attribute setting."}),"\n",(0,o.jsx)(n.p,{children:"Returns an XML document of the form demonstrated in Example 1 below."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Syntax"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Roles(\n\xa0\xa0\xa0\xa0*role-name-pattern*      Roles\n,\xa0\xa0\xa0*description-pattern*    Description\n,\xa0\xa0\xa0*mime-type*              MimeType\n)\n\n*mime-type*   ::=  {  application/xml\n                 ,  xml\n                 ,  application/json\n                 ,  json  }\n"})}),"\n",(0,o.jsx)(n.p,{children:"All parameters are optional. Parameter values that you pass are mapped to parameters by alias name. The 'ADMIN' value in the following example is for role-name-pattern because of the \"Roles\" alias:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT   USMeta.Roles( 'ADMIN' Roles )\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"For backward compatibility only, it is possible to supply parameter values by position. Using this syntax, a list of non-aliased values maps to the parameter list in the order stated, with empty values at the end of the list if you supply less than 2 values, and '' (the empty string) as a way of explicitly declaring an empty value."})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Role-name-pattern"})," is a regular expression that matches zero, one or more role names in the model. The result data is limited to roles matching the pattern. If ",(0,o.jsx)(n.em,{children:"role-name-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Description-pattern"})," is a regular expression that matches zero, one or more descriptions of roles in the model. The result data is limited to roles with a description matching the pattern. If ",(0,o.jsx)(n.em,{children:"description-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Mime-type"})," determines whether the output is in XML ( \u2018application/xml\u2018 or 'xml\u2019) or in JSON ('application/json\u2019 or 'json\u2019). The default is XML."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Example 1"})}),"\n",(0,o.jsx)(n.p,{children:"This example returns column information about any roles in the model in which the word 'configures' exists in the Description:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Roles(\n   '.*'               Roles\n,  '.*configures.*'   Description\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Roles>\n      <Role NAME="MAINTAINER" MODULE="USoftBindingModule" DESCRIPTION="Person who configures the app" DEPLOYMENT_CONFIGURATION=""/>\n   </Roles>\n</Meta>\n'})}),"\n",(0,o.jsx)(n.p,{children:"\xa0"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);