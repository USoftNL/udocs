"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[95095],{28453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>i});var n=t(96540);const s={},o=n.createContext(s);function r(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:a},e.children)}},88801:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Web_and_app_UIs/UDB_DataSourceMetaContainer/UDB_DataSourceMetaContainer_object","title":"UDB DataSourceMetaContainer object","description":"----","source":"@site/docs/Web_and_app_UIs/UDB_DataSourceMetaContainer/UDB_DataSourceMetaContainer_object.md","sourceDirName":"Web_and_app_UIs/UDB_DataSourceMetaContainer","slug":"/Web_and_app_UIs/UDB_DataSourceMetaContainer/UDB_DataSourceMetaContainer_object","permalink":"/udocs/Web_and_app_UIs/UDB_DataSourceMetaContainer/UDB_DataSourceMetaContainer_object","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"USoft11","permalink":"/udocs/tags/u-soft-11"},{"inline":true,"label":"USoft10","permalink":"/udocs/tags/u-soft-10"}],"version":"current","frontMatter":{"id":"UDB_DataSourceMetaContainer_object","tags":["USoft11","USoft10"]},"sidebar":"sidebar","previous":{"title":"UDB DataSourceMetaContainer","permalink":"/udocs/Web_and_app_UIs/UDB_DataSourceMetaContainer"},"next":{"title":"$.udbMeta(ds).alias()","permalink":"/udocs/Web_and_app_UIs/UDB_DataSourceMetaContainer/udbMetadsalias"}}');var s=t(74848),o=t(28453);const r={id:"UDB_DataSourceMetaContainer_object",tags:["USoft11","USoft10"]},i="UDB DataSourceMetaContainer object",c={},d=[];function l(e){const a={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"udb-datasourcemetacontainer-object",children:"UDB DataSourceMetaContainer object"})}),"\n",(0,s.jsx)(a.hr,{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"USoft 11``{.vs_11}"})}),"\n",(0,s.jsx)(a.admonition,{type:"danger",children:(0,s.jsxs)(a.p,{children:["This article describes the USoft 10 product only.\nIn USoft 11, the web UI API was revised and improved. For full details, go to:\n",(0,s.jsx)(a.a,{href:"/udocs/Web_and_app_UIs/UDB_udb/Revised_web_UI_API_in_USoft_11",children:"Revised web UI API in USoft 11"})]})}),"\n",(0,s.jsx)(a.hr,{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"USoft 10``{.vs_10}"})}),"\n",(0,s.jsx)(a.admonition,{type:"note",children:(0,s.jsxs)(a.p,{children:["This article is about the ",(0,s.jsx)(a.strong,{children:"DataSourceMetaContainer"})," object in the UDB object model. This model is for data exchange between USoft web UIs and Rules Engines.\nThis model is built around the ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_udb",children:"udb"}),", DataSourceMetaContainer, ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_DataSourceContainer",children:"DataSourceContainer"}),", ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_Rowset",children:"Rowset"}),", ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_Rows",children:"Rows"}),", ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_ColsMeta",children:"ColsMeta"}),", and ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_Cols",children:"Cols"})," object types. See also ",(0,s.jsx)(a.a,{href:"/Web_and_app_UIs/UDB_Events",children:"UDB events"}),"."]})}),"\n",(0,s.jsxs)(a.p,{children:["A ",(0,s.jsx)(a.strong,{children:"DataSourceMetaContainer"})," object has knowledge of metadata that describe a data source or set of data sources."]}),"\n",(0,s.jsx)(a.admonition,{type:"tip",children:(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"Data source selectors"}),"\nIn the syntax block below, the required ",(0,s.jsx)(a.em,{children:"ds"})," is a ",(0,s.jsx)(a.strong,{children:"data source selector"}),":****an expression whereby you identify a single data source or multiple data source. Data source selectors play a role in calls to the DataSourceMetaContainer object, but also in calls to the DataSourceContainer object:\nYou can identify a single data source by a simple ",(0,s.jsx)(a.em,{children:"data-source"})," name string. You can identify a set of multiple data sources by an array of simple string values.\nIf the data source is on the current page, you can identify it simply either by its ",(0,s.jsx)(a.em,{children:"data-source-name"})," or by its ",(0,s.jsx)(a.em,{children:"data-source-id."})," if it is on a different page, you can identify it by prefixing ",(0,s.jsx)(a.em,{children:"page-id"})," followed by a period. It is also possible to refer to a data source in a specific frame control. Prefix with ",(0,s.jsx)(a.em,{children:"frame-id"})," followed by a double colon, or to identify the top-level frame, write the double colon but not the ",(0,s.jsx)(a.em,{children:"frame-id"})," prefix.\nYou can also identify a data source using ",(0,s.jsx)(a.a,{href:"/udocs/Web_and_app_UIs/Data_sources/Data_source_path_syntax",children:"data source path syntax"}),".\nFinally, you can select types of data source by using ",(0,s.jsx)(a.em,{children:"meta-selector"})," values. This selection technique cannot be combined with the other options. The \u2018",":table","\u2019 meta-selector selects all table data sources in scope. The '",":variable","\u2019 meta-selector selects all variable data sources in scope. The '",":virtual","\u2019 meta-selector selects all virtual data sources in scope.\n",(0,s.jsx)(a.em,{children:"Examples"})]})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"Syntax"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-js",children:"$.udbMeta( *ds* )\n\n*ds*                 ::= { *data-source* | *data-source-array* )\n\n*data-source-array*  ::= [ *data-source*, *data-source* ... ]\n\n*data-source*  ::=\n    {\n      [*page-id*.][[*frame-id*]::]{*data-source-name*|*data-source-id*} |\n*data-source-path*  |\n*meta-selector*\n    }\n\n*meta-selector* ::=   \n    {\n      :table    |\n      :variable |\n      :virtual\n    }\n"})}),"\n",(0,s.jsx)(a.admonition,{type:"warning",children:(0,s.jsxs)(a.p,{children:["In this syntax block, square brackets are ambiguous. They are used as literal array brackets when explaining ",(0,s.jsx)(a.em,{children:"data-source-array"})," in the second line. In the other cases, they surround optional, as opposed to required, syntax elements."]})}),"\n",(0,s.jsxs)(a.p,{children:["The required ",(0,s.jsx)(a.em,{children:"ds"})," is a ",(0,s.jsx)(a.strong,{children:"data source selector"})," as explained at the top of this article.\n\xa0"]}),"\n",(0,s.jsx)(a.admonition,{type:"note",children:(0,s.jsxs)(a.p,{children:["All functions listed for the ",(0,s.jsx)(a.strong,{children:"udbMeta"})," are equally exposed by the ",(0,s.jsx)(a.strong,{children:"udb"})," object."]})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);