"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[66183],{28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>i});var t=o(96540);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},48623:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Extensions/DotNet_components/Component_references_and_inheritance_for_dotNet","title":"Component references and inheritance for dotNet","description":"You can have a dotNet component \'A\' refer to a dotNetcomponent \'B\'. Such a reference allows you to use the methods and variables of \'B\' in calls to \'A\'.","source":"@site/docs/Extensions/DotNet_components/Component_references_and_inheritance_for_dotNet.md","sourceDirName":"Extensions/DotNet_components","slug":"/Extensions/DotNet_components/Component_references_and_inheritance_for_dotNet","permalink":"/udocs/Extensions/DotNet_components/Component_references_and_inheritance_for_dotNet","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Component_references_and_inheritance_for_dotNet"},"sidebar":"sidebar","previous":{"title":"DotNet-USoft data provider","permalink":"/udocs/Extensions/DotNet_components/DotNetUSoft_data_provider"},"next":{"title":"Off-the-shelf components","permalink":"/udocs/Extensions/Off-the-shelf_components"}}');var s=o(74848),r=o(28453);const c={id:"Component_references_and_inheritance_for_dotNet"},i="Component references and inheritance for dotNet",l={},a=[{value:"Component refers to other component",id:"component-refers-to-other-component",level:3},{value:"Component inherits from other component",id:"component-inherits-from-other-component",level:3},{value:"Notes on name resolution",id:"notes-on-name-resolution",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"component-references-and-inheritance-for-dotnet",children:"Component references and inheritance for dotNet"})}),"\n",(0,s.jsxs)(n.p,{children:["You can have a dotNet component 'A' ",(0,s.jsx)(n.em,{children:"refer to"})," a dotNetcomponent 'B'. Such a reference allows you to use the methods and variables of 'B' in calls to 'A'."]}),"\n",(0,s.jsxs)(n.p,{children:["It is also possible to have a component 'C' ",(0,s.jsx)(n.em,{children:"inherit"})," another component 'D'. This inheritance causes 'C' to contain the methods and variables of 'D' implicitly."]}),"\n",(0,s.jsx)(n.h3,{id:"component-refers-to-other-component",children:"Component refers to other component"}),"\n",(0,s.jsxs)(n.p,{children:["To have a dotNet component 'A' ",(0,s.jsx)(n.em,{children:"refer to"})," a dotNet component 'B', all you need to do is to declare an object of type 'B' in the Program Source of component 'A', as the Example shows."]}),"\n",(0,s.jsx)(n.p,{children:"You cannot have reference circles. If 'A' refers to 'B' and 'B' refers to 'X', then 'X' cannot refer to 'A'."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.p,{children:"Component A:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-language-cs",children:"using System;\n\npublic class A{\n   public B b;\n\n   public A(){\n      b = new B();\n   }\n\n   public int AddOne(int val){\n      return val + 1;\n   }\n   public int AddTwo(int val){\n      return b.AddTwo(val);\n   }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Component B:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-language-cs",children:"using System;\n\npublic class B{\n   public B(){}\n\n   public int AddTwo(int val){\n      return val + 2;\n   }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"To test, try these calls:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"select A.AddOne(1);\nselect A.AddTwo(1);\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"component-inherits-from-other-component",children:"Component inherits from other component"}),"\n",(0,s.jsxs)(n.p,{children:["To have a dotNet component 'C' ",(0,s.jsx)(n.em,{children:"inherit"})," methods and variables from a dotNet component 'D', simply extend class C by class D:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"public class C : D\n"})}),"\n",(0,s.jsx)(n.p,{children:"Inheriting abstract methods is not supported at this time."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.p,{children:"Component C:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-language-cs",children:'using System;\n\npublic class C : D{\n   public C(){} \n\n   public string Hello(){\n      return "Hello world";\n   } \n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Component D:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-language-cs",children:'using System;\n\npublic class D{\n   public  string Bye(){\n      return "Bye world";\n   }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To test, try these calls:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"select C.Hello();\nselect C.Bye(); \n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"notes-on-name-resolution",children:"Notes on name resolution"}),"\n",(0,s.jsxs)(n.p,{children:["If 'X' ",(0,s.jsx)(n.em,{children:"refers to"})," 'Y' or 'X' ",(0,s.jsx)(n.em,{children:"inherits"})," 'Y', you can set Assembly References for 'X' to:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Y\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is optional. If you don't do this, the compiler will give you a warning."}),"\n",(0,s.jsx)(n.p,{children:"If the compiler can't find a class within the Program Source of a component itself, it will automatically look for the class in other components within the same instance of USoft Definer."}),"\n",(0,s.jsx)(n.p,{children:"A limitation is that the compiler will NOT look for the class in any interface components exposed by synchronised modules that your USoft Definer instance may consume."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);