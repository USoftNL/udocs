"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[88314],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const i={},c=s.createContext(i);function l(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(c.Provider,{value:n},e.children)}},81871:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"Repositories/Blend_directives/pcblend","title":"pc:blend","description":"This article is about the pc:blend Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcblend.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcblend","permalink":"/udocs/Repositories/Blend_directives/pcblend","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcblend"},"sidebar":"sidebar","previous":{"title":"pc:assign-string-default","permalink":"/udocs/Repositories/Blend_directives/pcassignstringdefault"},"next":{"title":"pc:call","permalink":"/udocs/Repositories/Blend_directives/pccall"}}');var i=t(74848),c=t(28453);const l={id:"pcblend"},a="pc",r={},o=[{value:"<strong>pc</strong>",id:"pc-1",level:2},{value:"Variable scope and parameter scope",id:"variable-scope-and-parameter-scope",level:2},{value:"Errors",id:"errors",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"pc",children:["pc",":blend"]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This article is about the ",(0,i.jsxs)(n.strong,{children:["pc",":blend"]}),(0,i.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"pc-1",children:(0,i.jsxs)(n.strong,{children:["pc",":blend"]})}),"\n",(0,i.jsx)(n.p,{children:"Executes processing instructions represented by nodes located in a different script file, or in a different part of the current script file."}),"\n",(0,i.jsxs)(n.p,{children:["Think of this as a ",(0,i.jsx)(n.em,{children:"call"})," to those nodes, in the sense of a procedure call. A synonym of ",(0,i.jsxs)(n.strong,{children:["pc",":blend"]})," is ",(0,i.jsxs)(n.a,{href:"/udocs/Repositories/Blend_directives/pccall",children:["pc",":call"]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you call a section within the current script file, it is customary to place the called target code block in a ",(0,i.jsxs)(n.a,{href:"/udocs/Repositories/Blend_directives/pcdefs",children:["pc",":defs"]}),"****section at the beginning of the script, as in the Examples, but this is not necessary."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The result is the same as when the nodes pointed at are passed to ",(0,i.jsx)(n.strong,{children:"ublendit.exe"}),"on the command line, or to ",(0,i.jsx)(n.strong,{children:"select uscsxsl.blend"})," in a SQL command context."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Syntax"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<pc:blend\n  {\n    pc:filepath = "*file-path*" |\n    pc:xpath = "*root-xpath* >> *node-set*" |\n    pc:id = "*id*" |\n\xa0\xa0\xa0\xa0*embedded-xml*\n  }\n  [ *parameter-list* ]\n  [ pc:samecontext="{true|yes}" ]\n/>\n\n*root-xpath*  ::=  /*xpath*\n*parameter-list*  ::=  variable = "*value*" ...\t\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You must either have one of the attributes ",(0,i.jsxs)(n.strong,{children:["pc",":filepath",", pc",":xpath",", pc",":id",","]})," or you must have ",(0,i.jsx)(n.a,{href:"/udocs/Repositories/Blend_scripts_for_repository_management/Guide_to_Blend_expressions_and_data_types",children:"embedded XML"}),". The attributes point to the target code block to be executed (Examples 1 and 2). If you have ",(0,i.jsx)(n.em,{children:"embedded-xml"}),", that embedded XML is itself the target code block (Example 3)."]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsxs)(n.strong,{children:["pc",":filepath"]})," to point at a different Blend script file on the file system."]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsxs)(n.strong,{children:["pc",":xpath"]})," (Example 1) or ",(0,i.jsxs)(n.strong,{children:["pc",":id"]})," (Example 2) to point at a target section within the Blend script itself. It is customary to place this target section, ie., the section to be executed, in a ",(0,i.jsxs)(n.strong,{children:["pc",":defs"]})," element near the top of the script. In the case of ",(0,i.jsxs)(n.strong,{children:["pc",":defs"]}),", you can choose to point at the descendant nodes to be executed (as in Example 1). You can also choose to point at the ",(0,i.jsxs)(n.strong,{children:["pc",":defs"]})," element itself, in which case all child nodes of the ",(0,i.jsxs)(n.strong,{children:["pc",":defs"]})," element are executed."]}),"\n",(0,i.jsxs)(n.p,{children:["If you use ",(0,i.jsxs)(n.strong,{children:["pc",":xpath",","]})," ",(0,i.jsx)(n.em,{children:"root-path"})," must be an absolute path, ie., it must start with a forward slash."]}),"\n",(0,i.jsxs)(n.p,{children:["You can pass both ",(0,i.jsxs)(n.strong,{children:["pc",":filepath"]})," and ",(0,i.jsxs)(n.strong,{children:["pc",":xpath"]}),". In this case, ",(0,i.jsxs)(n.strong,{children:["pc",":filepath"]})," points at an external script file, and ",(0,i.jsxs)(n.strong,{children:["pc",":xpath"]})," at a location within that script file."]}),"\n",(0,i.jsxs)(n.p,{children:["Optionally, with your call, you can pass a ",(0,i.jsx)(n.em,{children:"parameter-list"})," containing one or more name-value pairs as input parameters, using assigment attributes (with the syntax ",(0,i.jsx)(n.em,{children:"variable"}),'="',(0,i.jsx)(n.em,{children:"value"}),"\u201d). This is demonstrated in Examples 1-3."]}),"\n",(0,i.jsx)(n.p,{children:"See Example 3 for details of variable scope and parameter scope."}),"\n",(0,i.jsxs)(n.p,{children:["For the optional ",(0,i.jsxs)(n.strong,{children:["pc",":samecontext"]}),", see the section on variable scope and parameter scope at the end of this article."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 1"})}),"\n",(0,i.jsx)(n.p,{children:"The output of this example is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hello world\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example demonstrates using ",(0,i.jsxs)(n.strong,{children:["pc",":xpath"]})," to point at the target nodes to be executed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command" pc:hideme="yes">\n  <pc:defs>\n    <pc:text>Hello </pc:text>\n    <pc:value-of select="$val"/>\n  </pc:defs>\n  <pc:blend pc:xpath="/example/pc:defs/*" val="world"/>\n</example>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 2"})}),"\n",(0,i.jsx)(n.p,{children:"The output of this example is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"blending is great once you are used to blend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example demonstrates using ",(0,i.jsxs)(n.strong,{children:["pc",":id"]})," to point at the target section to be executed. With this option,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'pc:id="*id*"\n'})}),"\n",(0,i.jsx)(n.p,{children:"is a convenient shorthand for:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pc:xpath=\"//pc:*[@id='*id*']\"\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here is the example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command" pc:hideme="yes">\n\t<pc:defs id="callme">\n\t\t<pc:text> once </pc:text><pc:value-of select="$msg"/>\n\t</pc:defs>\n\t<pc:defs id="123">\n\t\t<pc:text>blending</pc:text><pc:value-of select="$msg"/>\n\t</pc:defs>\n\t<pc:defs>\n\t\t<pc:blend id="123" pc:id="callme" msg="you are used to blend"/>\n\t</pc:defs>\n\t<pc:blend pc:id="123" msg=" is great"/>\n</example>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example 3"})}),"\n",(0,i.jsx)(n.p,{children:"The output of this example is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hi *user*\nLife is good\nFood is good\nCrime is bad\n"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates using embedded XML as the code block to be executed. This example also illustrates certain aspects of variable scope discussed in the next section."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<example xmlns:pc="Processing.Command" xmlns:assign="Processing.Command.Assign" pc:ignorewhitespace="yes" pc:hideme="yes">\n\t<pc:assign-string msg="Crime is bad"/>\n\t<pc:defs id="42">\n\t\t<pc:text>Life </pc:text><pc:value-of select="$msg"/>\n\t</pc:defs>\n\t<pc:defs name="findme">\n\t\t<pc:text>&#10;Food </pc:text><pc:value-of select="$msg"/>\n\t</pc:defs>\t\n\t<pc:blend msg="is good" assign:result="."> \n\t\t<pc:defs>\n\t\t\t<pc:text>Hi </pc:text><pc:value-of select="environment:GetVariable(\'USERNAME\')"/>\n\t\t\t<pc:newline/>\n\t\t</pc:defs>\n\t\t<pc:call pc:id="42" msg="{$msg}"/>\n\t\t<pc:call pc:xpath="/example/pc:defs[@name=\'findme\']" msg="{$msg}"/>\n\t</pc:blend>\n\t<pc:copy-of select="$result"/>\n\t<pc:newline/>\n\t<pc:value-of select="$msg"/>\n</example>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"variable-scope-and-parameter-scope",children:"Variable scope and parameter scope"}),"\n",(0,i.jsx)(n.p,{children:"Variables set in the calling context are automatically available in the called context."}),"\n",(0,i.jsxs)(n.p,{children:["Variables passed in the ",(0,i.jsx)(n.em,{children:"parameter-list"})," of the <pc",":blend","> call override any variable with the same name in the calling context."]}),"\n",(0,i.jsx)(n.p,{children:"Variables set locally in the called context are available only in that context. Variables set locally in the called context do not affect a setting for a variable with the same name in the calling context."}),"\n",(0,i.jsxs)(n.p,{children:["If you pass ",(0,i.jsxs)(n.strong,{children:["pc",":samecontext","=true"]}),", any local variables set by the called context will overwrite variables with the same name in the calling context."]}),"\n",(0,i.jsxs)(n.p,{children:["If you pass ",(0,i.jsxs)(n.strong,{children:["pc",":samecontext","=true"]})," and the called context uses ",(0,i.jsxs)(n.strong,{children:["pc",":terminate"]}),", not only the callee but also the caller will be terminated. If you pass ",(0,i.jsxs)(n.strong,{children:["pc",":samecontext","=false"]}),",****or you do not pass ",(0,i.jsxs)(n.strong,{children:["pc",":samecontext"]}),", the callee will terminate and then the caller will continue processing."]}),"\n",(0,i.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,i.jsxs)(n.p,{children:["<pc",":blend","> can lead to infinite recursion, eg."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<pc:blend pc:xpath="/*" />\n'})}),"\n",(0,i.jsx)(n.p,{children:"This is reported as a StackOverflowException."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);