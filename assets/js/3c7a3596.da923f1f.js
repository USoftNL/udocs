"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[28064],{28453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>a});var n=i(96540);const s={},r=n.createContext(s);function c(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(r.Provider,{value:t},e.children)}},43393:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Services/Custom_REST_services/Calling_a_REST_service_without_committing","title":"Calling a REST service without committing","description":"It is interesting to be able to run input data against the Rules Engine without committing. This allows you to see what WOULD happen to the data IF they were committed.","source":"@site/docs/Services/Custom_REST_services/Calling_a_REST_service_without_committing.md","sourceDirName":"Services/Custom_REST_services","slug":"/Services/Custom_REST_services/Calling_a_REST_service_without_committing","permalink":"/udocs/Services/Custom_REST_services/Calling_a_REST_service_without_committing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Calling_a_REST_service_without_committing"},"sidebar":"sidebar","previous":{"title":"Exposing REST services","permalink":"/udocs/Services/Custom_REST_services/Exposing_REST_services"},"next":{"title":"SQL statements in USoft services","permalink":"/udocs/Services/SQL_statements_in_USoft_services"}}');var s=i(74848),r=i(28453);const c={id:"Calling_a_REST_service_without_committing"},a="Calling a REST service without committing",o={},l=[{value:"The &quot;X-US-Transaction&quot; HTTP header",id:"the-x-us-transaction-http-header",level:2},{value:"Implementing X-US-Transaction in custom REST services",id:"implementing-x-us-transaction-in-custom-rest-services",level:2},{value:"Calling the service without committing",id:"calling-the-service-without-committing",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"calling-a-rest-service-without-committing",children:"Calling a REST service without committing"})}),"\n",(0,s.jsx)(t.p,{children:"It is interesting to be able to run input data against the Rules Engine without committing. This allows you to see what WOULD happen to the data IF they were committed."}),"\n",(0,s.jsxs)(t.p,{children:["In a predefined REST service built with the USoft Table Resource functional type, you can add the USoft-specific ",(0,s.jsx)(t.strong,{children:"X-US-Transaction"})," custom HTTP header to let clients send data without committing."]}),"\n",(0,s.jsx)(t.p,{children:"If you have written a custom REST service, you can manually implement this custom HTTP header in a similar way."}),"\n",(0,s.jsx)(t.h2,{id:"the-x-us-transaction-http-header",children:'The "X-US-Transaction" HTTP header'}),"\n",(0,s.jsx)(t.p,{children:"When calling the service, clients can set the USoft-specific custom HTTP header"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"X-US-Transaction"})}),"\n",(0,s.jsx)(t.p,{children:"to indicate the commit behaviour they want. Possible values that clients may pass in this HTTP header are:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Value"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Commit behaviour"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Rollback"}),(0,s.jsx)(t.td,{children:"Rules Service will check constraints that are evaluated at Record Store time.Data will NOT be committed."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PreCommit"}),(0,s.jsx)(t.td,{children:"Rules Service will check all constraints.Data will NOT be committed."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Commit"}),(0,s.jsx)(t.td,{children:"Rules Service will check all constraints and then commit."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["(The commit behaviour with ",(0,s.jsx)(t.strong,{children:"Commit"})," is the default behaviour.)"]}),"\n",(0,s.jsx)(t.p,{children:"For more information about constraint evaluation times, please go to USoft Definer Help, Rules Engine Guide."}),"\n",(0,s.jsx)(t.h2,{id:"implementing-x-us-transaction-in-custom-rest-services",children:"Implementing X-US-Transaction in custom REST services"}),"\n",(0,s.jsx)(t.p,{children:"In a custom REST service, you can implement the X-US-Transaction custom HTTP header by adding a Parameter:"}),"\n",(0,s.jsx)(t.p,{children:"1.\xa0Go to the method for which you want to add the specify-commit-behaviour facility."}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0In the Parameters tab, add a Parameter:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Name"}),(0,s.jsx)(t.td,{children:"transaction"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Type"}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Annotation"}),(0,s.jsx)(t.td,{children:'@HeaderParam("X-US-Transaction")'})]})]})]}),"\n",(0,s.jsx)(t.p,{children:'3.\xa0Check the method\'s Implementation. As an example, here is the Implementation of a method with 2 input parameters ("destination" and "tour_type") and a third Parameter "transaction" that allows the client to specify the commit behaviour:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-language-java",children:'USoftService usoft = new USoftService("*", this.getClass());\nusoft.open(therequest);\nInteger count = (Integer) usoft.sql(Integer.class, "DROP_TOUR" , new Object[]{ destination, tour_type }, transaction );\nusoft.close();\n\n/* return http error 404 if no records deleted */\nif(count.intValue() == 0)\n  throw new javax.ws.rs.WebApplicationException(404);\n'})}),"\n",(0,s.jsx)(t.h2,{id:"calling-the-service-without-committing",children:"Calling the service without committing"}),"\n",(0,s.jsx)(t.p,{children:"Exactly how you call a USoft REST service without committing depends on the calling application. If you use POSTMAN for testing:"}),"\n",(0,s.jsx)(t.p,{children:"1.\xa0Before pressing the Send button, first press the Headers button."}),"\n",(0,s.jsx)(t.p,{children:"A list with 0 or more preset headers appears. There is a column Header on the left and a column Value on the right."}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0On a new line, type:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Header"}),(0,s.jsx)(t.td,{children:"X-US-Transaction"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Value"}),(0,s.jsx)(t.td,{children:"PreCommit*"})]})]})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"or Rollback or Commit, depending on which commit behaviour you want."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"3.\xa0Press Send."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);