"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[57902],{27670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"Task_flow/Action_Language_reference_D-H/DataCommit","title":"DataCommit()","description":"This article is about the DataCommit action in the USoft Action Language.","source":"@site/docs/Task_flow/Action_Language_reference_D-H/DataCommit.md","sourceDirName":"Task_flow/Action_Language_reference_D-H","slug":"/Task_flow/Action_Language_reference_D-H/DataCommit","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/DataCommit","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"DataCommit"},"sidebar":"sidebar","previous":{"title":"Action Language reference D-H","permalink":"/udocs/Task_flow/Action_Language_reference_D-H"},"next":{"title":"DataRdbmsStatement()","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/DataRdbmsStatement"}}');var o=n(74848),i=n(28453);const s={id:"DataCommit"},r="DataCommit()",c={},m=[{value:"<strong>DataCommit()</strong>",id:"datacommit-1",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"datacommit",children:"DataCommit()"})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["This article is about the ",(0,o.jsx)(t.strong,{children:"DataCommit"})," action in the ",(0,o.jsx)(t.a,{href:"/udocs/Task_flow/Action_Language_reference/USoft_Action_Language",children:"USoft Action Language"}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"datacommit-1",children:(0,o.jsx)(t.strong,{children:"DataCommit()"})}),"\n",(0,o.jsx)(t.p,{children:"Commits the current transaction in the database. If the transaction fails, an error message is displayed."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Syntax"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"DataCommit( *mode* )\n\n*mode*  ::=  { QUIET | }\n"})}),"\n",(0,o.jsxs)(t.p,{children:["If the optional ",(0,o.jsx)(t.em,{children:"mode"})," is not passed, an information message is displayed that contains the number of committed records. If QUIET is passed as the value for ",(0,o.jsx)(t.em,{children:"mode"}),", this message is suppressed if the commit succeeds."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Example"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"DataCommit( QUIET )\n"})}),"\n",(0,o.jsx)(t.p,{children:"\xa0"})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);