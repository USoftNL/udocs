"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[28298],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:t},e.children)}},43333:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcZipFileEntry","title":"pc:ZipFileEntry","description":"This article is about the pc:ZipFileEntry Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcZipFileEntry.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcZipFileEntry","permalink":"/udocs/Repositories/Blend_directives/pcZipFileEntry","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcZipFileEntry"},"sidebar":"sidebar","previous":{"title":"pc:ZipFileCreateFromDir","permalink":"/udocs/Repositories/Blend_directives/pcZipFileCreateFromDir"},"next":{"title":"pc:ZipReplace","permalink":"/udocs/Repositories/Blend_directives/pcZipReplace"}}');var r=n(74848),s=n(28453);const c={id:"pcZipFileEntry"},o="pc",p={},l=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"pc",children:["pc",":ZipFileEntry"]})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["This article is about the ",(0,r.jsxs)(t.strong,{children:["pc",":ZipFileEntry"]}),(0,r.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,r.jsx)(t.h2,{id:"pc-1",children:(0,r.jsxs)(t.strong,{children:["pc",":ZipFileEntry"]})}),"\n",(0,r.jsx)(t.p,{children:"Extracts (unzips) an individual entry from a ZIP file."}),"\n",(0,r.jsx)(t.p,{children:"Returns the content of the unzipped entry."}),"\n",(0,r.jsx)(t.p,{children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'<pc:ZipFileEntry filepath="*file-path*" entryname="*relative-file-path*"/>\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The required ",(0,r.jsx)(t.strong,{children:"filepath"})," is a path leading to the ZIP file that you want to extract files from. The required ",(0,r.jsx)(t.strong,{children:"entryname"})," is a relative path leading to the entry you want to unzip."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Example"})}),"\n",(0,r.jsx)(t.p,{children:'This example outputs the contents of the "asset1.txt" file from the top-level directory "assets" in the ZIP file to the standard output (the console):'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<pc:assign-string\n    jarfile="c:\\labs\\GetAPI.jar"\n    jarentry = "assets\\asset1.txt"   />\n\n<pc:copy-of>\n  <pc:ZipFileEntry filepath="{$jarfile}" entryname="{$jarentry}" />\n</pc:copy-of>\n'})}),"\n",(0,r.jsx)(t.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);