"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[76111],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>p});var i=t(96540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},94030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcZipReplace","title":"pc:ZipReplace","description":"This article is about the pc:ZipReplace Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcZipReplace.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcZipReplace","permalink":"/udocs/Repositories/Blend_directives/pcZipReplace","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcZipReplace"},"sidebar":"sidebar","previous":{"title":"pc:ZipFileEntry","permalink":"/udocs/Repositories/Blend_directives/pcZipFileEntry"},"next":{"title":"pc:ZipUpdate","permalink":"/udocs/Repositories/Blend_directives/pcZipUpdate"}}');var s=t(74848),r=t(28453);const c={id:"pcZipReplace"},p="pc",o={},l=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"pc",children:["pc",":ZipReplace"]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsxs)(n.strong,{children:["pc",":ZipReplace"]}),(0,s.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"pc-1",children:(0,s.jsxs)(n.strong,{children:["pc",":ZipReplace"]})}),"\n",(0,s.jsx)(n.p,{children:"Compresses one or more files or inline content as entries in a ZIP file. This happens on a CLEAR-AND-INSERT basis. If the file already exists, all its entries are cleared, and the new entries supplied are compressed into the file instead."}),"\n",(0,s.jsx)(n.p,{children:"There is no result value."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Syntax"}),"\n\xa0"]}),"\n",(0,s.jsx)(n.p,{children:'The required filepath is a path leading to the ZIP file you want to update. This is conventionally a file that has the ".zip" file extension. The optional select attribute can be used to restrict the operation to a specific part of input.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<pc:ZipReplace filepath="*file-path*" select="*xpath*">\n\n*input*\n\n</pc:ZipReplace>\n\n*input*  ::=  [\n  { <File                entryname="*entryname*"  path="*inputfile*" />          |\n    <Content             entryname="*entryname*"> *content* </Content>           |\n    <ContentFromBase64   entryname="*entryname*"> *content* </ContentFromBase64>   \n  }   ... ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"The required input can either be specified as a list of external files to be zipped, or as inline content to be compressed:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To supply a list of one or more files, use the <File> element name for each input file. In the path attribute, specify where the file is found on the file system."}),"\n",(0,s.jsx)(n.li,{children:"To supply inline content, supply it as the content attribute of a <Content> element or, if the content is binary and 64-bit encoded, a <ContenFromBase64> element."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In both cases, for entryname, supply a relative file path that determines the place of the zipped file in the internal folder structure of the ZIP file."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<pc:ZipReplace filepath="{$myjarfile}" >\n    <Content entryname="{$myentry}" content="{$NewUServiceClasses}" />\n</pc:ZipReplace>\n'})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);