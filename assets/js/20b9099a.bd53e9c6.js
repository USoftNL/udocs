"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[88109],{19117:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Task_flow/Action_Language_reference_I-R/RecordRefresh","title":"RecordRefresh()","description":"This article is about the RecordRefresh action in the USoft Action Language.","source":"@site/docs/Task_flow/Action_Language_reference_I-R/RecordRefresh.md","sourceDirName":"Task_flow/Action_Language_reference_I-R","slug":"/Task_flow/Action_Language_reference_I-R/RecordRefresh","permalink":"/udocs/Task_flow/Action_Language_reference_I-R/RecordRefresh","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"RecordRefresh"},"sidebar":"sidebar","previous":{"title":"RecordDuplicate()","permalink":"/udocs/Task_flow/Action_Language_reference_I-R/RecordDuplicate"},"next":{"title":"RecordScrollTo()","permalink":"/udocs/Task_flow/Action_Language_reference_I-R/RecordScrollTo"}}');var s=n(74848),t=n(28453);const c={id:"RecordRefresh"},i="RecordRefresh()",a={},d=[{value:"<strong>RecordRefresh()</strong>",id:"recordrefresh-1",level:2}];function h(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"recordrefresh",children:"RecordRefresh()"})}),"\n",(0,s.jsx)(r.admonition,{type:"note",children:(0,s.jsxs)(r.p,{children:["This article is about the ",(0,s.jsx)(r.strong,{children:"RecordRefresh"})," action in the ",(0,s.jsx)(r.a,{href:"/udocs/Task_flow/Action_Language_reference/USoft_Action_Language",children:"USoft Action Language"}),"."]})}),"\n",(0,s.jsx)(r.h2,{id:"recordrefresh-1",children:(0,s.jsx)(r.strong,{children:"RecordRefresh()"})}),"\n",(0,s.jsx)(r.p,{children:"Shows the current record as it is stored internally. This is the state it had at the time of the last commit or record store."}),"\n",(0,s.jsx)(r.p,{children:"Values in secondary windows (such as subtype windows) are also refreshed."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"Syntax"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"RecordRefresh( *mode* )\n\n*mode*  :=  { CASCADING | }\n"})}),"\n",(0,s.jsxs)(r.p,{children:["If the value CASCADING is passed for ",(0,s.jsx)(r.em,{children:"mode"}),", corresponding child records in related windows are also refreshed."]})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>i});var o=n(96540);const s={},t=o.createContext(s);function c(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);