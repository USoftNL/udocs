"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[33011],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},90673:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Modeller_and_Rules_Engine/SQL_syntax/SQL_operators","title":"SQL operators","description":"This article is about SQL operators as part of the SQL syntax that USoft supports.","source":"@site/docs/Modeller_and_Rules_Engine/SQL_syntax/SQL_operators.md","sourceDirName":"Modeller_and_Rules_Engine/SQL_syntax","slug":"/Modeller_and_Rules_Engine/SQL_syntax/SQL_operators","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/SQL_operators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"SQL_operators"},"sidebar":"sidebar","previous":{"title":"Mathematical operators","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/Mathematical_operators"},"next":{"title":"Function calls","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/Function_calls"}}');var r=s(74848),a=s(28453);const o={id:"SQL_operators"},i="SQL operators",l={},d=[{value:"<strong>SQL operators</strong>",id:"sql-operators-1",level:2},{value:"LIKE",id:"like",level:2},{value:"IN",id:"in",level:2},{value:"EXISTS",id:"exists",level:2},{value:"BETWEEN \u2026 AND",id:"between--and",level:2},{value:"IS NULL, IS NOT NULL",id:"is-null-is-not-null",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sql-operators",children:"SQL operators"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This article is about ",(0,r.jsx)(n.strong,{children:"SQL operators"})," as part of the ",(0,r.jsx)(n.a,{href:"/Modeller_and_Rules_Engine/SQL_syntax",children:"SQL syntax"})," that USoft supports."]})}),"\n",(0,r.jsx)(n.h2,{id:"sql-operators-1",children:(0,r.jsx)(n.strong,{children:"SQL operators"})}),"\n",(0,r.jsx)(n.p,{children:"6 comparison operators are specific to the SQL language: LIKE, IN, EXISTS, BETWEEN, IS NULL, and IS NOT NULL."}),"\n",(0,r.jsx)(n.h2,{id:"like",children:"LIKE"}),"\n",(0,r.jsx)(n.p,{children:"The LIKE operator is used to compare a column expression with a string literal pattern in which two symbols can play the role of a wildcard:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%"})}),(0,r.jsx)(n.td,{children:"percentage"}),(0,r.jsx)(n.td,{children:"Any string of characters"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"_"})}),(0,r.jsx)(n.td,{children:"underscore"}),(0,r.jsx)(n.td,{children:"Any single character"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"An optional ESCAPE clause, placed after the condition, makes it possible to match occurrrences of percentage symbols and underscores. See Example 3."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 1"})}),"\n",(0,r.jsx)(n.p,{children:"This example returns all customers whose name starts with a letter 'A':"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT     name\nFROM       customer\nWHERE      name LIKE 'A%'\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 2"})}),"\n",(0,r.jsx)(n.p,{children:"This example returns all samples whose code does NOT have an 'A' in first position and a 'C' in third position:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT     code\nFROM       sample\nWHERE      code NOT LIKE 'A_C%'\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example 3"})}),"\n",(0,r.jsx)(n.p,{children:"This example returns all samples whose code starts with an 'A', followed by a literal '_' (that is, an underscore character) in second position:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT     code\nFROM       sample\nWHERE      code LIKE 'A#_%' ESCAPE '#'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"in",children:"IN"}),"\n",(0,r.jsx)(n.p,{children:"The IN operator is used in 2 ways."}),"\n",(0,r.jsx)(n.p,{children:"First, it is used to compare a column expression to a set of enumerated literals. The literals are surrounded by parentheses and separated by commas. The comparison evaluates to True if the column value matches any one of the enumerated values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        t.tour_id, t.destination, t.tour_type\nFROM          tour t\nWHERE         t.destination IN ( 'FRANCE', 'SERBIA', 'ITALY' )\n"})}),"\n",(0,r.jsx)(n.p,{children:"Second, it is used to compare a column expression to the outcome of an independent subquery. The comparison evaluates to True if the column value matches one of the values returned by the subquery:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        t.tour_id, t.destination, t.tour_type\nFROM          tour t\nWHERE         t.destination NOT IN\n(\n       SELECT    p.destination\n       FROM      tour_programme p\n       WHERE     p.tour_type = 'CITY TRIP'\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exists",children:"EXISTS"}),"\n",(0,r.jsx)(n.p,{children:"The EXISTS operator evaluates a subquery to a boolean value. The outcome is True if the subquery returns at least 1 row, and False if it returns 0 rows. The outcome is used to evaluate the embedding statement."}),"\n",(0,r.jsx)(n.p,{children:"The subquery is allowed to be an independent subquery but is more typically a joined subquery, as in this example, which returns tours with a destination qualified as a CITY_TRIP:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        t.tour_id, t.destination, t.tour_type\nFROM          tour t\nWHERE EXISTS\n(\n       SELECT    ''\n       FROM      destination d\n       RELATE    d \"DESTINATION_OF\" t\n       WHERE     d.dest_type = 'CITY TRIP'\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Good practice is to have the empty string as the SELECT list of the subquery (as shown), since the outcome of EXISTS is unrelated to anything selected by the subquery."}),"\n",(0,r.jsx)(n.p,{children:"When applying NOT to EXISTS, it is customary to omit parentheses between NOT and EXISTS. This example returns tours that do NOT have a destination qualified as a CITY_TRIP:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        t.tour_id, t.destination, t.tour_type\nFROM          tour t\nWHERE NOT EXISTS\n(\n       SELECT    ''\n       FROM      destination d\n       RELATE    d \"DESTINATION_OF\" t\n       WHERE     d.dest_type = 'CITY TRIP'\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"between--and",children:"BETWEEN \u2026 AND"}),"\n",(0,r.jsx)(n.p,{children:"The BETWEEN operator is used to select data that are in a range between a lower and an upper boundary:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        code, sample_id\nFROM          sample\nWHERE         code BETWEEN 6000 AND 7000\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is a shorthand for:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        code, sample_id\nFROM          sample\nWHERE         code >= 6000\nAND           code <= 7000\n"})}),"\n",(0,r.jsx)(n.h2,{id:"is-null-is-not-null",children:"IS NULL, IS NOT NULL"}),"\n",(0,r.jsx)(n.p,{children:"The IS NULL operator is used to detect whether a column value is the NULL value."}),"\n",(0,r.jsx)(n.p,{children:"This example retrieves all tours for which a guide has not been specified:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        tour_id, destination, tour_type\nFROM          tour\nWHERE         guide IS NULL\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the GUIDE column has Mandatory = Yes, this query will select an empty set of records."}),"\n",(0,r.jsx)(n.p,{children:"When applying NOT to IS NULL, NOT is placed between IS and NULL. This example returns tours for which a guide HAS been specified:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT        tour_id, destination, tour_type\nFROM          tour\nWHERE         guide IS NOT NULL\n"})}),"\n",(0,r.jsx)(n.p,{children:"\xa0"}),"\n",(0,r.jsx)(n.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);