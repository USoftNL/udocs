"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[32564],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},86596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Services/SQL_statements_in_USoft_services/Example_a_REST_Service_for_adding_new_data_INSERT","title":"Example: a REST Service for adding new data (INSERT)","description":"In this example, you add data about a new customer to the database.","source":"@site/docs/Services/SQL_statements_in_USoft_services/Example_a_REST_Service_for_adding_new_data_INSERT.md","sourceDirName":"Services/SQL_statements_in_USoft_services","slug":"/Services/SQL_statements_in_USoft_services/Example_a_REST_Service_for_adding_new_data_INSERT","permalink":"/udocs/Services/SQL_statements_in_USoft_services/Example_a_REST_Service_for_adding_new_data_INSERT","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Example_a_REST_Service_for_adding_new_data_INSERT"},"sidebar":"sidebar","previous":{"title":"Example: a REST service for retrieving data (SELECT)","permalink":"/udocs/Services/SQL_statements_in_USoft_services/Example_a_REST_service_for_retrieving_data_SELECT"},"next":{"title":"Example: a REST Service for manipulating data (UPDATE)","permalink":"/udocs/Services/SQL_statements_in_USoft_services/Example_a_REST_Service_for_manipulating_data_UPDATE"}}');var s=n(74848),i=n(28453);const a={id:"Example_a_REST_Service_for_adding_new_data_INSERT"},o="Example: a REST Service for adding new data (INSERT)",d={},c=[{value:"Defining SQL",id:"defining-sql",level:2},{value:"Generating a REST method based on SQL",id:"generating-a-rest-method-based-on-sql",level:2},{value:"Publishing the solution",id:"publishing-the-solution",level:2},{value:"Testing the implementation",id:"testing-the-implementation",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"example-a-rest-service-for-adding-new-data-insert",children:"Example: a REST Service for adding new data (INSERT)"})}),"\n",(0,s.jsx)(t.p,{children:"In this example, you add data about a new customer to the database."}),"\n",(0,s.jsx)(t.p,{children:"This example shows how you can quickly generate a REST service from a SQL statement."}),"\n",(0,s.jsx)(t.h2,{id:"defining-sql",children:"Defining SQL"}),"\n",(0,s.jsx)(t.p,{children:"1.\xa0In the User Application, in SQL Command, write and test a SQL statement that will add a new client, for example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"INSERT INTO person\n(  \n   first_name\n,  family_name\n,  address\n,  city\n,  country\n,  area_code      \n)\nVALUES\n(  \n   'Roger'\n,  'WINSTON'      \n,  'ADDISCOMBE LANE 126E'\n,  'WAVERLEY'\n,  'UK'\n,  '4RY 6FU'\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0In USoft Services Definer, create a variant of this statement that indicates the REST input parameters. To do this, choose Define, SQL Statements from the menu, then create a SQL Statement record with the following values:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Statement name"}),(0,s.jsx)(t.td,{children:"ADD_NEW_CLIENT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Application name"}),(0,s.jsx)(t.td,{children:"TRAVEL"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Statement:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"INSERT INTO person\n(  \n   first_name\n,  family_name\n,  address\n,  city\n,  country\n,  area_code      \n)\nVALUES\n(  \n   :MyClientStructure.FirstName\n,  :MyClientStructure.FamilyName      \n,  :MyClientStructure.Address\n,  :MyClientStructure.City\n,  :MyClientStructure.Country\n,  :MyClientStructure.AreaCode\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"3.\xa0Save work. Click the Check button to have your SQL syntax checked. If it is correct, the Correct = Yes flag is set."}),"\n",(0,s.jsx)(t.h2,{id:"generating-a-rest-method-based-on-sql",children:"Generating a REST method based on SQL"}),"\n",(0,s.jsx)(t.p,{children:'1.\xa0Define a custom REST service and make sure that this new service is exposed by a Server. For details on how to do these 2 things, step out to help topic " Setting up your own REST service ".'}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0On the Methods tab, create a record for the retrieval method:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Method Name"}),(0,s.jsx)(t.td,{children:"PostClient"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Relative URI Path"}),(0,s.jsx)(t.td,{children:"/Clients"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"REST HTTP Verb"}),(0,s.jsx)(t.td,{children:"POST"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:'3.\xa0Press the "Generate from SQL" button. The "Generate Method from SQL Statement" appears.'}),"\n",(0,s.jsx)(t.p,{children:"4.\xa0On the SQL Statements tab, click in the record for the statement that you want the REST method to be generated from."}),"\n",(0,s.jsx)(t.p,{children:"The SQL code is now in view in the box on the right. Check that the Correct flag is set to Yes."}),"\n",(0,s.jsx)(t.p,{children:"5.\xa0Press the Generate button.In the REST Services window or tab, values for Signature, Implementation and Parameters are generated.In the Catalog on the left-hand side, a Structure with name MyClientStructure is offered for inspection."}),"\n",(0,s.jsx)(t.h2,{id:"publishing-the-solution",children:"Publishing the solution"}),"\n",(0,s.jsx)(t.p,{children:"1.\xa0Choose Define, Servers, and retrieve the record of the Server where you expose the service."}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0With input focus on this record, choose Publish, Publish and Restart from the menu."}),"\n",(0,s.jsx)(t.h2,{id:"testing-the-implementation",children:"Testing the implementation"}),"\n",(0,s.jsx)(t.p,{children:"1.\xa0Open a Google Chrome browser window, search the download site for the \u201cPOSTMAN \u2013 REST Client\u201d Google extension, and download it to your browser."}),"\n",(0,s.jsx)(t.p,{children:"Once installed, this extension can be opened easily from a new Google Chrome browser tab. To do this, click the standard \u201cApps\u201d button on the Favorites bar, then click the POSTMAN item in the middle of the screen."}),"\n",(0,s.jsx)(t.p,{children:"2.\xa0Open POSTMAN, and specify the following URL:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"http://<host-name>:<port-number>/<service-uri>/<method-uri>\n"})}),"\n",(0,s.jsx)(t.p,{children:"for example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"http://localhost:8090/mycustomservice/Clients\n"})}),"\n",(0,s.jsxs)(t.p,{children:["3.\xa0Set the HTTP verb to ",(0,s.jsx)(t.strong,{children:"POST"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"You are given a form in which to submit a message."}),"\n",(0,s.jsx)(t.p,{children:"4.\xa0Specify that your message is XML, then submit the following message:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<MyClientStructure>\n  <FirstName>Roger</FirstName>\n  <FamilyName>WINSTON</FamilyName>\n  <Address>ADDISCOMBE LANE 126E</Address>\n  <City>WAVERLEY</City>\n  <Country>UK</Country>\n  <AreaCode>4RY 6FU</AreaCode>\n</MyClientStructure>\n"})}),"\n",(0,s.jsx)(t.p,{children:"5.\xa0Press the Send button."}),"\n",(0,s.jsx)(t.p,{children:'See that HTTP status code "201 Created" is returned as a response. In the User Application, see that a record has been added in the PERSON table.'})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);