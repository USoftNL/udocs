"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[57539],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function c(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:t},e.children)}},32638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Repositories/Blend_directives/pcterminate","title":"pc:terminate","description":"This article is about the pc:terminate Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcterminate.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcterminate","permalink":"/udocs/Repositories/Blend_directives/pcterminate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcterminate"},"sidebar":"sidebar","previous":{"title":"pc:tab","permalink":"/udocs/Repositories/Blend_directives/pctab"},"next":{"title":"pc:text","permalink":"/udocs/Repositories/Blend_directives/pctext"}}');var i=n(74848),r=n(28453);const c={id:"pcterminate"},o="pc",a={},l=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"pc",children:["pc",":terminate"]})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["This article is about the ",(0,i.jsxs)(t.strong,{children:["pc",":terminate"]}),(0,i.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"pc-1",children:(0,i.jsxs)(t.strong,{children:["pc",":terminate"]})}),"\n",(0,i.jsx)(t.p,{children:"Terminates the script."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Syntax"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'<pc:terminate\n     test="*xpath >> boolean*"\n     { msg | message } = "*text-literal*"\n     exitcode = "*exitcode*"\n/>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The attributes are all optional. If ",(0,i.jsx)(t.strong,{children:"test"})," is specified, the script is terminated only if ",(0,i.jsx)(t.strong,{children:"test"})," evaluates to Boolean true(). If ",(0,i.jsx)(t.strong,{children:"msg"})," or ",(0,i.jsx)(t.strong,{children:"message"})," is specified, message is returned to the calling interface on termination."]}),"\n",(0,i.jsxs)(t.p,{children:["If ",(0,i.jsx)(t.strong,{children:"exitcode"})," is specified, ",(0,i.jsx)(t.em,{children:"exitcode"})," is returned as an error code to the calling shell on termination, as demonstrated by:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<root xmlns:pc="Processing.Command">\n    <pc:assign-string-default exitcode="-1"/>\n    <pc:ConsoleWrite>Use echo %ERRORLEVEL% to inspect the exit code is <pc:value-of select="$exitcode"/> after this script has terminated.</pc:ConsoleWrite>\n    <pc:terminate exitcode="$exitcode"/>\n</root>\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example 1"})}),"\n",(0,i.jsx)(t.p,{children:"This example terminates a script if it is not run as Administrator."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<pc:terminate test="not(wrights:HasAdminRole())" msg="{concat(\'Admin role is required. Available roles:\', wrights:Roles())}"/>\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example 2"})}),"\n",(0,i.jsx)(t.p,{children:"This example terminates a script if starting a Rules Service was unsuccessful:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<pc:RunRulesService waittime="10000"\n    user="MYNAME" pwd="MYPWD" rdbmstype="oracle" connection="XE" application="MYAPP"\n    owner="MYNAME"\n    assign:appconn="/*/@id" assign:rsstate="RulesService/@state" assign:logurl="RulesService/@logurl" assign:hint="RulesService/@error-hint" />\n<pc:terminate\n    test="normalize-space($appconn)=\'\'"\n    msg="{concat(\'application service did not start (state=\', $rsstate, \') logurl=\', $logurl, \'hint=\', $hint)}"\n    exitcode="-1"\n/>\n'})}),"\n",(0,i.jsx)(t.p,{children:"\xa0"})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);