"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[37752],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},99339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>c,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"Repositories/Blend_directives/pcAppendFile","title":"pc:AppendFile","description":"This article is about the pc:AppendFile Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcAppendFile.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcAppendFile","permalink":"/udocs/Repositories/Blend_directives/pcAppendFile","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcAppendFile"},"sidebar":"sidebar","previous":{"title":"Blend directives","permalink":"/udocs/Repositories/Blend_directives/"},"next":{"title":"pc:apply","permalink":"/udocs/Repositories/Blend_directives/pcapply"}}');var s=t(74848),r=t(28453);const c={id:"pcAppendFile"},o="pc",l={},p=[{value:"<strong>pc</strong>",id:"pc-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"pc",children:["pc",":AppendFile"]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsxs)(n.strong,{children:["pc",":AppendFile"]}),(0,s.jsx)(n.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"pc-1",children:(0,s.jsxs)(n.strong,{children:["pc",":AppendFile"]})}),"\n",(0,s.jsx)(n.p,{children:"Opens a text file and writes text to it. If the file already exists, the input is appended."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax 1"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<pc:AppendFile filepath="*file-path*" disable-output-escaping="*disable*">\n\n*content*\n\n</pc:AppendFile>\n\n*disable*  ::=  { yes | no }\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax 2"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<pc:AppendFile filepath="*file-path*" select="*xpath >> text-literal*" disable-output-escaping="*disable*" />\n\n*disable*  ::=  { yes | no }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The required ",(0,s.jsx)(n.em,{children:"filepath"})," points to the location where the file must be written."]}),"\n",(0,s.jsxs)(n.p,{children:["The text to be written must be expressed either as ",(0,s.jsx)(n.em,{children:"content"})," (Syntax 1) or in a ",(0,s.jsx)(n.strong,{children:"select"})," attribute (Syntax 2)."]}),"\n",(0,s.jsxs)(n.p,{children:["If you set ",(0,s.jsx)(n.em,{children:"disable"}),' to "yes", special XML characters in the output will not be escaped. See Example 2 in the pc',":WriteFile"," help topic."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.p,{children:"Information about a data import operation is written to a logfile."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<root xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pc="Processing.Command" xmlns:assign="Processing.Command.Assign">\n<pc:terminate test="not(wrights:HasAdminRole())" msg="{concat(\'Admin role is required. Available roles:\', wrights:Roles())}"/>\n\n  <pc:assign-string workingdir="{directories:Get()}" />\n  <pc:assign-string traveldata="{path:Combine($workingdir, \'TRAVEL.xml\')}"/>\n\n  <pc:RunRulesService waittime="10000"\n      user="USD91_TRAVEL" pwd="USD91_TRAVEL" rdbmstype="oracle" connection="XE" application="TRAVEL"\n      owner="USD91_TRAVEL"\n      assign:thisconn="/*/@id" assign:rsstate="RulesService/@state" assign:logurl="RulesService/@logurl" assign:hint="RulesService/@error-hint" />\n  <pc:terminate\n      test="normalize-space($thisconn)=\'\'"\n      msg="{concat(\'rules service did not start (state=\', $rsstate, \') logurl=\', $logurl, \'hint=\', $hint)}"\n      exitcode="-1" />\n  <pc:AppendFile filepath="c:\\temp\\testlog.txt">\n      <pc:XmlImport connection="{$thisconn}" commit="commit" source="{$traveldata}" />\n  </pc:AppendFile>\n\n</root>\n'})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);