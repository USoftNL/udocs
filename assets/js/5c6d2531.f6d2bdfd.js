"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[14538],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},97449:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Extensions/USMeta_internal_component/USMetaConstraints","title":"USMeta.Constraints","description":"This article is about the Constraints method of the USMeta internal component.","source":"@site/docs/Extensions/USMeta_internal_component/USMetaConstraints.md","sourceDirName":"Extensions/USMeta_internal_component","slug":"/Extensions/USMeta_internal_component/USMetaConstraints","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaConstraints","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USMetaConstraints"},"sidebar":"sidebar","previous":{"title":"USMeta.Components","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaComponents"},"next":{"title":"USMeta.Decisions","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaDecisions"}}');var a=t(74848),i=t(28453);const r={id:"USMetaConstraints"},o="USMeta.Constraints",l={},c=[{value:"<strong>USMeta.Constraints</strong>",id:"usmetaconstraints-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usmetaconstraints",children:"USMeta.Constraints"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This article is about the ",(0,a.jsx)(n.strong,{children:"Constraints"})," method of the ",(0,a.jsx)(n.a,{href:"/Extensions/USMeta_internal_component",children:"USMeta internal component"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"usmetaconstraints-1",children:(0,a.jsx)(n.strong,{children:"USMeta.Constraints"})}),"\n",(0,a.jsx)(n.p,{children:"At runtime, gets metadata information about constraints from the model developed in USoft Definer. For each retrieved constraint, this information takes the form of name/value pairs. Each name/value pair expresses a constraint attribute setting."}),"\n",(0,a.jsx)(n.p,{children:"Returns an XML document of the form demonstrated in Example 1 below."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Syntax"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Constraints(\n*constraint-name-pattern*         Constraints\n,      *message-pattern*                 Message\n,      *transition-table-pattern*        TransitionTable\n,      *mime-type*                       MimeType\n)\n\n*mime-type*   :=  {  application/xml\n                ,  xml\n                ,  application/json\n                ,  json  }\n\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["All parameters are optional. Parameter values that you pass are mapped to parameters by alias name. The 'ID' value in the following example is for ",(0,a.jsx)(n.em,{children:"constraint-name-pattern"}),' because of the "Constraints" alias:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT   USMeta.Constraints( 'ID' Constraints )\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"For backward compatibility only, it is possible to supply parameter values by position. Using this syntax, a list of non-aliased values maps to the parameter list in the order stated, with empty values at the end of the list if you supply less than 3 values, and '' (the empty string) as a way of explicitly declaring an empty value."})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Constraint-name-pattern"})," is a regular expression that matches zero, one or more constraint names in the model. The result data is limited to constraints matching the pattern. If ",(0,a.jsx)(n.em,{children:"constraint-name-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Message-pattern"})," is a regular expression that matches zero, one or more messages of constraints in the model. The result data is limited to constraints with a message matching the pattern. If ",(0,a.jsx)(n.em,{children:"message-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Transition-table-pattern"})," is a regular expression that matches zero, one or more names of transition tables of constraints in the model. The result data is limited to constraints with a transition table whose name matches the pattern. If ",(0,a.jsx)(n.em,{children:"transition-table-pattern"})," is omitted, then result data is not limited in this way."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Mime-type"})," determines whether the output is in XML ( \u2018application/xml\u2018 or 'xml\u2019) or in JSON ('application/json\u2019 or 'json\u2019). The default is XML."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example 1"})}),"\n",(0,a.jsx)(n.p,{children:"This example returns constraint information about any constraints in the model that have a message containing the word 'correct' :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Constraints('.*correct.*' Message)\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Constraints>\n      <Constraint NAME="STARTDATE_RETURNDATE" MODULE_NAME="TRAVEL" ACTIVE="Y" CORRECT="Y"\n         MESSAGE="Return date corrected to match preset number of days for tour." DRIVING_TABLE="TOUR" FIRE_DEFFERED="NONE"\n         TRANSITION_TABLE="" TRANSITION_ALIAS="" ON_INSERT="ALWAYS FIRE" ON_DELETE="ALWAYS FIRE" ON_UPDATE="USED COLUMNS FIRE"\n         HELP_TOPIC="0" DYNAMIC="1"/>\n   </Constraints>\n</Meta>\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example 2"})}),"\n",(0,a.jsx)(n.p,{children:"This example returns constraint information about all constraints containing the word 'DATE' that have a Transition Table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Constraints(\n    '.*DATE'            Constraints\n,   '^(?!\\s*$).+'       TransitionTable\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Constraints>\n      <Constraint NAME="CHANGE_PLAN_DATE" MODULE_NAME="TRAVEL" ACTIVE="Y" CORRECT="Y" MESSAGE="" DRIVING_TABLE="TOUR"\n          FIRE_DEFFERED="NONE" TRANSITION_TABLE="TOUR" TRANSITION_ALIAS="" ON_INSERT="NEVER FIRE" ON_DELETE="NEVER FIRE"\n          ON_UPDATE="USED COLUMNS FIRE" HELP_TOPIC="0" DYNAMIC="1"/>\n      <Constraint NAME="NUMDAYS_RETURNDATE" MODULE_NAME="TRAVEL" ACTIVE="Y" CORRECT="Y"\n          MESSAGE="The number of days of a tour programme cannot be changed once tours for that destination and type have been scheduled."\n          DRIVING_TABLE="TOUR_PROGRAMME" FIRE_DEFFERED="NONE" TRANSITION_TABLE="TOUR_PROGRAMME" TRANSITION_ALIAS="TP"\n          ON_INSERT="NEVER FIRE" ON_DELETE="NEVER FIRE" ON_UPDATE="USED COLUMNS FIRE" HELP_TOPIC="0" DYNAMIC="0"/>\n   </Constraints>\n</Meta>\n'})}),"\n",(0,a.jsx)(n.p,{children:"\xa0"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);