"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[16887],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var n=s(96540);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}},85732:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Services/USoft_Service_Definer_objects/Functional_types","title":"Functional types","description":"A functional type is a construct in Service Definer that allows you to name a service, class, structure or Java interface and then refer to it by name in a service, class or structure in order to re-use the corresponding implementation logic.","source":"@site/docs/Services/USoft_Service_Definer_objects/Functional_types.md","sourceDirName":"Services/USoft_Service_Definer_objects","slug":"/Services/USoft_Service_Definer_objects/Functional_types","permalink":"/udocs/Services/USoft_Service_Definer_objects/Functional_types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"Functional_types"},"sidebar":"sidebar","previous":{"title":"File resources","permalink":"/udocs/Services/USoft_Service_Definer_objects/File_resources"},"next":{"title":"Example: Reservation event functional type","permalink":"/udocs/Services/USoft_Service_Definer_objects/Example_Reservation_event_functional_type"}}');var i=s(74848),r=s(28453);const o={id:"Functional_types"},c="Functional types",a={},l=[{value:"Functional types delivered by USoft for REST services",id:"functional-types-delivered-by-usoft-for-rest-services",level:2},{value:"Functional types delivered by USoft for SOAP Services",id:"functional-types-delivered-by-usoft-for-soap-services",level:2},{value:"Functional types delivered by USoft for WebSocket services",id:"functional-types-delivered-by-usoft-for-websocket-services",level:2},{value:"Functional types delivered by USoft for services (Other)",id:"functional-types-delivered-by-usoft-for-services-other",level:2},{value:"Custom functional types",id:"custom-functional-types",level:2},{value:"Creating a custom functional type",id:"creating-a-custom-functional-type",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"functional-types",children:"Functional types"})}),"\n",(0,i.jsx)(t.p,{children:"A functional type is a construct in Service Definer that allows you to name a service, class, structure or Java interface and then refer to it by name in a service, class or structure in order to re-use the corresponding implementation logic."}),"\n",(0,i.jsx)(t.p,{children:"Functional types are grouped by type of service. For each functional type, you can specify the type of service where the functional type may be used."}),"\n",(0,i.jsx)(t.p,{children:"USoft delivers a set of functional types by default. \xa0"}),"\n",(0,i.jsx)(t.p,{children:"You can add further your custom functional types by:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"creating your own service, class or structure in Service Definer."}),"\n",(0,i.jsx)(t.li,{children:"using a class or interface from the Java libraries delivered with USoft Service Framework."}),"\n",(0,i.jsx)(t.li,{children:"using a class or interface from an external Java library (not delivered by USoft)."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"functional-types-delivered-by-usoft-for-rest-services",children:"Functional types delivered by USoft for REST services"}),"\n",(0,i.jsx)(t.p,{children:"This table lists functional types delivered by USoft as a factory default for REST services."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Name"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Table Resource"}),(0,i.jsx)(t.td,{children:"Allows you to create a REST Service for basic browsing and manipulation of table data in your USoft application."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Job Resource"}),(0,i.jsx)(t.td,{children:"Allows you to create a REST Service for calling batch jobs defined in your USoft application"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft REST Default Provider"}),(0,i.jsx)(t.td,{children:"Allows you to create a REST Service that uses SQL statements for implementation logic. You can also use Java code in the service implementation, if necessary. When using this functional type you have access to utility functions for connecting to the Rules Engine."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Page Engine Resource"}),(0,i.jsx)(t.td,{children:'Allows you to create a service based on a Web Designer publication. At runtime, the USoft Page Engine runs inside the Service Framework.For introductory help, read the "Getting Started" sections of USoft Web Designer Help.'})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Generic Exception Handler"}),(0,i.jsx)(t.td,{children:"Allows you to customise errors generated by the Rules Engine and errors raised by the Service Framework.Allows you to send customised messages to the client.USoft delivers the AppExceptionMapper service as an example of how to customise errors."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"functional-types-delivered-by-usoft-for-soap-services",children:"Functional types delivered by USoft for SOAP Services"}),"\n",(0,i.jsx)(t.p,{children:"This table lists functional types delivered by USoft as a factory default for SOAP services."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Name"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft SOAP Default Provider"}),(0,i.jsx)(t.td,{children:"Allows you to define a SOAP service that uses a SQL statement as its implementation logic. You can also use Java code in the service implementation, if necessary. When using this functional type you have access to utility functions for connecting to the Rules Engine."})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"functional-types-delivered-by-usoft-for-websocket-services",children:"Functional types delivered by USoft for WebSocket services"}),"\n",(0,i.jsx)(t.p,{children:"This table lists functional types delivered by USoft as a factory default for WebSocket services."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Name"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Default Web Socket Provider"}),(0,i.jsx)(t.td,{children:"Allows you to implement a service that uses the web socket communication protocol. When using this functional type you have access to utility functions for connecting to the Rules Engine."})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"functional-types-delivered-by-usoft-for-services-other",children:"Functional types delivered by USoft for services (Other)"}),"\n",(0,i.jsx)(t.p,{children:"This table lists functional types delivered by USoft as a factory default for services (Other)."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Name"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Server Lifecycle Listener"}),(0,i.jsx)(t.td,{children:"Allows you to write Java code that is executed when the server starts and stops. Using this functional type, you can add different services that will start and stop when the server starts or stops. This way, Service Framework is extensible to any kind of service, such as Java Messaging Services (JMS) and Kafka streaming services."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USoft Engine Task Provider"}),(0,i.jsxs)(t.td,{children:["This is a generic functional type that allows you to useutility functions for connecting to the Rules Engine. It can be used in combination with the ",(0,i.jsx)(t.em,{children:"@QueueTask"})," annotation to create a queue service."]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"custom-functional-types",children:"Custom functional types"}),"\n",(0,i.jsx)(t.p,{children:"You can define custom functional types in addition to the ones provided by USoft. A functional type is a name that you can specify for reusable code. It is based on the concept of inheritance in Java. The existing code may be:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"a class or structure that you have created in Service Definer."}),"\n",(0,i.jsx)(t.li,{children:"a class or interface from the Java libraries delivered with USoft Service Framework."}),"\n",(0,i.jsx)(t.li,{children:"a class or interface from an external Java library (not delivered by USoft)."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"creating-a-custom-functional-type",children:"Creating a custom functional type"}),"\n",(0,i.jsx)(t.p,{children:"1.\xa0Choose Define, Functional Types from the USoft Service Definer menu."}),"\n",(0,i.jsx)(t.p,{children:"The Functional Types window appears."}),"\n",(0,i.jsx)(t.p,{children:"2.\xa0Specify a name in the Functional Type field. This is the name that you can use in the Services/Classes window as Functional Type for a service/class."}),"\n",(0,i.jsx)(t.p,{children:"3.\xa0Specify either a Super Class Name, a Base Class Name, or Implemented Interfaces Names."}),"\n",(0,i.jsxs)(t.p,{children:["Specify a ",(0,i.jsx)(t.strong,{children:"Super Class Name"})," (including a namespace) if the reusable code is a Java class, Service Framework class or structure, and each time you use it you want USoft Service Framework to create a new class that inherits from it."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example"})}),"\n",(0,i.jsx)(t.p,{children:"In this example, ReservationEvent is a structure defined in Service Definer that holds common fields for different message events available for a reservation in a travel agency event processing system. See the reservation event example \xa0\xa0"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"com.usoft.service.ReservationEvent\n\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Specify a ",(0,i.jsx)(t.strong,{children:"Base Class Name"})," ( including a namespace ) if the reusable code is a Java class, Service Framework class or structure, and each time you use it you want USoft Service Framework to make a copy of the existing class and extend it."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"com.usoft.service.ReservationEvent\n\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Specify ",(0,i.jsx)(t.strong,{children:"Implemented Interfaces Names"})," if the reusable code is a collection of Java interfaces and you want to inherit from them. Supply a semicolon-separated list of Java interfaces (including namespaces) here. See the log REST request example."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Example"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"javax.ws.rs.container.ContainerRequestFilter\n\n"})}),"\n",(0,i.jsx)(t.p,{children:"4.\xa0Choose the Class Type where this Functional Type may be used."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);