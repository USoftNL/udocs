"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[30001],{18580:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Repositories/Blend_directives/pcRdbmsStatement","title":"pc:RdbmsStatement","description":"This article is about the pc:RdbmsStatement Blend directive.","source":"@site/docs/Repositories/Blend_directives/pcRdbmsStatement.md","sourceDirName":"Repositories/Blend_directives","slug":"/Repositories/Blend_directives/pcRdbmsStatement","permalink":"/udocs/Repositories/Blend_directives/pcRdbmsStatement","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"pcRdbmsStatement"},"sidebar":"sidebar","previous":{"title":"pc:ProgramSystemDir","permalink":"/udocs/Repositories/Blend_directives/pcProgramSystemDir"},"next":{"title":"pc:ReadFile","permalink":"/udocs/Repositories/Blend_directives/pcReadFile"}}');var r=s(74848),i=s(28453);const a={id:"pcRdbmsStatement"},d="pc",l={},c=[{value:"<strong>pc</strong>",id:"pc-1",level:2},{value:"Oracle",id:"oracle",level:2},{value:"SQL Server",id:"sql-server",level:2},{value:"Statement items",id:"statement-items",level:2},{value:"Processing order",id:"processing-order",level:2},{value:"Commit behaviour",id:"commit-behaviour",level:2},{value:"Return value",id:"return-value",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"pc",children:["pc",":RdbmsStatement"]})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["This article is about the ",(0,r.jsxs)(t.strong,{children:["pc",":RdbmsStatement"]}),(0,r.jsx)(t.a,{href:"/Repositories/Blend_directives",children:" Blend directive"}),"."]})}),"\n",(0,r.jsx)(t.h2,{id:"pc-1",children:(0,r.jsxs)(t.strong,{children:["pc",":RdbmsStatement"]})}),"\n",(0,r.jsx)(t.p,{children:"Executes and commits one or more SQL statements directly in the RDBMS, bypassing the USoft Rules Engine."}),"\n",(0,r.jsx)(t.h2,{id:"oracle",children:"Oracle"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Syntax"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'<pc:RdbmsStatement\n    rdbms="oracle"\n    connectstr="*connectstr*"\n    database="*database*"\n    user="*user*"\n    pwd="*pwd*" >\n\n*statement-item*\n    ...\n\n</pc:RdbmsStatement>\n'})}),"\n",(0,r.jsx)(t.p,{children:"On Oracle:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The required ",(0,r.jsx)(t.strong,{children:"connectstr"})," is a valid TNS connect string as illustrated in the Example. You can create such a string by calling the oracle",":USoftConnectString","() function."]}),"\n",(0,r.jsxs)(t.li,{children:["The optional ",(0,r.jsx)(t.strong,{children:"database"})," attribute may be used to identify the table owner if the user logging in, specified by ",(0,r.jsx)(t.strong,{children:"user"}),", is to manipulate a table in a different database user's schema.\xa0*"]}),"\n",(0,r.jsxs)(t.li,{children:["The required ",(0,r.jsx)(t.strong,{children:"user"})," and ",(0,r.jsx)(t.strong,{children:"pwd"})," specify the username/password combination used to access the RDBMS."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["*\xa0If ",(0,r.jsx)(t.strong,{children:"database"})," is omitted, the user logging in is understood to be also the table owner. If ",(0,r.jsx)(t.strong,{children:"database"})," is specified and different from user, USoft Blend issues the following statement that allows user to access the tables in database, provided that the necessary RDBMS access rights have been granted:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"ALTER SESSION SET CURRENT_SCHEMA = database\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The pc",":RdbmsStatement",' element is allowed to have multiple statement-item child elements. See the "Statement items" section below.']}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<pc:RdbmsStatement\n    rdbms="oracle"\n    connectstr="(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=XM310100444.usoft.com)(PORT = 1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)))"\n    user="{$user}"\n    pwd="{$pwd}" >\n      <s seqno="10" status="Waiting">update tour set status=:status where service_msg is not null</s>\n      <s seqno="20" status="Processed">update tour set status=:status where service_msg is null</s>\n</pc:RdbmsStatement>\n'})}),"\n",(0,r.jsx)(t.h2,{id:"sql-server",children:"SQL Server"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Syntax"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'<pc:RdbmsStatement\n    rdbms="sqlserver"\n    connectstr="*connectstr*"\n    database="*database*"\n    user="*user*"\n    pwd="*pwd*" >\n\n*statement-item*\n    ...\n\n</pc:RdbmsStatement>\n'})}),"\n",(0,r.jsx)(t.p,{children:"On SQL Server:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The required ",(0,r.jsx)(t.strong,{children:"connectstr"})," is a valid database connect string without reference to the database, ie., a connect string that does not contain a colon character."]}),"\n",(0,r.jsxs)(t.li,{children:["The required ",(0,r.jsx)(t.strong,{children:"database"})," attribute identifies a database within the instance designated by connectstr."]}),"\n",(0,r.jsxs)(t.li,{children:["The required ",(0,r.jsx)(t.strong,{children:"user"})," and ",(0,r.jsx)(t.strong,{children:"pwd"})," specify the username/password combination used to access the RDBMS."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The pc",":RdbmsStatement",' element is allowed to have multiple statement-item child elements. See the "Statement items" section below.']}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<pc:RdbmsStatement\n    rdbms="sqlserver"\n    connectstr="P4900299383\\SQLEXPRESS"\n    database="USD91_TRAVEL2"\n    user="{$user}"\n    pwd="{$pwd}" >\n      <s seqno="10" status="Waiting">update tour set status=:status where service_msg is not null</s>\n      <s seqno="20" status="Processed">update tour set status=:status where service_msg is null</s>\n</pc:RdbmsStatement>\n'})}),"\n",(0,r.jsx)(t.h2,{id:"statement-items",children:"Statement items"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Syntax"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'*statement-item*  ::=\n\n  <*elem attr="value"* ...> *rdbms-ddl-dml-statement* </*elem*>\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The pc",":RdbmsStatement"," element is allowed to have multiple ",(0,r.jsx)(t.em,{children:"statement-item"})," child elements for which:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.em,{children:"elem"})," element name is irrelevant and is allowed to be any valid XML name. It is also irrelevant whether multiple elements have the same or different element names."]}),"\n",(0,r.jsx)(t.li,{children:"The SQL statement may be a DML statement (INSERT, UPDATE, DELETE) or a DDL statement (CREATE, ALTER,DROP)."}),"\n",(0,r.jsx)(t.li,{children:"One or more optional XML attributes may be used. The values of the attributes may be used as replacement values. The SQL statement may contain placeholders introduced by colons (\xa0:\xa0). Each placeholder is replaced by the value of the attribute of the same name before the statement is sent to the RDBMS."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Example"})}),"\n",(0,r.jsx)(t.p,{children:"In this example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<s10 destination="AUSTRALIA" num-days="12">\n  update tour set status = \'Fully booked\'\n  where destination = :destination and num_days = :num_days\n</s10>\n'})}),"\n",(0,r.jsx)(t.p,{children:"the following statement is sent to the RDBMS:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"  update tour set status = 'Fully booked'\n  where destination = 'AUSTRALIA' and num_days = 12\n"})}),"\n",(0,r.jsx)(t.h2,{id:"processing-order",children:"Processing order"}),"\n",(0,r.jsx)(t.p,{children:"If you have more than 1 statement item, statements are processed in document order. In the following example, the seqno attribute is irrelevant for processing order. The second statement is applied AFTER the first:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<s seqno="20" status="Waiting">update tour set status=:status where service_msg is not null</s>\n<s seqno="10" status="Processed">update tour set status=:status where service_msg is null</s>\n'})}),"\n",(0,r.jsx)(t.h2,{id:"commit-behaviour",children:"Commit behaviour"}),"\n",(0,r.jsxs)(t.p,{children:["DML statements submitted within the same pc",":RdbmsStatement"," command are committed as a single transaction. A DML statement is a SQL statement starting with INSERT, UPDATE, or DELETE. In the event of an error, the entire transaction is rolled back."]}),"\n",(0,r.jsx)(t.p,{children:"A commit also occurs immediately before and immediately after any DDL statement. A DDL statement is a SQL statement starting with CREATE, ALTER, or DROP."}),"\n",(0,r.jsx)(t.h2,{id:"return-value",children:"Return value"}),"\n",(0,r.jsx)(t.p,{children:"If the transaction(s) is or are successful, an XML fragment is returned that identifies, for each statement, the number of records (rows) affected. It looks like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<StatementsResults>\n   <s0 nrowsaffected="10" />\n   <s1 nrowsaffected="15" />\n</StatementsResults>\n'})}),"\n",(0,r.jsx)(t.p,{children:"If this return value matters to you, giving each statement item a different element name will help identify which statement affected how many rows."})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>d});var n=s(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);