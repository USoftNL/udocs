"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[8448],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},54436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"Extensions/USMeta_internal_component/USMetaSets","title":"USMeta.Sets","description":"This article is about the Sets method of the USMeta internal component.","source":"@site/docs/Extensions/USMeta_internal_component/USMetaSets.md","sourceDirName":"Extensions/USMeta_internal_component","slug":"/Extensions/USMeta_internal_component/USMetaSets","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaSets","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"USMetaSets"},"sidebar":"sidebar","previous":{"title":"USMeta.Roles","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaRoles"},"next":{"title":"USMeta.Tables","permalink":"/udocs/Extensions/USMeta_internal_component/USMetaTables"}}');var a=t(74848),i=t(28453);const o={id:"USMetaSets"},l="USMeta.Sets",r={},m=[{value:"<strong>USMeta.Sets</strong>",id:"usmetasets-1",level:2}];function E(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usmetasets",children:"USMeta.Sets"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This article is about the ",(0,a.jsx)(n.strong,{children:"Sets"})," method of the ",(0,a.jsx)(n.a,{href:"/Extensions/USMeta_internal_component",children:"USMeta internal component"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"usmetasets-1",children:(0,a.jsx)(n.strong,{children:"USMeta.Sets"})}),"\n",(0,a.jsx)(n.p,{children:"At runtime, gets metadata information about sets from the model developed in USoft Definer. For each retrieved set, this information takes the form of name/value pairs. Each name/value pair expresses an attribute setting for the set. Information about set elements is also included."}),"\n",(0,a.jsx)(n.p,{children:"Returns an XML document of the form demonstrated in the Example below."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Syntax"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Sets(\n\xa0\xa0\xa0\xa0*set-name-pattern*     Sets\n,\xa0\xa0\xa0*interfaces-only*      InterfacesOnly\n,\xa0\xa0\xa0*module-pattern*       Module\n,\xa0\xa0\xa0*mime-type*            MimeType\n)\n\n*interfaces-only*    ::=  { yes | no }\n\n*mime-type*          ::=  {  application/xml\n                        ,  xml\n                        ,  application/json\n                        ,  json  }\n"})}),"\n",(0,a.jsxs)(n.p,{children:["All parameters are optional. Parameter values that you pass are mapped to parameters by alias name. The '.",(0,a.jsx)(n.em,{children:"application."}),'\' value in the following example is for set-name-pattern because of the "Sets" alias:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Sets( '.*application.*' Sets )\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Set-name-pattern"})," is a regular expression that matches zero, one or more set names in the model. The result data is limited to sets matching the pattern. If ",(0,a.jsx)(n.em,{children:"set-name-pattern"})," is omitted, the result data is not limited in this way."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.em,{children:"interfaces-only"})," is set to 'yes', only sets that have Interface = Yes are included. If it is set to 'no' (the default), the result data is not limited in this way."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Module-pattern"})," is a regular expression that matches zero, one or more module names in the model. The result data is limited to sets within modules that match the pattern. If ",(0,a.jsx)(n.em,{children:"module-pattern"})," is omitted, the result data is not limited in this way."]}),"\n",(0,a.jsx)(n.p,{children:"Result data for sets from consumed modules that match module-pattern contain two additional attributes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"'INTERFACE_FROM_MODULE', which is set to 'Y',"}),"\n",(0,a.jsx)(n.li,{children:"''IMPLEMENTING_MODULE', which is set to the module name where the set originates from. The 'MODULE_NAME' attribute is set in this case to the name of the consumer module."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Depending on the set's EXPORT_TYPE attribute, for example, 'ASCII_EXPORT' or 'HTML_EXPORT', different other attributes are returned."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Mime-type"})," determines whether the output is in XML ( \u2018application/xml\u2018 or 'xml\u2019) or in JSON ('application/json\u2019 or 'json\u2019). The default is XML."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example 1"})}),"\n",(0,a.jsx)(n.p,{children:"This example returns set information about any sets in the model with a name containing the string 'application':"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Sets( '.*application.*' Sets )\n"})}),"\n",(0,a.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Sets>\n      <Set NAME="APPLICATION_RENAME" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" EXPORT_TYPE="ASCII_EXPORT" SET_FORMAT_TYPE="FIX"\n          FILE_FORMAT_AS_STRING="Fixed" COLUMN_SEPERATOR="" ROW_SEPERATOR="" STRING_DELIMITER="" NUMBER_OF_ELEMENTS="4">\n         <Elements>\n            <Element NAME="OLDNAME" CHILD_SET="">\n               <Column DATABASE_TYPE="NVARCHAR2" IO_FORMAT="" TOTAL_LENGTH="120"/>\n            </Element>\n            <Element NAME="NEWNAME" CHILD_SET="">\n               <Column DATABASE_TYPE="NVARCHAR2" IO_FORMAT="" TOTAL_LENGTH="120"/>\n            </Element>\n            <Element NAME="WEB" CHILD_SET="">\n               <Column DATABASE_TYPE="NCHAR" IO_FORMAT="" TOTAL_LENGTH="1"/>\n            </Element>\n            <Element NAME="NAMES" CHILD_SET="">\n               <Column DATABASE_TYPE="NCLOB" IO_FORMAT="" TOTAL_LENGTH="2000"/>\n            </Element>\n         </Elements>\n      </Set>\n   </Sets>\n</Meta>\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example 2"})}),"\n",(0,a.jsx)(n.p,{children:"This example returns set information about a set called \"CLASS_H', which turns out to be of type HTML_EXPORT:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT USMeta.Sets( 'CLASS_H' Sets ) \n"})}),"\n",(0,a.jsx)(n.p,{children:"The return value of this statement could be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-16"?>\n<Meta>\n   <Sets>\n      <Set NAME="CLASS_H" MODULE_NAME="USD" USABLE_AS_INTERFACE="N" EXPORT_TYPE="HTML_EXPORT" PAGE_TITLE="Class:"\n        FRAME_TEMPLATE_NAME="" HTML_LAYOUT_STYLE="TABLE" HTML_NAVIGATION_STYLE="EMBEDDED" NULL_VALUE_FILL_CHARACTER=" "\n        TEMPLATE_FILE_NAME="" STRING_DELIMITER="" NUMBER_OF_ELEMENTS="3">\n         <Elements>\n            <Element NAME="ID" CHILD_SET="">\n               <Column DATABASE_TYPE="NUMBER" IO_FORMAT="" TOTAL_LENGTH="9"/>\n            </Element>\n            <Element NAME="TYPENAME" CHILD_SET="">\n               <Column DATABASE_TYPE="NVARCHAR2" IO_FORMAT="" TOTAL_LENGTH="92"/>\n            </Element>\n            <Element NAME="CHANGED_ON" CHILD_SET="">\n               <Column DATABASE_TYPE="DATETIME" IO_FORMAT="DAY, MONTH DD, YYYY HH:MI:SS AM" TOTAL_LENGTH="41"/>\n            </Element>\n            <Element NAME="ATTRIBUTES" CHILD_SET="ATTRIBUTE_H"/>\n         </Elements>\n      </Set>\n   </Sets>\n</Meta>\n'})}),"\n",(0,a.jsx)(n.p,{children:"\xa0"})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(E,{...e})}):E(e)}}}]);