"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[74190],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(96540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},89549:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Extensions/XML_internal_component/XMLQuery","title":"XML.Query","description":"This article is about the Query method of the XML internal component.","source":"@site/docs/Extensions/XML_internal_component/XMLQuery.md","sourceDirName":"Extensions/XML_internal_component","slug":"/Extensions/XML_internal_component/XMLQuery","permalink":"/udocs/Extensions/XML_internal_component/XMLQuery","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"XMLQuery"},"sidebar":"sidebar","previous":{"title":"XML.MultiExportTables","permalink":"/udocs/Extensions/XML_internal_component/XMLMultiExportTables"},"next":{"title":"XML.SQL2XML","permalink":"/udocs/Extensions/XML_internal_component/XMLSQL2XML"}}');var s=t(74848),r=t(28453);const i={id:"XMLQuery"},c="XML.Query",u={},a=[{value:"<strong>XML.Query</strong>",id:"xmlquery-1",level:2},{value:"Conditions",id:"conditions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"xmlquery",children:"XML.Query"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"Query"})," method of the ",(0,s.jsx)(n.a,{href:"/Extensions/XML_internal_component",children:"XML internal component"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"xmlquery-1",children:(0,s.jsx)(n.strong,{children:"XML.Query"})}),"\n",(0,s.jsxs)(n.p,{children:["Executes a query that is defined in an input XML document. The structure of this XML document must comply with the Query By Form (QBF) specification described in ",(0,s.jsx)(n.a,{href:"/udocs/Repositories/USoft_XML_formats/XML_representation_of_queries",children:"XML Representation of Queries"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Returns XML output that contains the query results. The structure of this XML output is described here. This XML output contains ALL column values of the records exported."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INVOKE XML.Query WITH\nSELECT      *header-line-name*    DTDName\n,           *use-io-formats*      UseIOFormats\n,           *document*            XMLDocument\nFROM        *table*\n\n*use-io-formats*  :=  { No | Yes }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["where ",(0,s.jsx)(n.em,{children:"document"})," is the only required output column."]}),"\n",(0,s.jsxs)(n.p,{children:["The optional ",(0,s.jsx)(n.em,{children:"header-line-name"})," specifies a header line in the XML output with a DOCTYPE declaration containing this DTD Name as reference."]}),"\n",(0,s.jsxs)(n.p,{children:["The optional ",(0,s.jsx)(n.em,{children:"use-io-formats"})," determines whether the column values in the resulting XML document must be formatted according to the IO Format of the corresponding domain or not. This happens only if ",(0,s.jsx)(n.em,{children:"use-io-formats"})," is passed with the 'Yes' value. Otherwise, date columns must obey to the format explained in help topic \"XML representation of date values\"."]}),"\n",(0,s.jsx)(n.p,{children:"These optional output columns are case-insensitive. So are the associated pseudo-column names (DTDName, UseIOFormats)."}),"\n",(0,s.jsxs)(n.p,{children:["The required ",(0,s.jsx)(n.em,{children:"document"})," contains the input XML document compliant with the QBF specification."]}),"\n",(0,s.jsx)(n.p,{children:"If the SELECT query has an empty result set (= no rows are retrieved), there is no XML output. Otherwise, each record retrieved by the SELECT query returns an XML document."}),"\n",(0,s.jsx)(n.p,{children:"If the query condition specified in the input XML document results in no records, then the resulting XML output contains only the root element and no row elements."}),"\n",(0,s.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,s.jsx)(n.p,{children:"The SELECT statement must comply with the following conditions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For each parameter value, the parameter name must be specified."}),"\n",(0,s.jsx)(n.li,{children:"Parameters have constant values."}),"\n",(0,s.jsx)(n.li,{children:"If the SELECT results in no row, there is no XML output."}),"\n",(0,s.jsx)(n.li,{children:"Every record retrieved by the SELECT results in an XML output document."}),"\n",(0,s.jsx)(n.li,{children:"If the query condition specified in the input XML document results in no records, then the resulting XML output contains only the root element and no row elements."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);