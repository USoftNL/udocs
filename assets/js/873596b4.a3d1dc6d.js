"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[47311],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},33054:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Modeller_and_Rules_Engine/SQL_syntax/UPDATE","title":"UPDATE","description":"This article is about the UPDATE statement as part of the SQL syntax that USoft supports.","source":"@site/docs/Modeller_and_Rules_Engine/SQL_syntax/UPDATE.md","sourceDirName":"Modeller_and_Rules_Engine/SQL_syntax","slug":"/Modeller_and_Rules_Engine/SQL_syntax/UPDATE","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/UPDATE","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"UPDATE"},"sidebar":"sidebar","previous":{"title":"INSERT","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/INSERT"},"next":{"title":"DELETE","permalink":"/udocs/Modeller_and_Rules_Engine/SQL_syntax/DELETE"}}');var a=s(74848),r=s(28453);const o={id:"UPDATE"},l="UPDATE",i={},c=[{value:"<strong>UPDATE</strong>",id:"update-1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"update",children:"UPDATE"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This article is about the ",(0,a.jsx)(n.strong,{children:"UPDATE"})," statement as part of the ",(0,a.jsx)(n.a,{href:"/Modeller_and_Rules_Engine/SQL_syntax",children:"SQL syntax"})," that USoft supports."]})}),"\n",(0,a.jsx)(n.h2,{id:"update-1",children:(0,a.jsx)(n.strong,{children:"UPDATE"})}),"\n",(0,a.jsx)(n.p,{children:"Modifies column values in one or more existing records in a table."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Syntax 1"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE       *table-name*\nSET          *column-name* = *expression*\n[,           * column-name* = *expression* ...]\nWHERE        ...\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Syntax 2"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE       *table-name*\nSET\n(          \n*column-name*\n[,   *column-name* ...]\n) =\n(\n*expression*\n[,   *expression* ...]\n)\nWHERE        ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"The first SET clause is required. Further SET clauses (introduced by a comma) are optional. There is no point using Syntax 2 if you only have 1 SET clause."}),"\n",(0,a.jsx)(n.p,{children:"In the UPDATE clause, table-name must be a literal table name. In the SET clause(s), column-name must be a literal column name in that table.SQL functions, aliases, and variable elements are not allowed in these places."}),"\n",(0,a.jsxs)(n.p,{children:['The equal symbol (\xa0=\xa0), or symbols, in the SET clause is NOT a comparison operator but a literal part of the "UPDATE...\xa0SET\xa0...\xa0=\xa0 ... " command. ',(0,a.jsx)(n.em,{children:"Expression"})," is a column expression."]}),"\n",(0,a.jsxs)(n.p,{children:["If you omit the optional WHERE clause, ALL columns of ",(0,a.jsx)(n.em,{children:"table"})," are updated. Add a WHERE clause to restrict the operation to one record or a smaller number of records."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Example"})}),"\n",(0,a.jsx)(n.p,{children:'In this example, each customer who has more assets than allowed in her country will get the status "Overrun":'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE     customer c\nSET        c.status = 'Overrun'\nWHERE EXISTS\n(\n       SELECT   ''\n       FROM     asset a\n       RELATE   c \"HAS\" a\n       HAVING   COUNT(*) >\n       (\n               SELECT   b.value\n               FROM     boundary b\n               WHERE    b.name = 'max_no_of_assets'\n               AND      b.country = c.country_of_residence\n       )\n)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);