"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[23863],{6575:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Task_flow/Action_Language_reference_D-H/FileOpen","title":"FileOpen()","description":"This article is about the FileOpen action in the USoft Action Language.","source":"@site/docs/Task_flow/Action_Language_reference_D-H/FileOpen.md","sourceDirName":"Task_flow/Action_Language_reference_D-H","slug":"/Task_flow/Action_Language_reference_D-H/FileOpen","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileOpen","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"FileOpen"},"sidebar":"sidebar","previous":{"title":"FileExists()","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileExists"},"next":{"title":"FileSaveAs()","permalink":"/udocs/Task_flow/Action_Language_reference_D-H/FileSaveAs"}}');var s=i(74848),r=i(28453);const o={id:"FileOpen"},l="FileOpen()",a={},d=[{value:"<strong>FileOpen()</strong>",id:"fileopen-1",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fileopen",children:"FileOpen()"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This article is about the ",(0,s.jsx)(n.strong,{children:"FileOpen"})," action in the ",(0,s.jsx)(n.a,{href:"/udocs/Task_flow/Action_Language_reference/USoft_Action_Language",children:"USoft Action Language"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"fileopen-1",children:(0,s.jsx)(n.strong,{children:"FileOpen()"})}),"\n",(0,s.jsx)(n.p,{children:'Opens the standard Windows "Open File" dialog that enables the user to open a file. If the user does choose a file in the dialog, the name of that file is returned as the value of the current control.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FileOpen( *title*, *directory*, *file*, *read-only*, *filter* ... )\n\n*read-only*  :=  { *read-only* | }\n\n*filter*  :=  *description*, *type*\n"})}),"\n",(0,s.jsxs)(n.p,{children:["All parameters are optional string parameters. If you want to pass any parameter, it is interpreted in strict order of position. Thus, to pass a ",(0,s.jsx)(n.em,{children:"filter"})," parameter, you must make sure to pass at least an empty string for each of ",(0,s.jsx)(n.em,{children:"title, directory, file, read-only."})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Title"})," is the text to appear as the dialog window title. If ",(0,s.jsx)(n.em,{children:"title"}),' is not specified, "Open" is used.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Directory"})," is the directory shown by default (= when the dialog is opened). If ",(0,s.jsx)(n.em,{children:"directory"})," is not specified, a default directory depending on settings in the file system is shown at this point, such as the last visited directory."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"File"})," is the name of the file to be selected by default (= when the dialog is opened). This name is displayed in the File Name field. If ",(0,s.jsx)(n.em,{children:"file"})," is not specified, either the field is empty at this point, or a default file is displayed, depending on settings in the file system."]}),"\n",(0,s.jsxs)(n.p,{children:["If the value 'read-only' is passed for ",(0,s.jsx)(n.em,{children:"read-only,"})," the dialog will offer by default to open the file in read-only mode. Otherwise, the dialog will offer by default to open the file in read-write mode."]}),"\n",(0,s.jsxs)(n.p,{children:["You can add any number of optional ",(0,s.jsx)(n.em,{children:"filter"})," parameters. Each ",(0,s.jsx)(n.em,{children:"filter"})," parameter is a ",(0,s.jsx)(n.em,{children:"description, type"})," pair, where ",(0,s.jsx)(n.em,{children:"description"})," and ",(0,s.jsx)(n.em,{children:"type"})," are separated by commas from each other and from preceding and following values. ",(0,s.jsx)(n.em,{children:"Description"})," is the description of the file type that the dialog will display. ",(0,s.jsx)(n.em,{children:"Type"})," is a descriptor of the corresponding set of files. ",(0,s.jsx)(n.em,{children:"Type"})," will contain at least one * wildcard."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"FileOpen( \n    'Select File'\n,   'c:\\temp\\' \n,   FORMULA ( :1 || :2, query.job(), '.log' )\n,   ''\n,   'Log Files (*.log)' ,  '*.log'\n,   'All Files (*.*)'   ,  '*.*' \n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);