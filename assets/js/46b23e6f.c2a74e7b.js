"use strict";(self.webpackChunkudocs=self.webpackChunkudocs||[]).push([[12689],{17687:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Extensions/Web_service_components/MTOM_Message_Transmission_Optimization_Mechanism_Support","title":"MTOM (Message Transmission Optimization Mechanism Support)","description":"MTOM is the W3C Message Transmission Optimization Mechanism, a method for efficiently sending binary data to and from web services. It uses XOP (XML-binary Optimized Packaging) to transmit binary data. XOP is the W3C XML-binary Optimized Packaging, a method of efficiently embedding binary data in XML.","source":"@site/docs/Extensions/Web_service_components/MTOM_Message_Transmission_Optimization_Mechanism_Support.md","sourceDirName":"Extensions/Web_service_components","slug":"/Extensions/Web_service_components/MTOM_Message_Transmission_Optimization_Mechanism_Support","permalink":"/udocs/Extensions/Web_service_components/MTOM_Message_Transmission_Optimization_Mechanism_Support","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"MTOM_Message_Transmission_Optimization_Mechanism_Support"},"sidebar":"sidebar","previous":{"title":"How to implement DIME messages","permalink":"/udocs/Extensions/Web_service_components/How_to_implement_DIME_messages"},"next":{"title":"Debugging web service components","permalink":"/udocs/Extensions/Web_service_components/Debugging_web_service_components"}}');var i=t(74848),r=t(28453);const a={id:"MTOM_Message_Transmission_Optimization_Mechanism_Support"},o="MTOM (Message Transmission Optimization Mechanism Support)",l={},c=[{value:"How to create",id:"how-to-create",level:2},{value:"How to change the name \xa0of the received files",id:"how-to-change-the-name-of-the-received-files",level:2},{value:"How to automatically generate a file name for received files",id:"how-to-automatically-generate-a-file-name-for-received-files",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mtom-message-transmission-optimization-mechanism-support",children:"MTOM (Message Transmission Optimization Mechanism Support)"})}),"\n",(0,i.jsx)(n.p,{children:"MTOM is the W3C Message Transmission Optimization Mechanism, a method for efficiently sending binary data to and from web services. It uses XOP (XML-binary Optimized Packaging) to transmit binary data. XOP is the W3C XML-binary Optimized Packaging, a method of efficiently embedding binary data in XML."}),"\n",(0,i.jsx)(n.p,{children:"The Web Service Component in USoft allows you to send binary data along with your SOAP message using the MTOM format. However, if you create a Web Service Component using the New Web Service Component wizard this does not create the correct method definition for sending MTOM. You must create a web service component from scratch if you want to send and/or receive MTOM messages."}),"\n",(0,i.jsx)(n.p,{children:"To send binary data using MTOM format with USoft the binary data must be in files (not in the database). USoft reads the files and send them as an MTOM encoded message to the web service provider."}),"\n",(0,i.jsx)(n.p,{children:"USoft can also receive MTOM encoded messages. Binary data sent in the message will be saved in a file in an specified output directory."}),"\n",(0,i.jsx)(n.h2,{id:"how-to-create",children:"How to create"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"From the menu bar, select Define, RDMI, Web Service Components."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Supply a name for your web service."}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Create a constructor method with the following Physical Method:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this=new com.usoft.WebServiceClient.WSClient()\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.setEndpointURL((U):0)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.setInputFolder((U):1)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.setOutputFolder((U):2)\n"})}),"\n",(0,i.jsx)(n.p,{children:"The constructor method must have the same name as the component."}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Add the following parameters to this method:"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Seqno"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Name"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Mode"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"DataType"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"url"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"input_folder"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"output_folder"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"url represents the access point of the web service (SOAP address location in the WSDL file)."}),"\n",(0,i.jsx)(n.li,{children:"input_folder represents the folder where the input files are located."}),"\n",(0,i.jsx)(n.li,{children:"output_folder represents the path to the location where the binary data received from the web service will be saved as files. The output folder can be omitted if the files are saved in the current directory. To omit the output folder, remove this.setOutputFolder((U):2) from the physical path"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.setEndpointURL((U):0)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.setInputFolder((U):1)\n"})}),"\n",(0,i.jsx)(n.p,{children:"and remove the output_folder input parameter."}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"On the Constructor tab, select the Active checkbox and specify using a select statement in the constructor SQL the values for the constructor parameters. Check the constructor SQL."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example of constructor SQL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SELECT 'http://www.test.com/TestingMtom', 'C:/Input/', 'C:/Output'\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Create another method that will send the MTOM message, with the following physical method:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"this.sendSOAPMessage((U) :0, (U) :1, (U) :2)\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"Add the following parameters to this method:"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Seqno"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Name"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Mode"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"DataType"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"body"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"header"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"SoapAction"}),(0,i.jsx)(n.td,{children:"In"}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"result"}),(0,i.jsx)(n.td,{children:"Return"}),(0,i.jsx)(n.td,{children:"String"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"body represents the body of your SOAP message. The element that contains binary data must have as a subelement a USoft processing instruction that will specify that that element contains binary data in MTOM format:"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'<?usoft-mtom path="path to the file that will be sent as binary with the message"?>'}),"."]}),"\n",(0,i.jsx)(n.li,{children:"If there is a input_folder specified in constructor than the path can be only the file name, otherwize the path should be the absolute path of the file."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<MTOMM-essage xmlns="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \xa0 \xa0 \xa0 <request>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:' \xa0 \xa0 \xa0 \xa0<BinaryData><?usoft-mtom path="TestMTOM.doc"?></BinaryData>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \xa0 \xa0 \xa0</request>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"header represents the header of the soap message"}),"\n",(0,i.jsx)(n.li,{children:"SoapAction represents the SOAPAction HTTP header."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can now execute a call to this service in your application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"INVOKE <web service component name>.<method name>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"WITH\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SELECT\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\'<MTOMMessage xmlns="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \xa0 \xa0 \xa0 \xa0<request>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:' \xa0 \xa0 \xa0 \xa0<BinaryData><?usoft-mtom path="TestMTOM.doc"?></BinaryData>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \xa0 \xa0 \xa0 \xa0</request>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</ MTOMMessage >',\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"null,\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"'http://www.test.com/TestMtom/action1'\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the response has binary data in MTOM encoding, that data will be saved into files. The files are saved in the location specified by the output folder in the constructor method. The (unique) file names are generated by USoft without extensions and they will be returned in a USoft processing instruction in the element where the binary data should be."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Example of response"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<soap:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xop="http://www.w3.org/2004/08/xop/include" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" >\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<soap:Body>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<MTOMResponse xmlns="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<BinaryData>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<?usoft-mtom \xa0path="C:\\Output\\2d33366539343139613a31313161333034366335373a2d37666666_20070330152414114"?>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</BinaryData>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</ MTOMResponse>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</soap:Body>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</soap:Envelope>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-change-the-name-of-the-received-files",children:"How to change the name \xa0of the received files"}),"\n",(0,i.jsx)(n.p,{children:"When receiving a message that contains MTOM encoded binary data, USoft creates a unique file name by default and saves the binary data with that name."}),"\n",(0,i.jsx)(n.p,{children:"If the response when calling an MTOM web service contains binary data in the SOAP message (base64 encoded) then USoft cannot automatically tell where the binary data is, to save it using a uniquely generated file name. In this case the user must create a transformation that will generate custom file names. Using this transformation, binary data in the response message will be saved regardless of the encoding (base64 in the SOAP message or MTOM attachments)."}),"\n",(0,i.jsx)(n.p,{children:"You can overrule the unique file name(s) created by USoft with a user-defined file name(s) based on the data in the received XML message by specifying a transformation (XSL). The transformation will be automatically applied by USoft to the received XML message.The transformation must produce the same result as the received message, except that for the binary element it must add a usoft-mtom processing instruction containing the path to the file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<?usoft-mtom path="path to the file"?>\n'})}),"\n",(0,i.jsx)(n.p,{children:"For example, if the received message is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<MTOMResponse xmlns="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<FileName>SomeFileName.txt</FileName>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<BinaryData></BinaryData>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</MTOMResponse>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["and you want to retrieve the file name from the ",(0,i.jsx)(n.code,{children:"<FileName>"})," element, the transformation must look like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\'<?xml version="1.0" encoding="windows-1252"?>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:stylesheet \xa0 version="1.0" \xa0 xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:output method="xml" encoding="windows-1252" omit-xml-declaration="no"/>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:template match="*|@*|comment()|processing-instruction()|text()">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" \xa0<xsl:copy> \xa0 \xa0\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:apply-templates select="*|@*|text()|comment()|processing-instruction()"/> \xa0\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</xsl:copy>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</xsl:template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:template match="ns1: BinaryData">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<xsl:copy>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:processing-instruction name="usoft-mtom"><xsl:text>path="</xsl:text><xsl:value-of select="../ns1:FileName"/>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:text>.txt"</xsl:text></xsl:processing-instruction>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</xsl:copy>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</xsl:template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</xsl:stylesheet>'\n"})}),"\n",(0,i.jsx)(n.p,{children:"The resulting XML will be"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<?xml version="1.0" encoding="windows-1252"?><MTOMResponse xmlns="http://www.test.com/TestMtom/v1">\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<FileName>SomeFileName.txt</FileName>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<BinaryData><?usoft-mtom path="SomeFileName.txt.txt"?></BinaryData>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</result>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"</MTOMResponse>\n"})}),"\n",(0,i.jsx)(n.p,{children:"To specify the transformation to the web service component change the constructor method as follows:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Change the Physical Name to"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add a new input parameter with name 'transformation' and type String to the parameter list."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Change the constructor SQL to:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-automatically-generate-a-file-name-for-received-files",children:"How to automatically generate a file name for received files"}),"\n",(0,i.jsx)(n.p,{children:"This example generates customer specific filenames for files received \xa0in the web service response. The example shows how to build a file path based upon information in the returned XML (1), how the user's home directory can be found from local properties (2) and how a formatted date can be retrieved (3). Using these items, a suitable file name can be made for the received file data."}),"\n",(0,i.jsx)(n.p,{children:"The transformation is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="windows-1252" ?>\n<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="MyMTOMProviderURN" xmlns:System="xalan://java.lang.System" xmlns:java="http://xml.apache.org/xalan/java">\n  <xsl:output method="xml" encoding="windows-1252" omit-xml-declaration="no" />\n  <xsl:variable name="date" select="java:java.util.Date.new()" />\n  <xsl:variable name="sdf" select="java:java.text.SimpleDateFormat.new(\'---yyyy-MM-dd---HH.mm.ss.SSS\')" />\n<xsl:template match="*|@*|comment()|processing-instruction()|text()">\n<xsl:copy>\n  <xsl:apply-templates select="*|@*|text()|comment()|processing-instruction()" />\n  </xsl:copy>\n  </xsl:template>\n<xsl:template match="ns1:FileData">\n<xsl:copy>\n<xsl:processing-instruction name="usoft-mtom">\n  <xsl:text>path="</xsl:text>\n  <xsl:value-of select="System:getProperty(\'user.home\')" />\n  <xsl:text>/</xsl:text>\n  <xsl:value-of select="local-name()" />\n  <xsl:value-of select="java:format($sdf, $date)" />\n  <xsl:text>.txt"</xsl:text>\n  </xsl:processing-instruction>\n  </xsl:copy>\n  </xsl:template>\n</xsl:stylesheet>\n'})}),"\n",(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.p,{children:"The sections of this transformation associated with retrieving items for the file name are described below:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The sections of the transformation shown above that are concerned with building a file path based upon information in the returned XML are as follows (with comments):"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:value-of select="local-name()"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:'The XML returned from the Web Service is used as part of the file name. Since we do not know the XML response format in this example we just ask for the name of the current node. In practical applications, the query might be something like select="concat(../ABCService/Filename,../ABCService/defaultExtension)"'}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"The sections of the transformation concerned with extracting the user's home directory from the local properties are as follows:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'xmlns:System="xalan://java.lang.System"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Makes the java.lang.System.getproperty() method available for use below."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<xsl:value-of select=\"System:getProperty('user.home')\"/>\n"})}),"\n",(0,i.jsx)(n.p,{children:"The System name space is used to invoke a static method of the java.lang.System object."}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"The sections of the transformation that retrieve a formatted date are as follows:"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["xmlns",":java",'="',(0,i.jsx)(n.a,{href:"http://xml.apache.org/xalan/java",children:"http://xml.apache.org/xalan/java"}),'"']}),"\n",(0,i.jsx)(n.p,{children:"Allows java objects to be created, as below."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:variable name="date" select="java:java.util.Date.new()"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Creates a java Date object that holds the current date and time."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:variable name="sdf" select="java:java.text.SimpleDateFormat.new(\'---yyyy-MM-dd---HH.mm.ss.SSS\')"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Creates a simple date format to format the Date object into a string."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<xsl:value-of select="java:format($sdf, $date)"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"The formatting of the current date by the simple date format is inserted as part of the desired file name."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);